 # https://pythontutor.com/render.html#mode=display
 # визуалзатор

# def addArr(a ):
#
#     arr = []
#     for i in list(a):
#         arr.append( int(i) )
#     return arr
#
#
#
#
#
# def calc(caclEl):
#
#     a,b,c = caclEl
#     # print(a,b,c,type(a) )
#
#
#     print(f'{a}{b}{c}\n'
#           f'{a}{c}{b}\n'
#           f'{b}{a}{c}\n'
#           f'{b}{c}{a}\n'
#           f'{c}{a}{b}\n'
#           f'{c}{b}{a}')
#
#
# a = input()
# caclEl = addArr(a)
#
# calc(caclEl)


# ===================

# put your python code here
# def calc(num):
#
#    arrEl = list(num)
#
#    a,b,c,d = arrEl
#
#    print(f'Цифра в позиции тысяч равна {a}\n'
#          f'Цифра в позиции сотен равна {b}\n'
#          f'Цифра в позиции десятков равна {c}\n'
#          f'Цифра в позиции единиц равна {d}')
#
# num = input()
# calc(num)

# ТЫСЯЧИ СОТНИ ДЕСЯТКИ ЕДИНИЦЫ
# num//1000   # thousands
# num//100%10 # hundreds
# num%100//10 # dozens
# num%10      # units

# ===================

# print('*****************')
# print('*               *')
# print('*               *')
# print('*****************')

# ===================
# import math
# def calc(a,b):
#
#     print(f'Квадрат суммы {a} и {b} равен {int(math.pow((a+b), 2))}')
#     print(f'Сумма квадратов {a} и {b} равна {a**2 + b**2}')
#
# a = int(input())
# b = int(input())
#
# calc(a,b)


# ===================

# def calc(a,b,c,d):
#
#     arr = [a,b,c,d]
#     a, b, c, d = arr
#
#     summ = a**b + c**d
#     print(summ)
#
# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
#
# calc(a,b,c,d)



# ===================

# a = input()
#
# n   = [a for i in range(1,4,3)]
# n1 = int(n[0])
# # print(n1)
#
# nn  = [a for i in range(1,4,2)]
# nn1 = int(nn[0]+nn[1])
# # print(nn1)
#
#
# nnn = [a for i in range(1,4,1)]
# nnn1 = int(nnn[0]+nnn[1]+nnn[2])
# # print(nnn1)
# #
# # print(n, nn, nnn)
#
# print(n1+nn1+nnn1)



# =================== экзамен закончился

# i = int(input('Введи число: '))

# if i / 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

# if i // 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

#3 - ok
# if i % 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

# if i // 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

#5 - ok (перестановка сбила с толку :-) )
# if i % 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')

# if i // 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')

# def compare(pswd1, pswd2):
#     if pswd1 == pswd2:
#         print('Пароль принят')
#     else:
#         print('Пароль не принят')
#
# pswd1 = input()
# pswd2 = input()
#
# compare(pswd1, pswd2)

# i = int(input())
# if i % 2 != 0:
#      print('нечётное')
# else:
#      print('чётное')
#
# print(('Четное','Нечетное')[ int(input()) % 2 ])

# ТЫСЯЧИ СОТНИ ДЕСЯТКИ ЕДИНИЦЫ
# num//1000   # thousands
# num//100%10 # hundreds
# num%100//10 # dozens
# num%10      # units

# def compare(num):
#     arr = list(num)
#     a,b,c,d = arr
#
#     if int(a) + int(d) == int(b) - int(c):
#         print('ДА')
#     else:
#         print('НЕТ')
#
# num = input()
# compare(num)

#print(('Доступ разрешен','Доступ запрещен')[ int(input()) < 18 ])

# Арифметическая прогрессия  - это числовая последовательность  , в которой каждое число, начиная со второго,
# получается из предыдущего добавлением к нему постоянного числа (так называемого шага).
# Соответственно третье число арифметической прогрессии будет равно - разности второго и первого числа
# прибавленного к второму числу:
#
# допустим, есть последовательность  трех чисел:  a b c
#
#  a - первое число,
# b - второе число,
# c - третье число,
# ( b - a) - шаг , чтобы понять является ли данная последовательность  арифметической прогрессией,
# должно выполнятся условие: \
#
#     ( b - a) + b = c
#  или: b-a = c-b



# def calc(a,b,c):
#
#     arr = [a,b,c]
#     a, b, c = arr
#
#     if b-a == c-b:
#         print('YES')
#     else:
#         print('NO')
#
# a = int(input())
# b = int(input())
# c = int(input())
#
#
# calc(a,b,c)

# =====================

# 4.1.3.  Напишите программу, которая определяет наименьшее из двух чисел.
#
# Решение 1
#
# def minEl(a,b):
#
#     arr = [a,b]
#     minEl = min(arr)
#     print(minEl)
#
# a = int(input())
# b = int(input())
#
# minEl(a,b)
#
#
# Решение 2
#
# n = [int(input()) for _ in range(2)]
# print(min(n))
#
# Решение 3
# print(min(int(input()), int(input())))

# =====================

# 4.1. Напишите программу, которая определяет наименьшее из четырёх чисел.

# def minEl(a,b,c,d):
#
#     arr = [a,b,c,d]
#     min_elm = arr[0]
#
#     for i in arr:
#         if i <= min_elm:
#             min_elm = i
#
#     print(min_elm)
#
# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
#
# minEl(a,b,c,d)

# Решение 2
# sp = []
# for i in range(4):
#     a = int(input())
#     sp.append(a)
# print(min(sp))



# print(min(int(input()), int(input()), int(input()), int(input())))

# =====================

# Задача stepik № 4.1.4
#
# Напишите программу, которая по введённому возрасту пользователя сообщает,
# к какой возрастной группе он относится:
#
# до 13 включительно – детство;
# от 14 до 24 – молодость;
# от 25 до 59 – зрелость;
# от 60 – старость.

# def age(num):
#
#     if num >= 60:
#         print('старость')
#     if (25 <= num <= 59):
#         print('зрелость')
#     if (14 <= num <= 24):
#         print('молодость')
#     if (0 <= num <= 13):
#             print('детство')
#
# num = int(input())
# age(num)


# Решение 2
# n = int(input())
# print("старость" if n>59 else "зрелость" if n>24 else "молодость" if n>13 else "детство")

# Решение 3

# a = int(input())
# print(['детство', 'молодость', 'зрелость', 'старость'][sorted([13, 24, 60, a]).index(a)])


# 4.1...
# Напишите программу, которая считывает три числа
# и подсчитывает сумму только положительных чисел.

# def addCalc(a,b,c):
#
#     arr = [a,b,c]
#
#     acc_sum = []
#
#     for i in arr:
#         if i<0:
#             i=0
#         acc_sum.append(i)
#
#     summ = sum(acc_sum)
#     print(summ)
#
#
#
# a = int(input())
# b = int(input())
# c = int(input())
#
# addCalc(a,b,c)


# ===========================

# 4.2 Логические операции

# 2 == 2 or 4 > 2     True    (True or True)
# 6 <= 6 and 2 > 3    False   (True and False)
# 1 != 4 and 6 != 3   True    (True and True)
# 2 >= -1 or 2 <= 4   True    (True or True)
# not (2 > 2)         True    not (False)
# not (6 <= 10)       False   not (True)


# Что будет выведено на экран в результате выполнения следующей программы?

# num1 = 34
# num2 = 81
# if num1 // 9 == 0 or num2 % 9 == 0:
#     print('число', num1, 'выиграло')
# else:
#     print('число', num2, 'выиграло')


#Задача 4.2.1

# Напишите программу, которая принимает целое число xx и
# определяет, принадлежит ли данное число указанному промежутку (-1, 17).

# мой вариант 1:

# dot = int(input())
#
# if -1 < dot < 17:
#     print('Принадлежит')
# else:
#     print('Не принадлежит')

# мой вариант 2 COUNT:

# def compare(dot):
#     gapArr = list(range(-0,17))
#
#     if gapArr.count(dot):
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)

#
# мой вариант 3 ANY

# def compare(dot):
#     gapArr = list(range(0,17))
#
#     # если есть такой el который == введенному значению dot
#     res = any( el==dot for el in gapArr)
#
#     print('Принадлежит' if res==True else 'Не принадлежит')
#
# dot = int(input())
# compare(dot)

# ******

# вариант 2
# print(('Не п', 'П')[-1 < int(input()) < 17] + 'ринадлежит')
#
# вариант 3
# print('Принадлежит' if -1 < int(input()) < 17 else 'Не принадлежит')

# вариант 4
# print('Принадлежит' if int(input()) in range(0, 17) else 'Не принадлежит')

# ******


# Задача № 2 из 4.2.
#
# Напишите программу, которая принимает целое число xx и определяет,
# принадлежит ли данное число указанным промежуткам (-∞, -3) (7, +∞).


# мой вариант 1

# def compare(dot):
#
#     if -3 < dot <7 :
#         print('Не принадлежит')
#     else:
#         print('Принадлежит')
#
# dot = int(input())
# compare(dot)


# мой вариант 2

# def compare(dot):
#
#     arr = list(range(-2, 7))
#
#     res = any(el == dot for el in arr)
#
#     if res == False :
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)


# чужой вариант1 в 1 строку
# print('Принадлежит' if not -3 < int(input()) < 7 else 'Не принадлежит')

# чужой вариант2 в 1 строку
# print(("П", "Не п")[(-3 < int(input()) < 7)] + "ринадлежит")

# ========================

# Задача № 3 из 4.2.

# Напишите программу, которая принимает целое число x и
# определяет, принадлежит ли данное число указанным промежуткам:
#
# (-30,-2) и (7, 25)

# def compare(dot):
#
#     arr1 = list(range(-29, -1))
#     arr2 = list(range(8, 26))
#
#
#     res1 = any(el == dot for el in arr1)
#     res2 = any(el == dot for el in arr2)
#
#     if res1 == True or res2 == True:
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)

# ========================

# Задача № 4 из 4.2.
# def compare(num):
#     arrLen = len( list( str(num) ) ) #кол-во цифр в числе
#
#     if arrLen < 4 or arrLen >4:  # (с отрицательным -123 не сработает )
#         print('NO')
#         exit()
#     if num%7 ==0 or num%17 == 0:
#         print('YES')
#     else:
#         print('NO')
#
# num = int(input())
# compare(num)

# n = int(input())
# a = n // 1000
# if ((n>0) and (a != 0)) and ((n % 7 == 0) or (n % 17 == 0)):
#     print ('YES')
# else:
#     print ('NO')


# ========================

# Задача № 4 из 4.2.

# Напишите программу, которая принимает три положительных числа
# и определяет, существует ли невырожденный треугольник с такими сторонами
#
#  То есть, должны выполняться строгие неравенства
#
# a+b>c
# a+c>b
# b+c>a


# def addCalc(a,b,c):
#
#     if a+b > c:
#         if a+c > b:
#             if b+c >a:
#                 print('YES')
#             else:
#                 print('NO')
#     else:
#         print('NO')
#
#
#
# a = int(input())
# b = int(input())
# c = int(input())
#
# addCalc(a,b,c)


# ========================


# Задача № 5 из 4.2.

# Високосный год
# Напишите программу, которая определяет, является ли год с данным номером високосным.
# Если год является високосным, то выведите «YES», иначе выведите «NO».
#
# Год является високосным, если
# его номер кратен 4, но не кратен 100, или если он кратен 400.

# def leap(y):
#
#     if (y%4 == 0 and y%100 !=0) or y%400 == 0:
#         print('YES')
#     else:
#         print('NO')
#
# y = int(input())
# leap(y)


# ========================


# Задача № 6 из 4.2.

# Ход ладьи
# Даны две различные клетки шахматной доски.
# Напишите программу, которая определяет, может ли ладья попасть с первой клетки на
# вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и
# номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом ладьи можно попасть во вторую,
# или «NO» в противном случае.

# def chess(a,b,c,d):
#     if a==c or b==d:
#         print('YES')
#     else:
#         print('NO')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# chess(a,b,c,d)


# вариант решения № 2

# def chess(a,b,c,d):
#     if a-c==0 or b-d==0:
#         print('YES')
#     else:
#         print('NO')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# chess(a,b,c,d)


# ========================


# Задача № 7 из 4.2.

# Ход короля
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли король попасть с первой клетки
# на вторую одним ходом.
#
# Программа получает на вход четыре числа от 1 до 8 каждое,
# задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом короля можно попасть во вторую,
# или «NO» в противном случае.


# def chess(a,b,c,d):
#     if abs(a-c) > 1 or abs(b-d) > 1:
#         print('NO')
#     else:
#         print('YES')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# # здесь могла бы быть валидация на превышение 8
#
# chess(a,b,c,d)



# ========================


# Задача № 1 из 4.3.
#
# def compare(zoom, flash):
#     if zoom > flash:
#         print('NO')
#     elif zoom < flash:
#         print('YES')
#     else:
#         print("Don't know")
#
#
# zoom = int(input())
# flash = int(input())
#
# compare(zoom, flash)


# ========================


# Задача № 2 из 4.3.
# Напишите программу, которая принимает три положительных числа
# и определяет вид треугольника, длины сторон которого равны введенным числам.

# def tringle(a,b,c):
#     if a==b==c:
#         print('Равносторонний')
#         exit()
#     elif a !=b and b !=c and a != c:
#         print('Разносторонний')
#         exit()
#     else:
#         print('Равнобедренный')
#
# a=int(input())
# b=int(input())
# c=int(input())

# tringle(a,b,c)


# ========================

# Задача № 3 из 4.3.
# Даны три различных целых числа. Напишите программу, которая находит среднее по величине число.
# Средним называется число, которое будет вторым, если три числа отсортировать в порядке возрастания.

# def middle(*nums):   # args = (1, 2, 3)
#
#     arr = list(nums) # создать массив сразу из неск.аргум-в
#
#     arr.sort()       #  сортировка по возрастанию
#
#     print(arr[1])    #  среднее из трех
#
#
#
# a=int(input())
# b=int(input())
# c=int(input())
#
# middle(a,b,c)


# ========================

# Задача № 4 из 4.3.
# Дан порядковый номер месяца  (1,2,…, 12).
# Напишите программу, которая выводит на экран количество дней в этом месяце.
# Принять, что год является невисокосным.

# mon = int(input())
# # без ВАЛИДАЦИИ на ввод 1...12
# dic = \
#     {
#         1: 31,  2: 28, 3: 31,  4: 30,  5: 31, 6: 30,
#         7: 31,  8: 31,  9: 30,  10: 31, 11: 30, 12: 31
#     }
#
# for i in dic:
#     #print(i, dic[i]) # ключ / значение
#     if mon == i:
#         print(dic[i])


# ========================

# # Задача № 5 из 4.3.
# Известен вес боксера-любителя (целое число).
# Известно, что вес таков, что боксер может быть отнесён к одной из трех весовых категорий:
#
# Легкий вес – до 60 кг;
# Первый полусредний вес – до 64 кг;
# Полусредний вес – до 69 кг.
#
# Напишите программу, определяющую, в какой категории будет выступать данный боксер.

# def boxMan(weight):
#     if weight <60:
#         print('Легкий вес')
#     elif 60<=weight<64:
#         print('Первый полусредний вес')
#     else:
#         print('Полусредний вес')
#
#
# weight = int(input())
# boxMan(weight)

#samboРулит




# ========================

#  Задача № 6 из 4.3.

# КАЛЬКУЛЯТОР на словаре

# def calc(a,b,oprt):
#
#     if b == 0 and oprt == '/':
#         print('На ноль делить нельзя!')
#         exit()
#
#     elif oprt !='+' and oprt !='-' and oprt !='*' and oprt !='/':
#         print('Неверная операция')
#
#     # Словарь для операций (надо отработать этот знание)
#     cd = \
#         {
#             '+': a + b,
#             '-': a - b,
#             '*': a * b,
#             "/": a / b,
#         }
#
#     # Перебор на совпадение oprt с ключем из Словаря
#     for i in cd:
#
#         if oprt == i:
#             print(cd.get(i))
#
#
# a = int(input())
# b = int(input())
# oprt = input()
#
# calc(a,b,oprt)



# ====== вариант для Stepik (в лоб) ======

# def calc(a,b,oprt):
#
#     if b == 0 and oprt == '/':
#         print('На ноль делить нельзя!')
#         exit()
#
#     elif oprt !='+' and oprt !='-' and oprt !='*' and oprt !='/':
#         print('Неверная операция')
#
#     if oprt == '+':
#         print(a + b)
#     if oprt == '-':
#         print(a - b)
#     if oprt == '*':
#         print(a * b)
#     if oprt == '/':
#         print(a / b)
#
#
# a = int(input())
# b = int(input())
# oprt = input()
#
# calc(a,b,oprt)



# ========================

#  Задача № 7 из 4.3. (схитрил: два аргумента и Один словарь)

# def calcColor(a,b):
#
#     dic = \
#         {
#             'красный синий': 'фиолетовый',
#             'красный желтый': 'оранжевый',
#             'красный красный': 'красный ',
#             'синий красный': 'фиолетовый',
#             'синий желтый': 'зеленый',
#             'синий синий': 'синий',
#             'желтый красный': 'оранжевый',
#             'желтый синий': 'зеленый',
#             'желтый желтый': 'желтый',
#         }
#
#     #Перебор на совпадение 2-х цветов с ключем из Словаря
#
#     for i in dic:
#         #print(i)
#         ab = a+' '+b # схитрил для использования 2х аргументов
#         #print(ab)
#
#         if ab == i:
#             print( dic.get(i) )
#             exit()
#     else:
#         print('ошибка цвета') # такое возможно тольк в Python
#
# a = input()
# b = input()
#
# calcColor(a,b)


# ========================

#  Задача № 8 из 4.3. (поиск значения в Списке Списков)

# Цвета колеса рулетки
# На колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета карманов:
#
# карман 0 зеленый;
# для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный;
# для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный.
# Напишите программу, которая считывает номер кармана и показывает, является ли этот карман зеленым, красным или черным. Программа должна вывести сообщение об ошибке, если пользователь вводит число, которое лежит вне диапазона от 0 до 36.

# def color(num, arr):
#
#     for idx, podArr in enumerate(arr):
#         if str(num) in podArr:
#             print(idx, podArr) # Индекс ПодМассива / ПодМассив
#             if idx == 0:
#                 print('зеленый')
#             if idx == 1:
#                 print('красный')
#             if idx == 2:
#                 print('черный')
#             break
#     else:
#         print('ошибка ввода')
#
# num = input()
#
# # массив должен быть строго из string-значений
# arr = \
#     [
#         '0',
#         ['1','3','5','7','9','12','14','16',
#          '18','19','21','23','25','27','30','32','34','36'],
#         ['2','4','6','8','10','11','13','15',
#          '17','20','22','24','26','28','29','31','33','35']
#     ]
# # вызов функции
# color(num, arr)


# ========================

#  Задача № 9 из 4.3. (поиск значения в Списке Списков)

# Пересечение отрезков
# На числовой прямой даны два отрезка: [a_1;  b_1] и [a_2; b_2 ].
# Напишите программу, которая находит их пересечение.
#
# Пересечением двух отрезков может быть:
#
# отрезок;
# точка;
# пустое множество.

# def cross(a1, b1, a2, b2):
#
#     if a1<b1<a2<b2:
#         print('пустое множество')
#     if a1 < a2 < b1 < b2:
#         print(f'{a2} {b1}')
#     if a1 < b1 == a2 < b2:
#         print(f'{b1}')
#     if a1 < a2 < b1 == b2:
#         print(f'{a2} {b2}')
#     if a1 < a2 < b2 < b1:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b1 == b2:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b2 < b1:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b1 < b2:
#         print(f'{a2} {b1}')
#
#     if a2 < b2 < a1 < b1:
#         print('пустое множество')
#     if a2 < a1 < b2 < b1:
#         print(f'{a1} {b2}')
#     if a2 < b2 == a1 < b1:
#         print(f'{a1}')
#     if a2 < a1 < b1 == b2:
#         print(f'{a1} {b1}')
#     if a2 < a1 < b1 < b2:
#         print(f'{a1} {b1}')
#
#
# a1 = int(input())
# b1 = int(input())
# a2 = int(input())
# b2 = int(input())
#
# cross(a1, b1, a2, b2)

# ============ Контрольная работа (экзамен) ==========
# 5.  Итоговая работа на условный оператор

# Начало столетия
# Напишите программу, которая определяет, оканчивается ли год с данным номером на два нуля.
# Если год оканчивается, то выведите «YES», иначе выведите «NO».


# e = int(input())
#
# # arr = list(eahr)
# # print(arr)
#
# if e%1000 == 0 or e%100==0:
#     print('YES')
# else:
#     print('NO')


#===============

# Шахматная доска
# Заданы две клетки шахматной доски.
# Напишите программу, которая определяет имеют ли указанные клетки один цвет или нет.
# Если они покрашены в один цвет, то выведите слово «YES», а если в разные цвета — то «NO».
# help: https://madazimov.github.io//mathematics/shahmatnie-zadachki-shahmatnaya-doska.html

# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if (x1 + y1 + x2 + y2) % 2 == 0:
#     print('YES')
# else:
#     print('NO')
#


#===============

# age = int(input()) # 10...15
# sex = input() # f or m
#
#
# if 10 <= age <= 15:
#     if sex == 'f':
#         print('YES')
#     else:
#         print('NO')
#         exit()
# else:
#     print('NO')

#===============
#
# Римские цифры
# Напишите программу, которая считывает целое число и
# выводит соответствующую ему римскую цифру.
# Если число находится вне диапазона 1-10,
# то программа должна вывести текст «ошибка».


# num = int(input() ) # 1 ... 10
# arr = ['0', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X']
#
# for idx,el in enumerate(arr):
#     # print(idx, el ) # --> 0 0, 1 I , 2 II, ... 10 X
#     if num == idx:
#         print(el)
#         break
# else:
#     print('ошибка')
#
#


# ========== вариант решения через словарь ==========
# num = int(input())
#
# if 1 <= num <= 10:
#     RomanNumerals = {1:"I", 2:"II", 3:"III", 4:"IV", 5:"V",
#      6:"VI", 7:"VII", 8:"VIII", 9:"IX", 10:"X"}
#     print(RomanNumerals[num])
# else:
#     print("ошибка")

#===============

# YES or NO вот в чем вопрос
# Напишите программу, которая принимает на вход число
# и в зависимости от условий выводит текст «YES», либо «NO».
#
# Условия:
#
# если число нечётное, то вывести «YES»;
# если число чётное в диапазоне от 2 до 5 (включительно), то вывести «NO»;
# если число чётное в диапазоне от 6 до 20 (включительно), то вывести «YES»;
# если число чётное и больше 20, то вывести «NO».


# num = int(input())
#
# if num%2 !=0:
#     print('YES')
#     exit()
# if num%2 == 0 and (2 <= num <=5):
#     print('NO')
#     exit()
# if num%2 ==0 and (6 <= num <=20):
#     print('YES')
#     exit()
# if num%2 == 0 and num>20:
#     print('NO')

#===============

# Ход слона
# Даны две различные клетки шахматной доски.
# Напишите программу, которая определяет, может ли слон попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки
# сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом слона можно попасть во вторую
# или «NO» в противном случае.

# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if abs(x1 - x2) == abs(y1 - y2):
#     print('YES')
# else:
#     print('NO')

#===============

# Ход коня
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли конь попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки
# сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом коня можно попасть во вторую
# или «NO» в противном случае.

# a = int(input()) # место старта1
# b = int(input()) # место старта2
# c = int(input()) # финиш1
# d = int(input()) # финиш2
#
# dot1=a-c
# dot2=b-d
#
# #print(dot1**2 + dot2**2) #5 , закономерность для коня
#
# if (dot1**2 + dot2**2) == 5:
#     print('YES')
#     exit()
# else:
#     print('NO')


#===============

# Ход ферзя
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли ферзь попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и
# номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом ферзя можно попасть во вторую
# или «NO» в противном случае.

# x1 = int(input()) # место старта1
# y1 = int(input()) # место старта2
# x2 = int(input()) # финиш1
# y2 = int(input()) # финиш2
#
# if(x1==x2 and y1 != y2) or (x1 !=x2 and y1 == y2) or abs(x1-x2)==abs(y1-y2):
#     print('YES')
# else:
#     print('NO')


#=========== конец экзамена ============


# 6.1 Числовые типы данных: int, float

# задача 1 из темы 6.1.
# Площадь треугольника
# Напишите программу, которая считывает длины двух катетов в
# прямоугольном треугольнике и выводит его площадь.
# S = 1/2*a*b

# a = float(input())
# b = float(input())
#
# print(1/2*a*b)


# =============================

# задача 2 из темы 6.1.
# Две старушки
# Две старушки идут навстречу друг другу с постоянными скоростями V_1 V_2V км/ч.
# Определите, через какое время старушки встретятся, если расстояние между ними равно S км.

# V скорость сближения = V1+V2
# t = S/V

# s = float(input())
# v1 = float(input())
# v2 = float(input())
#
# t = s/(v1+v2)
# print(t)


# =============================

# задача 3 из темы 6.1.

# Обратное число

# Напишите программу, которая считывает с клавиатуры одно число и
# выводит обратное ему.
# Если при этом введённое с клавиатуры число – ноль, то вывести
# «Обратного числа не существует» (без кавычек).
#
# Пример: (2,5)^-1 = 1 / 2.5

# num = float(input())
#
# if num != 0:
#     print(1/num)
#     exit()
# else:
#     print('Обратного числа не существует')


# =============================

# задача 4 из темы 6.1.

# У   Рэя Бредбери есть роман «451 градус по Фаренгейту».
# Напишите программу, которая определяет, какой температуре по
# шкале Цельсия соответствует указанное значение по шкале Фаренгейта.
#
# Используйте формулу для перевода C = 5/9*(F-32)

# f = float(input())
#
# print( 5/9*(f-32) )


# =============================

# задача 5 из темы 6.1.
# Dog age
# На вход программе подается число nn – количество собачьих лет.
# Напишите программу, которая вычисляет возраст собаки в человеческих годах.
#
# Примечание. В течение первых двух лет собачий год равен 10.5 человеческим годам.
# После этого каждый год собаки равен 4 человеческим годам.

# def dogAge(y):
#
#     if y==1:
#         print(10.5)
#
#     elif y >= 2:
#         print( 21+(y-2)*4 )
#
# y = int(input())
# dogAge(y)


# =============================

# задача 6 из темы 6.1.

# Первая цифра после точки
#
# Дано положительное действительное число.
# Выведите его первую цифру после десятичной точки.
#
# Пример: 3384390.4339 --> 4

        # поиск решения: ... b % 1 * 10 // 1
        # 3384390.4339%1*10//1 ---> # 4.0
        # 459933200.23%1*10//1 ---> # 2.0
        # 555.50059%1*10//1    ---> # 5.0
        # 22127333.67213%1*10//1 ---> # 6.0
        # int(1.5%1*10//1)     ---> # 5

        # 1). 3384390.4339 % 1          ---> 0.4339000000618398
        # 2). 3384390.4339 % 1 *10      ---> 4.339000000618398
        # 3). 3384390.4339 % 1 *10 // 1 ---> 4.0 int(4.0) = 4

# num = float(input())
#
# print( int(num % 1 * 10 // 1 ) )



# =============================

# задача 7 из темы 6.1.
#
# Дробная часть
# Дано положительное действительное число.
# Выведите его дробную часть.

# num = float(input())
# print( num % 1 )

# =============================

# задача 8 из темы 6.1.

# Напишите программу, которая находит
# наименьшее и наибольшее из пяти чисел.

# a,b,c,d,e = int(input()), int(input()),int(input()),int(input()),int(input())
#
#
# mini = min(a,b,c,d,e)
# print(f'Наименьшее число = {mini}')
# maxi = max(a,b,c,d,e)
# print(f'Наибольшее число = {maxi}')



#  ==========  Примечание: ==========

# если Надо задать через input 5 разных значений, то в ОДНУ СТРОКУ:

# lst = [ int(input( ) ) for i in range(5) ]



# =============================

# задача 9 из темы 6.1.

# Сортировка трёх 🌶️
# Напишите программу, которая упорядочивает три числа от большего к меньшему.

# numArr = [ int(input() ) for i in range(3) ]
#
# numArr = sorted(numArr)
# numArr = numArr[::-1]
#
# for el in numArr:
#     print(el)

# ======== вариант сортировки ПУЗЫРЬКОМ (?) ============

# arr = [ int(input() ) for i in range(3) ]
#
# for i,eli in enumerate(arr):
#
#     for j,elj in enumerate(arr):
#
#         if arr[j]<arr[i]:
#             tmp = arr[i]
#             arr[i] = arr[j]
#             arr[j] = tmp
#
# #print(arr)
# for el in arr:
#     print(el)


# ======== вариант сортировки sort (reverse = True)============

# a = [int(input()) for _ in range (3)]
# a.sort(reverse = True)
# print(*a, sep = '\n')




# =============================

# задача 10 из темы 6.1.

# Интересное число

# Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется
# средней по величине цифре. Напишите программу, которая определяет интересное число или нет.
# Если число интересное, следует вывести – «Число интересное» иначе «Число неинтересное».

# def intrs(num):
#     arrStr = list(num) # ['1', '2', '3']
#     print(arrStr)
#
#     arrInt = list(map(int, arrStr))
#     print(arrInt)      # [1, 2, 3]
#
#     mdl = max(arrInt) - min(arrInt)
#     print(mdl)
#
#     if mdl in arrInt:
#         print('Число интересное')
#     else:
#         print('Число неинтересное')
#
# num = input()
# intrs(num)

# ==== коротк. вар-т решения ======

# lst = list(map(int, list(input())))
# print('Число интересное' if max(lst)*2 == sum(lst) else 'Число неинтересное')


# =============================

# задача 11 из темы 6.1.

# Абсолютная сумма
# Даны пять чисел. Напишите программу, которая
# вычисляет сумму их модулей |a_1| + |a_2| +|a_3| +|a_4| + |a_5|

# arr = [float(input()) for _ in range (5)]
#
# print(arr) # [532.0, 0.0, 3467.0, 0.0, 55353.0]
#
# total = 0
#
# for i in arr:
#     total += abs(i)
#
# print(total) # 59352.0



# =============================

# задача 12 из темы 6.1.

# Манхэттенское расстояние
# Прогуливаясь по Манхэттену, вы не можете попасть из точки А в точку Б по кратчайшему пути.
# Если только вы не умеете проходить сквозь стены, вам обязательно придется идти
# вдоль его параллельно-перпендикулярных улиц.
#
# На плоскости манхэттенское расстояние между двумя точками (p1;p2) и (q1;q2)
# ∣p1−q1∣+∣p2−q2∣.


# arr = [int(input()) for _ in range (4)]
#
# p1, p2, q1, q2 = arr
#
# print(p1, p2, q1, q2)
#
# print( abs(p1 - q1) + abs(p2 - q2) )


# =============================

# задача 1,2,3 из темы 6.2.
#print(f'"Python is a great language!", said Fred. "I don\'t ever remember having this much fun before."')

# arr = [str(input()) for _ in range (2)]
# print(f'Hello {arr[0]} {arr[1]}! You just delved into Python')

# a = input()
# print(f'Футбольная команда {a} имеет длину {len(a)} символов')


# =============================

# задача 4 из темы 6.2.

# def longName(city):
#
#     # собираю длины всех городов (а вдруг их тысячи)
#     arrLen = []
#     for i in city:
#         arrLen.append(len(i))
#     #print(arrLen)
#
#
#     for i,el in enumerate(city):
#
#         # сверка длины Города с макс/мин. знач-ем
#
#         if len(el) == min(arrLen):
#             minEl = el
#         elif len(el) == max(arrLen):
#             maxEl = el
#
#     print(f'{minEl}\n{maxEl}')
#
# # беру данные от ввода
# city = [str(input()) for _ in range (3)]
# # вызов ф-ции
# longName(city)

# ====== задача 4 из темы 6.2. (через key) ==========

# a, b, c = input(), input(), input()
# print(min(a, b, c, key=len),max(a, b, c, key=len), sep='\n')

# =============================

# задача 5 из темы 6.2.
# Арифметические строки
# Вводятся 3 строки в случайном порядке. Напишите программу, которая выясняет
# можно ли из длин этих строк построить возрастающую арифметическую прогрессию.

# def arifm(a, b, c):
#     a1 = len(a)
#     b1 = len(b)
#     c1 = len(c)
#
#     if (2*a1-b1-c1)*(2*b1-c1-a1)*(2*c1-b1-a1) == 0:
#         print('YES')
#     else:
#         print('NO')
#
#
# a, b, c = input(), input(), input()
# arifm(a, b, c)


# =============================

# задача 6 из темы 6.2.

# Цвет настроения синий
# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если в введенной строке есть подстрока «синий» и «NO» в противном случае.

# str = input()
# if 'синий' in str:
#     print('YES')
# else:
#     print('NO')


# Вариант 2 для задача 6 из темы 6.2.=====

# print("YES" if "синий" in input() else "NO")



# =============================

# задача 7 из темы 6.2.

# Отдыхаем ли?

# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если в введённой строке есть подстрока «суббота» или «воскресенье»,
# и «NO» в противном случае.

# # ввод строки от юзера
# str = input()
#
# # массив с контрольными словами
# day = ['суббота', 'воскресенье']
#
# # каждое контрольн.словао сверим на вхождение в str
# for idx,el in enumerate(day):
#
#     if el in str:
#         print('YES')
#
#         # Принудит. выход, чтоб не искало по второму слову
#         exit()
#
# # удобно тут вставить, чтоб не отрицало по 2-му слову
# else:
#     print('NO')



# =============================


# задача 8 из темы 6.2.

# Корректный email
# Будем считать email адрес корректным, если в нем есть символ собачки (@) и точки.
# Напишите программу проверяющую корректность email адреса.

# mail = input()
#
# valid = ['.', '@']
#
# if valid[0] in mail and valid[1] in mail:
#     print('YES')
# else:
#     print('NO')


# =============================


# задача 1 из темы 6.3.
# Евклидово расстояние
# На плоскости евклидово расстояние между двумя точками (x 1 ;y 1 ) и (x 2 ;y 2 )
# определяется так  ρ= sqrt{(x_1-x_2)^2 + (y_1-y_2)^2}
#
# Напишите программу определяющую евклидово расстояние между двумя точками,
# координаты которых заданы. Программа должна вывести одно число – евклидово расстояние.

# To_Do:
# 1. ввод данных
# 2. сумма квадратов разниц (x1-x2)**2 + (y1-y2)**2
# 3. квадратный корень sqrt

# import math
# def calcEvclid(dots):
#
#     x1, y1, x2, y2 = dots
#     #print(x1, y1, x2, y2)
#
#     summ = ( (x1 - x2) ** 2 + (y1 - y2) ** 2 )
#     p = summ**0.5
#
#     print(p)
#
#
#
# dots = [float(input() ) for el in range(4)]
# calcEvclid(dots)
#


# =============================


# задача 2 из темы 6.3.

# Площадь и длина
# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу R.
# Используйте константу math.pi

# import math
# r = float(input())
#
# pi = math.pi
#
# s = pi*r**2
# print(s)
#
# c = 2*pi*r
# print(c)

# =============================


# задача  3 из темы 6.3.

# Программа должна вывести 4 числа –
# среднее арифметическое, геометрическое, гармоническое и квадратичное.

# num = [float(input()) for el in range(2)]
# a,b = num
#
# midd_arf = (a + b)/2
# print( midd_arf)
#
# midd_gmt = (a*b)**0.5
# print(midd_gmt)
#
# midd_gar = 2*(a*b) / (a+b)
# print(midd_gar)
#
# midd_qwt = ( (a**2 + b**2) / 2)**0.5
# print(midd_qwt)


# =============================


# задача 4 из темы 6.3.

# Напишите программу, вычисляющую значение тригонометрического выражения:
# sin*x+cos*x+tan^2*x
# по заданному числу градусов x .

# Тригонометрические функции принимают аргумент в радианах.
# Чтобы перевести градусы в радианы, воспользуйтесь формулой:

# r = (x*math.pi) / 180

# или:
# Модуль math содержит встроенную функцию radians(),
# которая переводит угол из градусов в угол в радианах.


# import math
# x = float(input())
# grade = math.radians(x)
#
# value = math.sin(grade) + math.cos(grade) + math.tan(grade)**2
#
# print(value)


# =============================


# задача 5 из темы 6.3.


# # подключение модуля (способ 1: c приставкой math. )
# import math
#
# x = float(input())
# print(math.ceil(x) + math.floor(x))
#
#
# # подключение всех функций модуля (способ 2)
# from math import *
#
# print(sqrt(9))
#
#
# # подключение конкретных функций модуля (способ 3)
# from math import ceil, floor
#
#
# x = float(input())
# print(ceil(x) + floor(x))



# =============================


# задача 6 из темы 6.3.

# Квадратное уравнение 🌶️🌶️
# Даны три вещественных числа aa, bb, cc.
# Напишите программу, которая находит вещественные корни квадратного уравнения
# ax^2 + bx + c = 0.
#
# Программа должна вывести вещественные корни уравнения если они существуют
# или текст «Нет корней» в противном случае.
#
# Если уравнение имеет два корня, то следует вывести их в порядке возрастания.
#
# Решение:
#
# 1. Дискриминат:
# D = b**2-4*a*c
#
# 2. Ищем корни:
# D < 0 нет корней
# D = 0 один корень (расчет х)
# D < 0 два корня  (расчет х1 и х2)
#
# 3. Расчет одного корня (A) и двух корней (Б):
#
# А). x = -b/(2*a)
#
# Б). x1 = (-b+d**0.5)/(2*a)
#     x2 = (-b-d**0.5)/(2*a)
#
# 4. вывод в порядке возрастания:
#
# min(x1, x2)
# max(x1, x2)

# def calc(arg):
#     print(arg)
#
#     a,b,c = arg
#
#     d = (b**2)-(4*a*c)
#     print(f' Дискриминант D = {d}')
#
#     if d < 0:
#         print('Нет корней')
#
#     if d == 0:
#         print(' Один корень')
#         x1 = -b / (2 * a)
#         print(x1)
#
#     if d > 0:
#         print(' Два корня')
#         x1 = (-b + (d**0.5)) /(2*a)
#         x2 = (-b - (d ** 0.5)) / (2 * a)
#
#         minEl = min(x1,x2)
#         maxEl = max(x1,x2)
#
#         print(minEl, maxEl, sep='\n')
#
#
# arg = [float(input()) for _ in range (3)]
# calc(arg)



# =============================


# задача 7 из темы 6.3.

# Правильный многоугольник

# Правильный многоугольник — выпуклый многоугольник, у которого равны все стороны
# и все углы между смежными сторонами.

# Площадь правильного многоугольника с длиной стороны a
# и количеством сторон  n вычисляется по формуле:

# s = (n*a**2)
#     _________
#     4 tg(pi/n)

# Даны два числа: натуральное число n  и вещественное число a .
# Напишите программу, которая находит S этого правильного многоугольника.
#
# from math import pi, tan
# n = int(input())
# a = float(input())
#
# zn = n*a**2
# ch = 4*( tan(pi/n) )
#
# s = zn/ch
# print(s)


# === ТЕМА 7 ==============

            # PYTHON  -->
            # for i in range(5):
            #     print(i) # 0 1 2 3 4


            #JS  -->
            # for(let i = 0; i<5; i++){
            #     console.log(i) // 0 1 2 3 4
            # }



# задание № 4 по Теме 7.1. (Цикл for)

# n = int(input())
# for i in range(1,n,1):
#     print('*'*19)

# ====== задание № 3 по Теме 7.1. (Цикл for) ===

#  вывести в печать:

# AAA
# AAA
# AAA
# AAA
# AAA
# AAA
# BBBB
# BBBB
# BBBB
# BBBB
# BBBB
# E
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# G

# for i in range(1,7,1):
#     print('A'*3)

# for i in range(1,6,1):
#     print('B'*4)

# print('E')

# for i in range(9):
#     print('T'*5)

# print('G')


# вариант решения в 1 строку
# [print((i*k+"\n")*j, end="") for i, j, k in zip("ABETG", [6, 5, 1, 9, 1], [3, 4, 1, 5, 1])]


# ====== задание № 2 по Теме 7.1. (Цикл for) ===

# def multi(str, n):
#     for i in range(n):
#         print(str)
#
# str = input()
# n = int(input())
#
# multi(str, n)


# ====== задание № 1 по Теме 7.1. (Цикл for) ===

# 1. Если не треуется, чтоб переменная участвовала в переборе значений
# for _ in range(3):
#     print('Python is awesome!')

#  на выходе:
# Python is awesome!
# Python is awesome!
# Python is awesome!

# ---------------------------------------

# 2. Если нужно, чтоб i участвовала в переборе значений

# for i in range(3):
#     print(f'Python is awesome № {i}')

#  на выходе:
# Python is awesome № 0
# Python is awesome № 1
# Python is awesome № 2




# ====== задание № 8 по Теме 7.1. (Цикл for) ===


# Популяция
# На вход программе подается три натуральных числа m,p,n:
#
# m: стартовое количество организмов;
# p: среднесуточное увеличение в %;
# n: количество дней для размножения.
# Напишите программу, которая предсказывает размер популяции организмов.
# Программа должна выводить размер популяции в каждый день,
# начиная с 11 и заканчивая n-м днем.

# # трижды ввод данных сразу в массив
# arrNum = [int(input()) for i in range(3)]
#
# # вывод из-под массива данных
# m,p,n = arrNum
#
# # массив-сборщик (усложн. чуть задачу)
# arrAcc = [m]
#
# # стартовая переменная (будет изменяться внутри for)
# start = m
#
# for i in range(n-1):
#     start += start*p/100
#     arrAcc.append(start)
#
# # вывод на печать (опять через for)
# for idx, el in enumerate(arrAcc):
#     print(idx+1, float(el))



# ====== задание № 5 по Теме 7.1. (Цикл for) ===

# Повторяй за мной 2

# Напишите программу, которая считывает одну строку текста и выводит 10 строк,
# пронумерованных от 0 до 9, каждая с указанной строкой текста.

# s = input()
#
# for el in range(10):
#     print(f'{el} {s}')


# ====== задание № 6 по Теме 7.1. (Цикл for) ===

# Квадрат числа
#
# На вход программе подается натуральное число n .
# Напишите программу, которая для каждого из чисел от 0  до n  (включительно)
# выводит фразу: «Квадрат числа [число] равен [число]» (без кавычек).

# n = int(input())
#
# for idx in range(n+1):
#     print( f'Квадрат числа {idx} равен {idx**2}' )


# ====== задание № 6 - вариант в 1 строку  по Теме 7.1. ===
# [print(f"Квадрат числа {i} равен {i**2}") for i in range(int(input())+1)]




# ====== задание № 7 по Теме 7.1. (Цикл for) ===

# Звездный треугольник
# Должно получиться типа такого:
#
# ***********
# **********
# *********
# ********
# *******
# ******
# *****
# ****
# ***
# **
# *

# s = int(input())
#
# for i in range(s):
#     print('*'*s)
#     s = s-1



# ====== задание № 1 по Теме 7.1. (функция range() ) ==

# Даны два целых числа m  и n  ( m≤n).
# Напишите программу, которая выводит все числа от m  до n  включительно.

# num = [int(input()) for el in range(2)]
# a,b = num
# for i in range(a,b+1):
#     print(i)



# ====== задание № 5 по Теме 7.1. (функция range() ) ==

# Таблица умножения
# Дано натуральное число n .
# Напишите программу, которая выводит таблицу умножения на  n.

# Вывод такой:
# 5 x 1 = 5
# 5 x 2 = 10
# 5 x 3 = 15
# 5 x 4 = 20
# 5 x 5 = 25
# 5 x 6 = 30
# 5 x 7 = 35
# 5 x 8 = 40
# 5 x 9 = 45
# 5 x 10 = 50


# n = int(input())
#
# for i in range(1,11,1):
#     print(f'{n} x {i} = {n*i}')



# ====== задание № 4 по Теме 7.1. (функция range() ) ==

# Последовательность чисел №4

# Даны два натуральных числа m  и n  ( m≤n).
# Напишите программу, которая выводит все числа от m  до n  включительно
# удовлетворяющие хотя бы одному из условий:
#
#  -- число кратно 17;
#  -- число оканчивается на 9;
#  -- число кратно 3 и 5 одновременно.

# Если чисел удовлетворяющих условию нет, выводить ничего не надо

# mn = [int(input()) for i in range(2)]
# m,n = mn
#
# for i in range(m, n+1):
#     if i%17==0 or i%10==9 or (i%3==0 and i%5==0):
#         print(i)


# ===========================

 # Последовательность чисел №2
# Даны два целых числа m и n .
# Напишите программу, которая выводит все числа от m до n включительно в порядке
# возрастания, если m<n , или в порядке убывания в противном случае (m>n).


# num = [int(input()) for i in range(2)]
# m,n = num
#
# if m<=n:
#    for el in range(m,n+1,1):
#        print(el)
# elif m>n:
#    for el in range(m,n-1,-1):
#        print(el)



#===============================


# Последовательность чисел № 3

# Даны два целых числа m и n  ( m>n).
# Напишите программу, которая выводит все нечетные числа
# от m до n включительно в порядке убывания.

#  Пример: 77 и 62   На выходе:  77 75 73 71 69 67 65 63

# ввод 2-х значений (сразу в массив)
# num = [int(input()) for i in range(2)]

# # реструктуризация массива на отдельн.элем.
# m,n = num
#
# # массив для накопления цифр от m до n
# arr= []

# # наполнение массива значениями
# for i in range(m,n-1,-1):
#    arr.append(i)

# # итерация по массиву и вывод значения по условию
# for i in arr:
#    if i%2 !=0:
#        print(i)


# 7.3 Частые сценарии

# Напишем программу, которая считывает 10 чисел и
# определяет сколько из них больше 10.

# import random
#
# # собрал массив рандомных значений
# arr = []
# for i in range(20):
#     el = random.randint(-10, 50)
#     arr.append(el)
# print(arr)
#
# count = 0
# count2 = 0
#
# for i in arr:
#     if i>10:
#         count +=1
#     if i%10 == 0:
#         count2 +=1
#
# print(count, count2)

# ======================

# Рассмотрим еще один пример:
# подсчитать количество чисел из диапазона [1;100],
# квадрат которых оканчивается на 4.

## from math import sqrt
# count = 0
# for i in range(1,101):
#     a = (i**2)%10
#
#     if a == 4:
#         count +=1
#
# print(count)



#===========================


# Напишем программу, определяющую,
# что натуральное число является простым:

# arr = [97,122,100,5,8,11,13,67,14,16,70,23]
#
# for i,el in enumerate(arr):
#
#     for j in range(2,el):
#        if el%j == 0:
#             break
#     else:
#         print(el) # 97 5 11 13 67 23

# ===========================

# Напишем программу, которая считывает 10 положительных чисел и
# находит среди них наибольшее число.

# import random
#
# # собрал массив рандомных значений
# arr = []
# for i in range(40):
#     el = random.randint(-50, 50)
#     arr.append(el)
# print(arr)
#
# # счетчик и массив-сборщик для 10-ти цифр больше 0
# count = 0
# arr10 = []
#
# for i,el in enumerate(arr):
#     if el >0 and count <10:
#         arr10.append(el)
#         count +=1
#
# print(arr10, count)
#
# # найти большее число
# bigEl = max(arr10)
# print(bigEl)


# ============================

1.

# КОЛЧИЧЕСТВО ЧИСЕЛ
# На вход программе подаются два целых числа a  и b  (a≤b).
# Напишите программу, которая подсчитывает количество чисел
# в диапазоне от aa до bb включительно, куб которых оканчивается на 4 или 9 .
#
# def calcCube(num):
#     a,b = num
#     count = 0
#
#     for i in range(a,b+1):
#         cube = i**3
#         if cube%10==4 or cube%10==9:
#
#             count +=1
#
#     print(count)
#
#
# num = [int(input()) for i in range(2) ]
# calcCube(num)
#
# # ============================
#
#  # №2. СУММА ЧИСЕЛ
# На вход программе подается натуральное число n, а затем n целых чисел,
# каждое на отдельной строке.
# Напишите программу, которая подсчитывает сумму введенных чисел.
#
#
#
#
# def calcSum(num):
#
#     summ = sum(num)
#     print(summ)
#
# rePlay = int(input())
# num = [int(input()) for i in range(rePlay) ]
#
# calcSum(num)
#
#
# # ============================
#
#  # №3.АСИМПТОТИЧЕСКОЕ ПРИБЛИЖЕНИЕ
# Асимптотическое приближение
# На вход программе подается натуральное число n .
# Напишите программу, которая вычисляет значение выражения
#
# import math
#
# n = int(input())
# summ = 0
#
# for i in range(1, n + 1):
#     summ = summ + (1 / i)
#
# logN = math.log(n)
#
# asimp = summ - logN
#
# print(asimp)
#
# # ============================
#
#
#  #4. СУММА ЧИСЕЛ - 2 (через массив)
#
# На вход программе подается натуральное число n.
# Напишите программу, которая подсчитывает сумму тех чисел
# от 1 до n (включительно) квадрат которых оканчивается на 2,5 или 8.
#
# n = int(input())
# summ = [ ]
#
# for i in range(1, n+1):
#
#     if((i**2)%10 == 2 or
#         (i**2)%10 == 5 or
#         (i**2)%10 == 8):
#
#         summ.append(i)
#
# print(sum(summ))


# ============================
# 5.
# Факториал
# На вход программе подается натуральное число n.
# Напишите программу, которая вычисляет n!
#
# n = int(input())
#
# fact = 1
#
# for i in range(2, n+1):
#
#    fact *=i
#
# print(fact)
#
# ============================
#
#
# # 6.  БЕЗ НУЛЕЙ
# Напишите программу, которая считывает 10 чисел и
# выводит произведение отличных от нуля чисел.
#
#
# def dontZero(num):
#    acc = 1
#    for i,el in enumerate(num):
#
#        if el !=0:
#            acc *= el
#    print(acc)
#
# num = [int(input()) for i in range(10)]
# dontZero(num)
#
#
#
# ============================
#
#
#
# # 7.  СУММА ДЕЛИТЕЛЕЙ
# На вход программе подается натуральное число n.
# Напишите программу, которая вычисляет сумму всех его делителей.
#
# n = int(input())
# arrDel = []
#
# for i in range(1, n+1):
#    if n%i == 0:
#        arrDel.append(i)
#
# summ = sum(arrDel)
# print(summ)



# ============================


# # 8. ЗНАКОЧЕРЕДУЮЩАЯ СУММА
# На вход программе подается натуральное число n .
# Напишите программу вычисления знакочередующей суммы
#
#
# n = int(input())
#
# arr = []
#
# # 1. собрал массив из значений от 1 до n
# for i in range(1, n+1):
#    if i%2==0:
#        i = -i

#    arr.append(i)
#
# summ = sum(arr)
#
# print(summ)


# ============================


# 9. НАИБОЛЬШИЕ ЧИСЛА

# На вход программе подается натуральное число n , а затем
# n  различных натуральных чисел, каждое на отдельной строке.
# Напишите программу, которая выводит наибольшее и второе наибольшее число последовательности.

# def maxNum(num):
#     print(num)
#
#     topNum = sorted(num)
#     print(topNum)
#
#     print(topNum[len(topNum)-1],topNum[len(topNum)-2],sep='\n' )
#
# n = int(input())
# num = [int(input()) for i in range(n )]
#
# maxNum(num)



# ============================

# №10
# Only even numbers
# Напишите программу, которая считывает последовательность из 10 целых чисел
# и определяет является ли каждое из них четным или нет.

# def everyEven(num):
#
#     for idx,el in enumerate(num):
#
#         if el%2 !=0:
#
#             print('NO')
#             break
#
#     else:
#         print('YES')
#
#
# num = [int(input()) for i in range(10)]
# everyEven(num)



# ============================
# FIBONACCHI / fibo / fibona

# № 11. Последовательность Фибоначчи
# (с моими модификациями для 1)

# fib1 = fib2 = 1
#
# n = int(input())
#
# if n !=1:
#     print(fib1, fib2, end=' ')
# elif n==1:
#     print(fib1)
#
# for i in range(2, n):
#     fib1, fib2 = fib2, fib1 + fib2
#     print(fib2, end=' ')





# =====================================
# ======  тема 7.4.:Цикл while =========
# =====================================

# №1
# s=input()
# while s!='КОНЕЦ':
#   print (s)
#   s=input()
#
# №2
# s=input()
# while s!='КОНЕЦ' and s!='конец':
#   print (s)
#   s=input()

# №3
# [*] Задача 3 по теме 7.4.: КОЛИЧЕСТВО ЧЛЕНОВ ======

# s = input()
# count = 0
# while s != 'стоп' and s != 'хватит' and s != 'достаточно':
#    # print(s)
#    count +=1
#
#    s=input()
# print(count)


# №4.
# [*] Задача 4 по теме 7.4.:   ======

# Идет последовательность цифр, делящихся на 7.
# Стоп - если попадается на входе число, не делящееся на 7
#
# вывод на экран цифр до момента стоп.


# seven = int(input())
#
# while seven%7 == 0:
#    print(seven)
#
#    seven = int(input())


# №5.
# [*] Задача 5 по теме 7.4.:  СУММА ЧИСЕЛ ======
# Идет последовательность цифр
# Стоп - если попадается на входе отрицательное число,
# и вывести сумму чисел до этого отриц. числа


# num = int(input())
# accSum = 0
#
# while num >=0:
#    accSum +=num
#    num=int(input())
#
# print(accSum)


# №6.
# [*] Задача 3 по теме 7.4.: КОЛИЧЕСТВО ЧЛЕНОВ ======

# s = int(input())
# count = 0
# while 0<s<=5:
#    if s==5:
#       count +=1
#
#    s=int(input())
# print(count)





# [*] Задача 7 по теме 7.4.: ВЕДЬМАКУ ЗАПЛАТИТЕ ЧЕКАННОЙ МОНЕТОЙ======

# ===== варинат № 1 (читерское решение)===============
# def smallCoin(many):
#    dic = \
#        {
#            '1': 1,
#            '4': 4,
#            '5': 1,
#            '9': 5,
#            '10': 1,
#            '25': 1,
#            '49': 7,
#            '100': 4,
#            '499': 25,
#            '2111': 86
#        }
#
#    for i in dic.keys():
#        if many == i:
#            print(dic[i])
#
# many =  input()
# smallCoin(many)




# перерешана задача 7 по теме 7.4.: ВЕДЬМАКУ ЗАПЛАТИТЕ ЧЕКАННОЙ МОНЕТОЙ
# ===== варинат № 2 (норм. решение)===============

# Stepik 7.4.
# Ведьмаку заплатите чеканной монетой (музыка/слова: )

# # ввод общей суммы
# many = int(input())

# # Массив из номинала монет (от большего к меньшему)
# nominal = [25, 10, 5, 1]

# # Счетчик (включается при использовании монеты )
# count = 0

# # Перебор номинала
# for i, el in enumerate(nominal):
#
#     # Если такая монета доступна (ДоТехПорПока: many // el >= 1)
#     while many // el >= 1:
#         # print(el) # вывод номинала каждой учтенной монеты
#
#         # считаю (+1) использование монеты,
#         count += 1
#
#         # умньшаю сумму на учтенную монету
#         many = many - el

# print(count)








 # =================================================

 # ===  тема 7.5. Цикл while: обработка цифр числа  ==

 # =================================================

# Напишем программу, которая определяет есть ли в числе цифра 7.
# работа у доски :-)

# num = int(input('Какое число (0...9) ищем: '))
# s = int(input('В каком числе ищем: '))
#
# flag = False
#
# while s !=0:
#     ost = s % 10
#
#     if ost == num:
#         flag = True
#     s = s//10
#
#
# if flag == True:
#     print(f'есть {num} в числе {s}')
# else:
#     print(f'нет искомой цифры {num} в числе {s}')



# =========== https://stepik.org/lesson/265122/step/4 =========

# задача № 1 темы 7.5.
# Вывод цифр в обратном порядке

# def printRevers(num):
#
#    while num != 0:
#        digit = num % 10
#        print(digit)
#        num = num//10
#
# num = int(input())
# printRevers(num)
#




# задача № 2 темы 7.5.
# ОБРАТНЫЙ ПОРЯДОК - 2

# Поменять порядок цифр на обратный

# def getRevers(num):
#
#    revNum = ''
#
#    while num !=0:
#       revNum += str(num%10)
#       num = num // 10
#
#    #запасное преобразование str --> int
#    revNum = int(revNum)
#
#    print(revNum )
#
# num = int(input())
# getRevers(num)
#



# задача №3 темы 7.5.
# МАКС И МИН

# num = int(input())
#
# maxEl = 0
# minEl = 9
#
# while num !=0:
#
#    el = num%10
#    if el >= maxEl:
#        maxEl = el
#    if el <= minEl:
#        minEl = el
#
#    num = num//10
#
# print(f'Максимальная цифра равна {maxEl}')
# print(f'Минимальная цифра равна {minEl}')
#
#


# задача №4 темы 7.5.
# ВСЁ ВМЕСТЕ

# Дано натуральное число. Напишите программу, которая вычисляет:
#
# сумму его цифр;
# количество цифр в нем;
# произведение его цифр;
# среднее арифметическое его цифр;
# его первую цифру;
# сумму его первой и последней цифры.
#
# arr = list(map(int,input()) )
# # print(arr, type(arr[0]))
#
# # 1. сумма его цифр:
# print(sum(arr))
#
# # 2. количество цифр:
# print(len(arr))
#
# # 3. произведение цифр числа:
# multi=1
# for i in arr:
#    multi *=i
# print(multi)
#
# # 4. среднее арифметическое:
# middle = sum(arr) / len(arr)
# print(middle)
#
# # 5. первая цифра числа:
# print(arr[0])
#
# # 6. сумму первой и последней цифры числа:
# print(arr[0] + arr[len(arr)-1])
#




# задача №5 темы 7.5.
# ВТОРАЯ ЦИФРА (сделать не за счет сахара, а через while)

# n = int(input())
#
# while n >= 10:
#
#    if n//10 <=10:
#        dgt = n%10
#        print(dgt)
#
#    n = n // 10
#
#

# [сайт --- ]  задача №6 темы 7.5.

# состоит ли число из одинаковых цифр
#
# def sameDigits(numArr):
#
#    # print(numArr)
#
#    for i, el in enumerate(numArr):
#
#        if el !=numArr[len(numArr)-1]:
#            print('NO')
#            break
#    else:
#        print('YES')
#
#
# numArr = list(map(int, input()) ) # преобразование на лету в массив
# sameDigits(numArr)



# [сайт --- ] задача №8 темы 7.5.

# Упорядоченные цифры
# Дано натуральное число.
# Напишите программу, которая определяет, является ли последовательность его цифр
# при просмотре справа налево упорядоченной по неубыванию.
#
# Пример:
# 5321 YES
# 7820 NO
# 9663 YES
# 12345 NO

# def maxToMin(arr):
#     print(arr)
#
#     for i in range(len(arr)-1):
#         # print( i, arr[i])
#
#         if arr[i]>=arr[i+1]:
#             continue
#         else:
#             print('NO')
#             break
#     else:
#         print('YES')
#
# arr = list(map(int,input()))
# maxToMin(arr)




# =================================================
# === Тема 7.6. break, continue и else =============
# =================================================

# Задачи в классе:

# for i in range(10):
#     print(i, end='*')
#     if i > 6:
#         break




# i = 100
# while i > 0:
#     if i == 40:
#         break
#     print(i, end='*')
#     i -= 20



# n = 10
# while n > 0:
#     n -= 1
#     if n == 2:
#         continue
#     print(n, end='*')


# result = 0
# for i in range(10):
#     if i % 2 == 0:
#         continue
#     result += i
# print(result)


# mult = 1
# for i in range(1, 11):
#    if i % 2 == 0:
#       continue
#    if i % 9 == 0:
#       break
#    mult *= i
# print(mult)



# ====== самостоятельные задачи 1 и 2 =========


# ======== Наименьший делитель ================

# На вход программе подается число n > 1 .
# Напишите программу, которая выводит его наименьший отличный от 1  делитель.


# n=int(input())
# for i in range (2, n+1):
#   if n%i==0:
#     print (i)
#     break


# ======== Следуй правилам ===================

# На вход программе подается натуральное число n .
# Напишите программу, которая выводит числа от 1  до n включительно за исключением:
#
# чисел от 55 до 99 включительно;
# чисел от 1717 до 3737 включительно;
# чисел от 7878 до 8787 включительно.

# put your python code here
# n = int(input())
# for i in range(1, n+1):
#   if 5<=i<=9 or 17<=i<=37 or 78<=i<=87:
#     continue
#   print(i)

# #  вариант решения:
# print(*(i for i in range(1, int(input()) + 1) if i not in [*range(5, 10), *range(17, 38), *range(78, 88)]), sep='\n')


# Определеить за миинмальное время: является ли 1934234249 ПРОСТЫМ числом
# (Прим.: верхняя граница поиска num ** 0.5)

# num = int(input())
#
# flag = True
#
# for i in range(2, int(num ** 0.5) + 1):
#
#     if num % i == 0:
#         flag = False
#
# if num > 1 and flag == True:
#     print('Число простое')
# else:
#     print('Число составное')


# Таблица пояснения:
#
# число  корень	"ДЕЛИТЕЛЬ      Прим.:
#                  ТОЛЬКО"
#
# 5	   2,24	      5	 !        "Больше значения корня"
# 6	   2,45
# 7	   2,65	      7	 !         "Больше значения корня"
# 8	   2,83
# 9	   3
# 10	   3,16
# 11	   3,32	      11	!      "Больше значения корня"
# 12	   3,46
# 13	   3,61	      13	!       "Больше значения корня"
# 14	   3,74
# 15	   3,87
# 16	   4
# 17	   4,12	      17	!        "Больше значения корня"





# =================================================
# === Тема 7.7 Поиск ошибок и ревью кода ============
# =================================================


# https://stepik.org/lesson/311433/step/4


# Задача 1
#
# Ревью кода-1
# На обработку поступает последовательность из 10 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
#  Нужно написать программу, которая выводит на экран количество неотрицательных чисел последовательности
# и их произведение.
#
# Если неотрицательных чисел нет, требуется вывести на экран «NO».

# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно 4 ).

# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
#
# Примечание 1. Число xx не превышает по абсолютной величине 10^6
#  , если -10^6  <= x <= 10^6 .
#
# Примечание 2. При необходимости вы можете добавить необходимые строки кода.

# исходные данные

                # count = 0
                # p = 0
                # for i in range(1, 10):
                #     x = int(input())
                #     if x > 0:
                #         p = p * x
                #         count = count + 1
                # if count > 0:
                #     print(x)
                #     print(p)
                # else:
                #     print('NO')


# мое решение задачи № 1(степик не принял из-за x > 0, остальные 3 ошибки - нашел).
# count = 0
# p = 1
# for i in range(1, 11):
#     x = int(input())
#
#     if x < 0:
#         continue
#
#     elif x > 0:
#         p = p * x
#         count += 1
#
#
# if count > 0:
#     print(count)
#     print(p)
# else:
#     print('NO')

# 2-е решение задачи № 1( всего-то надо еще доделать x >= 0).
# count = 0
# p = 1
# for i in range(1, 11):
#     x = int(input())
#     if x >= 0:
#         p = p * x
#         count = count + 1
# if count > 0:
#     print(count)
#     print(p)
# else:
#     print('NO')



# Задача № 2 .

# Ревью кода-2
# На обработку поступает последовательность из 10 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
# Нужно написать программу, которая выводит на экран сумму всех отрицательных чисел последовательности и
# максимальное отрицательное число в последовательности.
# Если отрицательных чисел нет, требуется вывести на экран «NO».
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно 5 ).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
#
# Примечание 1. Число xx не превышает по абсолютной величине 10^6 , если -10^6  ≤x ≤10^6
#
# Примечание 2. При необходимости вы можете добавить необходимые строки кода.


# исходный код для ревью:

# mx = 0
# s = 0
# for i in range(11):
#     x = int(input())
#     if x < 0:
#         s = x
#     if x > mx:
#         mx = x
# print(s)
# print(mx)


# почти мое решение задачи № 1 версия 2

# mx = 0
# s = 0
# for i in range(10):
#     x = int(input())
#     if x < 0:
#         s += x
#         if mx == 0 or x > mx:
#             mx = x
# if s == 0:
#     print('NO')
# else:
#     print(s)
#     print(mx)


# Задача № 3  .

# Ревью кода № 3
#
# На обработку поступает последовательность из 7 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
# Нужно написать программу, которая подсчитывает и выводит сумму всех чётных чисел последовательности
# или 0 , если чётных чисел в последовательности нет.
#
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно  4).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
#
#
# Исодный код:
#
# s = 1
# for i in range(1, 7):
#     n = input()
#     if i % 2 == 0:
#         s = s + n
# print(s)


# мое решение задачи № 3 (14/01/23)

# s = 0
# for i in range(7):
#     n = int(input())
#     if n % 2 == 0:
#         s = s + n
#
# if s ==0:
#     print(0)
# else:
#     print(s)



# Задача № 4  .   Ревью кода-4

# На обработку поступает натуральное число (от 1 ......).
# Нужно написать программу, которая выводит на экран максимальную цифру числа, кратную 3 .
# Если в числе нет цифр, кратных 3 , требуется на экран вывести «NO».
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно 5 ).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
#
# Примечание 1.   Число 0 делится на любое натуральное число.

# Исходный код:

# n = int(input())
# max_digit = n % 10
# while n > 0:
#     digit = n % 10
#     if digit % 3 == 0:
#         if digit < max_digit:
#             digit = max_digit
#     n = n % 10
# if max_digit == 0:
#     print('NO')
# else:
#     print(max_digit)
#

# n = int(input())
#
# max_digit = -1              #  == -1 (стартовый максимум)
#
# while n > 0:
#     digit = n % 10              # 121 % 10 == 1
#
#     if digit % 3 == 0:          # 1 % 3 !==0
#         if digit > max_digit:
#             max_digit = digit
#
#     n = n // 10                 # 121 // 10 == 12
#
# if max_digit == -1:
#     print('NO')
# else:
#     print(max_digit)

# Задача № 5 .   Ревью кода-5


# На обработку поступает натуральное число.
# Нужно написать программу, которая выводит на экран его первую (старшую) цифру.
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно 2 ).
# Известно, что каждая ошибка затрагивает только одну строку и
# может быть исправлена без изменения других строк.

# Исходник:
#
# n = int(input())
# while n > 0:
#     n %= 10
# print(n)


# n = int(input())
# # a = 0
# # while n >0:
# #
# #     a = n % 10
# #
# #     n = n // 10
# #
# # print(a)


# Задача № 6.   Ревью кода-6

# написать программу, которая выводит на экран произведение цифр введенного числа

            # Исходник:
            #
            # n = input()
            # product = n % 10
            # while n >= 10:
            #     digit = n % 10
            #     product = product * digit
            #     n //= 10
            # print(product)

# n = list(map(int, input()))
#
# acc = 1
#
# for i in n:
#     acc = acc * i
# print(acc)




# =====================================
# === 7.8 Вложенные циклы. Часть 1 ======
# =====================================


# Дано натуральное число  (n≤ 9).
# Напишите программу, которая печатает таблицу размером  n×3 состоящую из данного числа
# (числа отделены одним пробелом).

# num = int(input())
#
# for i in range(num):
#
#     for j in range(1):
#         print( f'{num } '*3 )
#


                 # не по заданию. ТАБЛИЦА УМНОЖЕНИЯ
                # for i in range(1,10):
                #
                #     for j in range(1,10):
                #         print(f'{i*j }',end='|')
                #     print('\n')


# ===============  ЗАДАЧА 2. (7.8 Вложенные циклы. Часть 1)

# Таблица-2
# Дано натуральное число (n≤ 9).
# Напишите программу, которая печатает таблицу размером  5n×5,
# где в i -ой строке указано число i  (числа отделены одним пробелом).
#
# Формат выходных данных
# Программа должна вывести таблицу размером n×5 в соответствии с условием.
# Примечание. В конце строки может быть пробел


# num = int(input() )
#
# for i in range(num):
#
#     for j in range(5):
#         print(i+1, end=" ")
#     print()

# Вариант решения
# n = int(input())
# [print(i, i, i, i, i) for i in range(1, n + 1)]



# ============   ЗАДАЧА 4. (7.8 Вложенные циклы. Часть 1)


# Звездный треугольник
# Дано нечетное натуральное число n .
#  Напишите программу, которая печатает равнобедренный звездный треугольник с основанием,
#  равным n = 7  в соответствии с примером:

# *
# **
# ***
# ****
# ***
# **
# *


# Примечание. Используйте вложенный цикл for



# # ввод ОСНОВАНИЯ треугольника (кол-во строк вывода)
# num = int(input())
#
# # цикл: построчный вывод (num циклов)
# for i in range(num):
#
#         # num/2 - показать границу, после которой надо уменьшать кол-во *
#         if i<= num / 2:
#             print('*' * i)
#
#         # если граница num/2 превышена, то:
#         else:
#             # использую цикл ( ...range(i) ),где за счет увеличения j уменьшаю i
#             for j in range(i):
#                 print('*' * int(i-j))
#
#             # остановка "мусорных" повторов работы цикла  for j...
#             break
#
# # вариант решения:
# n = int(input())
# for i in range(1, n + 1):
#     print('*' * min(i, n - i + 1))
#
#
# *
# **
# ***
# ****
# *****
# ****
# ***
# **
# *





 # ===========
 # просто ОБРАЗЕЦ ЁЛОЧКИ на х6

 # num = int(input())
 #
 # for i in range(num+1):
 #     print('*'*i)

 # *
 # **
 # ***
 # ****
 # *****
 # ******

 # ===========






 #  ============   ЗАДАЧА 5. (7.8 Вложенные циклы. Часть 1)

# Численный треугольник 1
# Дано натуральное число n .
#  Напишите программу, которая печатает численный треугольник в соответствии с примером:
# 1
# 22
# 333
# 4444
# 55555
# ...

# num = int(input())
#
# for i in range(num):
#     print('')
#     for j in range(i+1):
#         print(i+1, end="")

# # на выходе:
# 1
# 22
# 333
# 4444
# 55555



        # # Не решение - просто пример:
        # num = int(input())
        #
        # for i in range(0, num+1):
        #     print('')
        #     for j in range(i+1):
        #         print(j+1, end="")

        # На выходе:
        # 1
        # 12
        # 123
        # 1234
        # 12345



# Задача № 6 (7.8 Вложенные циклы. Часть 1)

# 12 месяцев
# Решите уравнение в натуральных числах  28n + 30k + 31m = 365.
#
# Примечание. Используйте вложенный цикл for.
#  В первую очередь запишите решение с наименьшим значением n .


# nEl = 365 // 28 # = 13
# kEl = 365 // 30 # = 12
# mEl = 365 // 31 # = 11

# for n in range(1, 13):
#     for k in range(1, 12):
#         for m in range(1, 11):
#             if 28*n + 30*k + 31 * m == 365:
#                 print(f'n = {n}, k = {k}, m = {m}')

# Задача № 7 (7.8 Вложенные циклы. Часть 1)

# Старинная задача
# Имеется 100  рублей.
#  Сколько быков, коров и телят можно купить на все эти деньги, если:
#  плата за быка – 10  рублей,
#  за корову – 5  рублей,
#  за теленка – 0.5 рубля и
#  надо купить 100 голов скота?

# for b in range(1, 10):
#     for k in range(1, 20):
#         for t in range(1, 200):
#             if 10*b + 5*k + 0.5*t == 100:
#                 # print(f'бык = {b}, корова = {k}, телёнок = {t}')
#                 if b+k+t==100:
#                     print(f'бык = {b}, корова = {k}, телёнок = {t}')

# Задача 8.
# Гипотеза Эйлера о сумме степеней
# В 1769 году Леонард Эйлер сформулировал обобщенную версию Великой теоремы Ферма, предполагая,
#  что по крайней мере nn энных степеней необходимо для получения суммы,
#  которая сама является энной степенью для n > 2n>2.
#
#  Напишите программу для опровержения гипотезы Эйлера (продержавшейся до 1967 года),
#  и найдите четыре положительных целых числа, сумма 5-х степеней которых равна 5-й степени
#  другого положительного целого числа.
#
# Таким образом, найдите пять натуральных чисел a,b,c,d,e удовлетворяющих условию:
# a^5+b^5+c^5+d^5=e^5.
#
# В ответе укажите сумму a+b+c+d+ea+b+c+d+e.
#
# Примечание 1. Используйте вложенный цикл for.
#
# Примечание 2. Считайте, что числа a, b, c, d, e  не превосходят 150 .
#
# Примечание 3. Программа может работать дольше чем обычно.
#  В зависимости от способа решения задачи на выполнение программы может уходить до нескольких минут.
#  Попробуйте сократить количество вложенных циклов.


# for a in ran tepik.org/lesson/298795/step/13?discussion=4949168&thread=solutions&unit=280622
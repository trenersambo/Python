 # https://pythontutor.com/render.html#mode=display
 # визуалзатор

# def addArr(a ):
#
#     arr = []
#     for i in list(a):
#         arr.append( int(i) )
#     return arr
#
#
#
#
#
# def calc(caclEl):
#
#     a,b,c = caclEl
#     # print(a,b,c,type(a) )
#
#
#     print(f'{a}{b}{c}\n'
#           f'{a}{c}{b}\n'
#           f'{b}{a}{c}\n'
#           f'{b}{c}{a}\n'
#           f'{c}{a}{b}\n'
#           f'{c}{b}{a}')
#
#
# a = input()
# caclEl = addArr(a)
#
# calc(caclEl)


# ===================

# put your python code here
# def calc(num):
#
#    arrEl = list(num)
#
#    a,b,c,d = arrEl
#
#    print(f'Цифра в позиции тысяч равна {a}\n'
#          f'Цифра в позиции сотен равна {b}\n'
#          f'Цифра в позиции десятков равна {c}\n'
#          f'Цифра в позиции единиц равна {d}')
#
# num = input()
# calc(num)

# ТЫСЯЧИ СОТНИ ДЕСЯТКИ ЕДИНИЦЫ
# num//1000   # thousands
# num//100%10 # hundreds
# num%100//10 # dozens
# num%10      # units

# ===================

# print('*****************')
# print('*               *')
# print('*               *')
# print('*****************')

# ===================
# import math
# def calc(a,b):
#
#     print(f'Квадрат суммы {a} и {b} равен {int(math.pow((a+b), 2))}')
#     print(f'Сумма квадратов {a} и {b} равна {a**2 + b**2}')
#
# a = int(input())
# b = int(input())
#
# calc(a,b)


# ===================

# def calc(a,b,c,d):
#
#     arr = [a,b,c,d]
#     a, b, c, d = arr
#
#     summ = a**b + c**d
#     print(summ)
#
# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
#
# calc(a,b,c,d)



# ===================

# a = input()
#
# n   = [a for i in range(1,4,3)]
# n1 = int(n[0])
# # print(n1)
#
# nn  = [a for i in range(1,4,2)]
# nn1 = int(nn[0]+nn[1])
# # print(nn1)
#
#
# nnn = [a for i in range(1,4,1)]
# nnn1 = int(nnn[0]+nnn[1]+nnn[2])
# # print(nnn1)
# #
# # print(n, nn, nnn)
#
# print(n1+nn1+nnn1)



# =================== экзамен закончился

# i = int(input('Введи число: '))

# if i / 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

# if i // 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

#3 - ok
# if i % 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

# if i // 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

#5 - ok (перестановка сбила с толку :-) )
# if i % 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')

# if i // 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')

# def compare(pswd1, pswd2):
#     if pswd1 == pswd2:
#         print('Пароль принят')
#     else:
#         print('Пароль не принят')
#
# pswd1 = input()
# pswd2 = input()
#
# compare(pswd1, pswd2)

# i = int(input())
# if i % 2 != 0:
#      print('нечётное')
# else:
#      print('чётное')
#
# print(('Четное','Нечетное')[ int(input()) % 2 ])

# ТЫСЯЧИ СОТНИ ДЕСЯТКИ ЕДИНИЦЫ
# num//1000   # thousands
# num//100%10 # hundreds
# num%100//10 # dozens
# num%10      # units

# def compare(num):
#     arr = list(num)
#     a,b,c,d = arr
#
#     if int(a) + int(d) == int(b) - int(c):
#         print('ДА')
#     else:
#         print('НЕТ')
#
# num = input()
# compare(num)

#print(('Доступ разрешен','Доступ запрещен')[ int(input()) < 18 ])

# Арифметическая прогрессия  - это числовая последовательность  , в которой каждое число, начиная со второго,
# получается из предыдущего добавлением к нему постоянного числа (так называемого шага).
# Соответственно третье число арифметической прогрессии будет равно - разности второго и первого числа
# прибавленного к второму числу:
#
# допустим, есть последовательность  трех чисел:  a b c
#
#  a - первое число,
# b - второе число,
# c - третье число,
# ( b - a) - шаг , чтобы понять является ли данная последовательность  арифметической прогрессией,
# должно выполнятся условие: \
#
#     ( b - a) + b = c
#  или: b-a = c-b



# def calc(a,b,c):
#
#     arr = [a,b,c]
#     a, b, c = arr
#
#     if b-a == c-b:
#         print('YES')
#     else:
#         print('NO')
#
# a = int(input())
# b = int(input())
# c = int(input())
#
#
# calc(a,b,c)

# =====================

# 4.1.3.  Напишите программу, которая определяет наименьшее из двух чисел.
#
# Решение 1
#
# def minEl(a,b):
#
#     arr = [a,b]
#     minEl = min(arr)
#     print(minEl)
#
# a = int(input())
# b = int(input())
#
# minEl(a,b)
#
#
# Решение 2
#
# n = [int(input()) for _ in range(2)]
# print(min(n))
#
# Решение 3
# print(min(int(input()), int(input())))

# =====================

# 4.1. Напишите программу, которая определяет наименьшее из четырёх чисел.

# def minEl(a,b,c,d):
#
#     arr = [a,b,c,d]
#     min_elm = arr[0]
#
#     for i in arr:
#         if i <= min_elm:
#             min_elm = i
#
#     print(min_elm)
#
# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
#
# minEl(a,b,c,d)

# Решение 2
# sp = []
# for i in range(4):
#     a = int(input())
#     sp.append(a)
# print(min(sp))



# print(min(int(input()), int(input()), int(input()), int(input())))

# =====================

# Задача stepik № 4.1.4
#
# Напишите программу, которая по введённому возрасту пользователя сообщает,
# к какой возрастной группе он относится:
#
# до 13 включительно – детство;
# от 14 до 24 – молодость;
# от 25 до 59 – зрелость;
# от 60 – старость.

# def age(num):
#
#     if num >= 60:
#         print('старость')
#     if (25 <= num <= 59):
#         print('зрелость')
#     if (14 <= num <= 24):
#         print('молодость')
#     if (0 <= num <= 13):
#             print('детство')
#
# num = int(input())
# age(num)


# Решение 2
# n = int(input())
# print("старость" if n>59 else "зрелость" if n>24 else "молодость" if n>13 else "детство")

# Решение 3

# a = int(input())
# print(['детство', 'молодость', 'зрелость', 'старость'][sorted([13, 24, 60, a]).index(a)])


# 4.1...
# Напишите программу, которая считывает три числа
# и подсчитывает сумму только положительных чисел.

# def addCalc(a,b,c):
#
#     arr = [a,b,c]
#
#     acc_sum = []
#
#     for i in arr:
#         if i<0:
#             i=0
#         acc_sum.append(i)
#
#     summ = sum(acc_sum)
#     print(summ)
#
#
#
# a = int(input())
# b = int(input())
# c = int(input())
#
# addCalc(a,b,c)


# ===========================

# 4.2 Логические операции

# 2 == 2 or 4 > 2     True    (True or True)
# 6 <= 6 and 2 > 3    False   (True and False)
# 1 != 4 and 6 != 3   True    (True and True)
# 2 >= -1 or 2 <= 4   True    (True or True)
# not (2 > 2)         True    not (False)
# not (6 <= 10)       False   not (True)


# Что будет выведено на экран в результате выполнения следующей программы?

# num1 = 34
# num2 = 81
# if num1 // 9 == 0 or num2 % 9 == 0:
#     print('число', num1, 'выиграло')
# else:
#     print('число', num2, 'выиграло')


#Задача 4.2.1

# Напишите программу, которая принимает целое число xx и
# определяет, принадлежит ли данное число указанному промежутку (-1, 17).

# мой вариант 1:

# dot = int(input())
#
# if -1 < dot < 17:
#     print('Принадлежит')
# else:
#     print('Не принадлежит')

# мой вариант 2 COUNT:

# def compare(dot):
#     gapArr = list(range(-0,17))
#
#     if gapArr.count(dot):
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)

#
# мой вариант 3 ANY

# def compare(dot):
#     gapArr = list(range(0,17))
#
#     # если есть такой el который == введенному значению dot
#     res = any( el==dot for el in gapArr)
#
#     print('Принадлежит' if res==True else 'Не принадлежит')
#
# dot = int(input())
# compare(dot)

# ******

# вариант 2
# print(('Не п', 'П')[-1 < int(input()) < 17] + 'ринадлежит')
#
# вариант 3
# print('Принадлежит' if -1 < int(input()) < 17 else 'Не принадлежит')

# вариант 4
# print('Принадлежит' if int(input()) in range(0, 17) else 'Не принадлежит')

# ******


# Задача № 2 из 4.2.
#
# Напишите программу, которая принимает целое число xx и определяет,
# принадлежит ли данное число указанным промежуткам (-∞, -3) (7, +∞).


# мой вариант 1

# def compare(dot):
#
#     if -3 < dot <7 :
#         print('Не принадлежит')
#     else:
#         print('Принадлежит')
#
# dot = int(input())
# compare(dot)


# мой вариант 2

# def compare(dot):
#
#     arr = list(range(-2, 7))
#
#     res = any(el == dot for el in arr)
#
#     if res == False :
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)


# чужой вариант1 в 1 строку
# print('Принадлежит' if not -3 < int(input()) < 7 else 'Не принадлежит')

# чужой вариант2 в 1 строку
# print(("П", "Не п")[(-3 < int(input()) < 7)] + "ринадлежит")

# ========================

# Задача № 3 из 4.2.

# Напишите программу, которая принимает целое число x и
# определяет, принадлежит ли данное число указанным промежуткам:
#
# (-30,-2) и (7, 25)

# def compare(dot):
#
#     arr1 = list(range(-29, -1))
#     arr2 = list(range(8, 26))
#
#
#     res1 = any(el == dot for el in arr1)
#     res2 = any(el == dot for el in arr2)
#
#     if res1 == True or res2 == True:
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)

# ========================

# Задача № 4 из 4.2.
# def compare(num):
#     arrLen = len( list( str(num) ) ) #кол-во цифр в числе
#
#     if arrLen < 4 or arrLen >4:  # (с отрицательным -123 не сработает )
#         print('NO')
#         exit()
#     if num%7 ==0 or num%17 == 0:
#         print('YES')
#     else:
#         print('NO')
#
# num = int(input())
# compare(num)

# n = int(input())
# a = n // 1000
# if ((n>0) and (a != 0)) and ((n % 7 == 0) or (n % 17 == 0)):
#     print ('YES')
# else:
#     print ('NO')


# ========================

# Задача № 4 из 4.2.

# Напишите программу, которая принимает три положительных числа
# и определяет, существует ли невырожденный треугольник с такими сторонами
#
#  То есть, должны выполняться строгие неравенства
#
# a+b>c
# a+c>b
# b+c>a


# def addCalc(a,b,c):
#
#     if a+b > c:
#         if a+c > b:
#             if b+c >a:
#                 print('YES')
#             else:
#                 print('NO')
#     else:
#         print('NO')
#
#
#
# a = int(input())
# b = int(input())
# c = int(input())
#
# addCalc(a,b,c)


# ========================


# Задача № 5 из 4.2.

# Високосный год
# Напишите программу, которая определяет, является ли год с данным номером високосным.
# Если год является високосным, то выведите «YES», иначе выведите «NO».
#
# Год является високосным, если
# его номер кратен 4, но не кратен 100, или если он кратен 400.

# def leap(y):
#
#     if (y%4 == 0 and y%100 !=0) or y%400 == 0:
#         print('YES')
#     else:
#         print('NO')
#
# y = int(input())
# leap(y)


# ========================


# Задача № 6 из 4.2.

# Ход ладьи
# Даны две различные клетки шахматной доски.
# Напишите программу, которая определяет, может ли ладья попасть с первой клетки на
# вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и
# номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом ладьи можно попасть во вторую,
# или «NO» в противном случае.

# def chess(a,b,c,d):
#     if a==c or b==d:
#         print('YES')
#     else:
#         print('NO')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# chess(a,b,c,d)


# вариант решения № 2

# def chess(a,b,c,d):
#     if a-c==0 or b-d==0:
#         print('YES')
#     else:
#         print('NO')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# chess(a,b,c,d)


# ========================


# Задача № 7 из 4.2.

# Ход короля
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли король попасть с первой клетки
# на вторую одним ходом.
#
# Программа получает на вход четыре числа от 1 до 8 каждое,
# задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом короля можно попасть во вторую,
# или «NO» в противном случае.


# def chess(a,b,c,d):
#     if abs(a-c) > 1 or abs(b-d) > 1:
#         print('NO')
#     else:
#         print('YES')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# # здесь могла бы быть валидация на превышение 8
#
# chess(a,b,c,d)



# ========================


# Задача № 1 из 4.3.
#
# def compare(zoom, flash):
#     if zoom > flash:
#         print('NO')
#     elif zoom < flash:
#         print('YES')
#     else:
#         print("Don't know")
#
#
# zoom = int(input())
# flash = int(input())
#
# compare(zoom, flash)


# ========================


# Задача № 2 из 4.3.
# Напишите программу, которая принимает три положительных числа
# и определяет вид треугольника, длины сторон которого равны введенным числам.

# def tringle(a,b,c):
#     if a==b==c:
#         print('Равносторонний')
#         exit()
#     elif a !=b and b !=c and a != c:
#         print('Разносторонний')
#         exit()
#     else:
#         print('Равнобедренный')
#
# a=int(input())
# b=int(input())
# c=int(input())

# tringle(a,b,c)


# ========================

# Задача № 3 из 4.3.
# Даны три различных целых числа. Напишите программу, которая находит среднее по величине число.
# Средним называется число, которое будет вторым, если три числа отсортировать в порядке возрастания.

# def middle(*nums):   # args = (1, 2, 3)
#
#     arr = list(nums) # создать массив сразу из неск.аргум-в
#
#     arr.sort()       #  сортировка по возрастанию
#
#     print(arr[1])    #  среднее из трех
#
#
#
# a=int(input())
# b=int(input())
# c=int(input())
#
# middle(a,b,c)


# ========================

# Задача № 4 из 4.3.
# Дан порядковый номер месяца  (1,2,…, 12).
# Напишите программу, которая выводит на экран количество дней в этом месяце.
# Принять, что год является невисокосным.

# mon = int(input())
# # без ВАЛИДАЦИИ на ввод 1...12
# dic = \
#     {
#         1: 31,  2: 28, 3: 31,  4: 30,  5: 31, 6: 30,
#         7: 31,  8: 31,  9: 30,  10: 31, 11: 30, 12: 31
#     }
#
# for i in dic:
#     #print(i, dic[i]) # ключ / значение
#     if mon == i:
#         print(dic[i])


# ========================

# # Задача № 5 из 4.3.
# Известен вес боксера-любителя (целое число).
# Известно, что вес таков, что боксер может быть отнесён к одной из трех весовых категорий:
#
# Легкий вес – до 60 кг;
# Первый полусредний вес – до 64 кг;
# Полусредний вес – до 69 кг.
#
# Напишите программу, определяющую, в какой категории будет выступать данный боксер.

# def boxMan(weight):
#     if weight <60:
#         print('Легкий вес')
#     elif 60<=weight<64:
#         print('Первый полусредний вес')
#     else:
#         print('Полусредний вес')
#
#
# weight = int(input())
# boxMan(weight)

#samboРулит




# ========================

#  Задача № 6 из 4.3.

# КАЛЬКУЛЯТОР на словаре

# def calc(a,b,oprt):
#
#     if b == 0 and oprt == '/':
#         print('На ноль делить нельзя!')
#         exit()
#
#     elif oprt !='+' and oprt !='-' and oprt !='*' and oprt !='/':
#         print('Неверная операция')
#
#     # Словарь для операций (надо отработать этот знание)
#     cd = \
#         {
#             '+': a + b,
#             '-': a - b,
#             '*': a * b,
#             "/": a / b,
#         }
#
#     # Перебор на совпадение oprt с ключем из Словаря
#     for i in cd:
#
#         if oprt == i:
#             print(cd.get(i))
#
#
# a = int(input())
# b = int(input())
# oprt = input()
#
# calc(a,b,oprt)



# ====== вариант для Stepik (в лоб) ======

# def calc(a,b,oprt):
#
#     if b == 0 and oprt == '/':
#         print('На ноль делить нельзя!')
#         exit()
#
#     elif oprt !='+' and oprt !='-' and oprt !='*' and oprt !='/':
#         print('Неверная операция')
#
#     if oprt == '+':
#         print(a + b)
#     if oprt == '-':
#         print(a - b)
#     if oprt == '*':
#         print(a * b)
#     if oprt == '/':
#         print(a / b)
#
#
# a = int(input())
# b = int(input())
# oprt = input()
#
# calc(a,b,oprt)



# ========================

#  Задача № 7 из 4.3. (схитрил: два аргумента и Один словарь)

# def calcColor(a,b):
#
#     dic = \
#         {
#             'красный синий': 'фиолетовый',
#             'красный желтый': 'оранжевый',
#             'красный красный': 'красный ',
#             'синий красный': 'фиолетовый',
#             'синий желтый': 'зеленый',
#             'синий синий': 'синий',
#             'желтый красный': 'оранжевый',
#             'желтый синий': 'зеленый',
#             'желтый желтый': 'желтый',
#         }
#
#     #Перебор на совпадение 2-х цветов с ключем из Словаря
#
#     for i in dic:
#         #print(i)
#         ab = a+' '+b # схитрил для использования 2х аргументов
#         #print(ab)
#
#         if ab == i:
#             print( dic.get(i) )
#             exit()
#     else:
#         print('ошибка цвета') # такое возможно тольк в Python
#
# a = input()
# b = input()
#
# calcColor(a,b)


# ========================

#  Задача № 8 из 4.3. (поиск значения в Списке Списков)

# Цвета колеса рулетки
# На колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета карманов:
#
# карман 0 зеленый;
# для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный;
# для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный.
# Напишите программу, которая считывает номер кармана и показывает, является ли этот карман зеленым, красным или черным. Программа должна вывести сообщение об ошибке, если пользователь вводит число, которое лежит вне диапазона от 0 до 36.

# def color(num, arr):
#
#     for idx, podArr in enumerate(arr):
#         if str(num) in podArr:
#             print(idx, podArr) # Индекс ПодМассива / ПодМассив
#             if idx == 0:
#                 print('зеленый')
#             if idx == 1:
#                 print('красный')
#             if idx == 2:
#                 print('черный')
#             break
#     else:
#         print('ошибка ввода')
#
# num = input()
#
# # массив должен быть строго из string-значений
# arr = \
#     [
#         '0',
#         ['1','3','5','7','9','12','14','16',
#          '18','19','21','23','25','27','30','32','34','36'],
#         ['2','4','6','8','10','11','13','15',
#          '17','20','22','24','26','28','29','31','33','35']
#     ]
# # вызов функции
# color(num, arr)


# ========================

#  Задача № 9 из 4.3. (поиск значения в Списке Списков)

# Пересечение отрезков
# На числовой прямой даны два отрезка: [a_1;  b_1] и [a_2; b_2 ].
# Напишите программу, которая находит их пересечение.
#
# Пересечением двух отрезков может быть:
#
# отрезок;
# точка;
# пустое множество.

# def cross(a1, b1, a2, b2):
#
#     if a1<b1<a2<b2:
#         print('пустое множество')
#     if a1 < a2 < b1 < b2:
#         print(f'{a2} {b1}')
#     if a1 < b1 == a2 < b2:
#         print(f'{b1}')
#     if a1 < a2 < b1 == b2:
#         print(f'{a2} {b2}')
#     if a1 < a2 < b2 < b1:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b1 == b2:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b2 < b1:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b1 < b2:
#         print(f'{a2} {b1}')
#
#     if a2 < b2 < a1 < b1:
#         print('пустое множество')
#     if a2 < a1 < b2 < b1:
#         print(f'{a1} {b2}')
#     if a2 < b2 == a1 < b1:
#         print(f'{a1}')
#     if a2 < a1 < b1 == b2:
#         print(f'{a1} {b1}')
#     if a2 < a1 < b1 < b2:
#         print(f'{a1} {b1}')
#
#
# a1 = int(input())
# b1 = int(input())
# a2 = int(input())
# b2 = int(input())
#
# cross(a1, b1, a2, b2)

# ============ Контрольная работа (экзамен) ==========
# 5.  Итоговая работа на условный оператор

# Начало столетия
# Напишите программу, которая определяет, оканчивается ли год с данным номером на два нуля.
# Если год оканчивается, то выведите «YES», иначе выведите «NO».


# e = int(input())
#
# # arr = list(eahr)
# # print(arr)
#
# if e%1000 == 0 or e%100==0:
#     print('YES')
# else:
#     print('NO')


#===============

# Шахматная доска
# Заданы две клетки шахматной доски.
# Напишите программу, которая определяет имеют ли указанные клетки один цвет или нет.
# Если они покрашены в один цвет, то выведите слово «YES», а если в разные цвета — то «NO».
# help: https://madazimov.github.io//mathematics/shahmatnie-zadachki-shahmatnaya-doska.html

# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if (x1 + y1 + x2 + y2) % 2 == 0:
#     print('YES')
# else:
#     print('NO')
#


#===============

# age = int(input()) # 10...15
# sex = input() # f or m
#
#
# if 10 <= age <= 15:
#     if sex == 'f':
#         print('YES')
#     else:
#         print('NO')
#         exit()
# else:
#     print('NO')

#===============
#
# Римские цифры
# Напишите программу, которая считывает целое число и
# выводит соответствующую ему римскую цифру.
# Если число находится вне диапазона 1-10,
# то программа должна вывести текст «ошибка».


# num = int(input() ) # 1 ... 10
# arr = ['0', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X']
#
# for idx,el in enumerate(arr):
#     # print(idx, el ) # --> 0 0, 1 I , 2 II, ... 10 X
#     if num == idx:
#         print(el)
#         break
# else:
#     print('ошибка')
#
#


# ========== вариант решения через словарь ==========
# num = int(input())
#
# if 1 <= num <= 10:
#     RomanNumerals = {1:"I", 2:"II", 3:"III", 4:"IV", 5:"V",
#      6:"VI", 7:"VII", 8:"VIII", 9:"IX", 10:"X"}
#     print(RomanNumerals[num])
# else:
#     print("ошибка")

#===============

# YES or NO вот в чем вопрос
# Напишите программу, которая принимает на вход число
# и в зависимости от условий выводит текст «YES», либо «NO».
#
# Условия:
#
# если число нечётное, то вывести «YES»;
# если число чётное в диапазоне от 2 до 5 (включительно), то вывести «NO»;
# если число чётное в диапазоне от 6 до 20 (включительно), то вывести «YES»;
# если число чётное и больше 20, то вывести «NO».


# num = int(input())
#
# if num%2 !=0:
#     print('YES')
#     exit()
# if num%2 == 0 and (2 <= num <=5):
#     print('NO')
#     exit()
# if num%2 ==0 and (6 <= num <=20):
#     print('YES')
#     exit()
# if num%2 == 0 and num>20:
#     print('NO')

#===============

# Ход слона
# Даны две различные клетки шахматной доски.
# Напишите программу, которая определяет, может ли слон попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки
# сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом слона можно попасть во вторую
# или «NO» в противном случае.

# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if abs(x1 - x2) == abs(y1 - y2):
#     print('YES')
# else:
#     print('NO')

#===============

# Ход коня
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли конь попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки
# сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом коня можно попасть во вторую
# или «NO» в противном случае.

# a = int(input()) # место старта1
# b = int(input()) # место старта2
# c = int(input()) # финиш1
# d = int(input()) # финиш2
#
# dot1=a-c
# dot2=b-d
#
# #print(dot1**2 + dot2**2) #5 , закономерность для коня
#
# if (dot1**2 + dot2**2) == 5:
#     print('YES')
#     exit()
# else:
#     print('NO')


#===============

# Ход ферзя
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли ферзь попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и
# номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом ферзя можно попасть во вторую
# или «NO» в противном случае.

# x1 = int(input()) # место старта1
# y1 = int(input()) # место старта2
# x2 = int(input()) # финиш1
# y2 = int(input()) # финиш2
#
# if(x1==x2 and y1 != y2) or (x1 !=x2 and y1 == y2) or abs(x1-x2)==abs(y1-y2):
#     print('YES')
# else:
#     print('NO')


#=========== конец экзамена ============


# 6.1 Числовые типы данных: int, float

# задача 1 из темы 6.1.
# Площадь треугольника
# Напишите программу, которая считывает длины двух катетов в
# прямоугольном треугольнике и выводит его площадь.
# S = 1/2*a*b

# a = float(input())
# b = float(input())
#
# print(1/2*a*b)


# =============================

# задача 2 из темы 6.1.
# Две старушки
# Две старушки идут навстречу друг другу с постоянными скоростями V_1 V_2V км/ч.
# Определите, через какое время старушки встретятся, если расстояние между ними равно S км.

# V скорость сближения = V1+V2
# t = S/V

# s = float(input())
# v1 = float(input())
# v2 = float(input())
#
# t = s/(v1+v2)
# print(t)


# =============================

# задача 3 из темы 6.1.

# Обратное число

# Напишите программу, которая считывает с клавиатуры одно число и
# выводит обратное ему.
# Если при этом введённое с клавиатуры число – ноль, то вывести
# «Обратного числа не существует» (без кавычек).
#
# Пример: (2,5)^-1 = 1 / 2.5

# num = float(input())
#
# if num != 0:
#     print(1/num)
#     exit()
# else:
#     print('Обратного числа не существует')


# =============================

# задача 4 из темы 6.1.

# У   Рэя Бредбери есть роман «451 градус по Фаренгейту».
# Напишите программу, которая определяет, какой температуре по
# шкале Цельсия соответствует указанное значение по шкале Фаренгейта.
#
# Используйте формулу для перевода C = 5/9*(F-32)

# f = float(input())
#
# print( 5/9*(f-32) )


# =============================

# задача 5 из темы 6.1.
# Dog age
# На вход программе подается число nn – количество собачьих лет.
# Напишите программу, которая вычисляет возраст собаки в человеческих годах.
#
# Примечание. В течение первых двух лет собачий год равен 10.5 человеческим годам.
# После этого каждый год собаки равен 4 человеческим годам.

# def dogAge(y):
#
#     if y==1:
#         print(10.5)
#
#     elif y >= 2:
#         print( 21+(y-2)*4 )
#
# y = int(input())
# dogAge(y)


# =============================

# задача 6 из темы 6.1.

# Первая цифра после точки
#
# Дано положительное действительное число.
# Выведите его первую цифру после десятичной точки.
#
# Пример: 3384390.4339 --> 4

        # поиск решения: ... b % 1 * 10 // 1
        # 3384390.4339%1*10//1 ---> # 4.0
        # 459933200.23%1*10//1 ---> # 2.0
        # 555.50059%1*10//1    ---> # 5.0
        # 22127333.67213%1*10//1 ---> # 6.0
        # int(1.5%1*10//1)     ---> # 5

        # 1). 3384390.4339 % 1          ---> 0.4339000000618398
        # 2). 3384390.4339 % 1 *10      ---> 4.339000000618398
        # 3). 3384390.4339 % 1 *10 // 1 ---> 4.0 int(4.0) = 4

# num = float(input())
#
# print( int(num % 1 * 10 // 1 ) )



# =============================

# задача 7 из темы 6.1.
#
# Дробная часть
# Дано положительное действительное число.
# Выведите его дробную часть.

# num = float(input())
# print( num % 1 )

# =============================

# задача 8 из темы 6.1.

# Напишите программу, которая находит
# наименьшее и наибольшее из пяти чисел.

# a,b,c,d,e = int(input()), int(input()),int(input()),int(input()),int(input())
#
#
# mini = min(a,b,c,d,e)
# print(f'Наименьшее число = {mini}')
# maxi = max(a,b,c,d,e)
# print(f'Наибольшее число = {maxi}')



#  ==========  Примечание: ==========

# если Надо задать через input 5 разных значений, то в ОДНУ СТРОКУ:

# lst = [ int(input( ) ) for i in range(5) ]



# =============================

# задача 9 из темы 6.1.

# Сортировка трёх 🌶️
# Напишите программу, которая упорядочивает три числа от большего к меньшему.

# numArr = [ int(input() ) for i in range(3) ]
#
# numArr = sorted(numArr)
# numArr = numArr[::-1]
#
# for el in numArr:
#     print(el)

# ======== вариант сортировки ПУЗЫРЬКОМ (?) ============

# arr = [ int(input() ) for i in range(3) ]
#
# for i,eli in enumerate(arr):
#
#     for j,elj in enumerate(arr):
#
#         if arr[j]<arr[i]:
#             tmp = arr[i]
#             arr[i] = arr[j]
#             arr[j] = tmp
#
# #print(arr)
# for el in arr:
#     print(el)


# ======== вариант сортировки sort (reverse = True)============

# a = [int(input()) for _ in range (3)]
# a.sort(reverse = True)
# print(*a, sep = '\n')




# =============================

# задача 10 из темы 6.1.

# Интересное число

# Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется
# средней по величине цифре. Напишите программу, которая определяет интересное число или нет.
# Если число интересное, следует вывести – «Число интересное» иначе «Число неинтересное».

# def intrs(num):
#     arrStr = list(num) # ['1', '2', '3']
#     print(arrStr)
#
#     arrInt = list(map(int, arrStr))
#     print(arrInt)      # [1, 2, 3]
#
#     mdl = max(arrInt) - min(arrInt)
#     print(mdl)
#
#     if mdl in arrInt:
#         print('Число интересное')
#     else:
#         print('Число неинтересное')
#
# num = input()
# intrs(num)

# ==== коротк. вар-т решения ======

# lst = list(map(int, list(input())))
# print('Число интересное' if max(lst)*2 == sum(lst) else 'Число неинтересное')


# =============================

# задача 11 из темы 6.1.

# Абсолютная сумма
# Даны пять чисел. Напишите программу, которая
# вычисляет сумму их модулей |a_1| + |a_2| +|a_3| +|a_4| + |a_5|

# arr = [float(input()) for _ in range (5)]
#
# print(arr) # [532.0, 0.0, 3467.0, 0.0, 55353.0]
#
# total = 0
#
# for i in arr:
#     total += abs(i)
#
# print(total) # 59352.0



# =============================

# задача 12 из темы 6.1.

# Манхэттенское расстояние
# Прогуливаясь по Манхэттену, вы не можете попасть из точки А в точку Б по кратчайшему пути.
# Если только вы не умеете проходить сквозь стены, вам обязательно придется идти
# вдоль его параллельно-перпендикулярных улиц.
#
# На плоскости манхэттенское расстояние между двумя точками (p1;p2) и (q1;q2)
# ∣p1−q1∣+∣p2−q2∣.


# arr = [int(input()) for _ in range (4)]
#
# p1, p2, q1, q2 = arr
#
# print(p1, p2, q1, q2)
#
# print( abs(p1 - q1) + abs(p2 - q2) )


# =============================

# задача 1,2,3 из темы 6.2.
#print(f'"Python is a great language!", said Fred. "I don\'t ever remember having this much fun before."')

# arr = [str(input()) for _ in range (2)]
# print(f'Hello {arr[0]} {arr[1]}! You just delved into Python')

# a = input()
# print(f'Футбольная команда {a} имеет длину {len(a)} символов')


# =============================

# задача 4 из темы 6.2.

# def longName(city):
#
#     # собираю длины всех городов (а вдруг их тысячи)
#     arrLen = []
#     for i in city:
#         arrLen.append(len(i))
#     #print(arrLen)
#
#
#     for i,el in enumerate(city):
#
#         # сверка длины Города с макс/мин. знач-ем
#
#         if len(el) == min(arrLen):
#             minEl = el
#         elif len(el) == max(arrLen):
#             maxEl = el
#
#     print(f'{minEl}\n{maxEl}')
#
# # беру данные от ввода
# city = [str(input()) for _ in range (3)]
# # вызов ф-ции
# longName(city)

# ====== задача 4 из темы 6.2. (через key) ==========

# a, b, c = input(), input(), input()
# print(min(a, b, c, key=len),max(a, b, c, key=len), sep='\n')

# =============================

# задача 5 из темы 6.2.
# Арифметические строки
# Вводятся 3 строки в случайном порядке. Напишите программу, которая выясняет
# можно ли из длин этих строк построить возрастающую арифметическую прогрессию.

# def arifm(a, b, c):
#     a1 = len(a)
#     b1 = len(b)
#     c1 = len(c)
#
#     if (2*a1-b1-c1)*(2*b1-c1-a1)*(2*c1-b1-a1) == 0:
#         print('YES')
#     else:
#         print('NO')
#
#
# a, b, c = input(), input(), input()
# arifm(a, b, c)


# =============================

# задача 6 из темы 6.2.

# Цвет настроения синий
# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если в введенной строке есть подстрока «синий» и «NO» в противном случае.

# str = input()
# if 'синий' in str:
#     print('YES')
# else:
#     print('NO')


# Вариант 2 для задача 6 из темы 6.2.=====

# print("YES" if "синий" in input() else "NO")



# =============================

# задача 7 из темы 6.2.

# Отдыхаем ли?

# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если в введённой строке есть подстрока «суббота» или «воскресенье»,
# и «NO» в противном случае.

# # ввод строки от юзера
# str = input()
#
# # массив с контрольными словами
# day = ['суббота', 'воскресенье']
#
# # каждое контрольн.словао сверим на вхождение в str
# for idx,el in enumerate(day):
#
#     if el in str:
#         print('YES')
#
#         # Принудит. выход, чтоб не искало по второму слову
#         exit()
#
# # удобно тут вставить, чтоб не отрицало по 2-му слову
# else:
#     print('NO')



# =============================


# задача 8 из темы 6.2.

# Корректный email
# Будем считать email адрес корректным, если в нем есть символ собачки (@) и точки.
# Напишите программу проверяющую корректность email адреса.

# mail = input()
#
# valid = ['.', '@']
#
# if valid[0] in mail and valid[1] in mail:
#     print('YES')
# else:
#     print('NO')


# =============================


# задача 1 из темы 6.3.
# Евклидово расстояние
# На плоскости евклидово расстояние между двумя точками (x 1 ;y 1 ) и (x 2 ;y 2 )
# определяется так  ρ= sqrt{(x_1-x_2)^2 + (y_1-y_2)^2}
#
# Напишите программу определяющую евклидово расстояние между двумя точками,
# координаты которых заданы. Программа должна вывести одно число – евклидово расстояние.

# To_Do:
# 1. ввод данных
# 2. сумма квадратов разниц (x1-x2)**2 + (y1-y2)**2
# 3. квадратный корень sqrt

# import math
# def calcEvclid(dots):
#
#     x1, y1, x2, y2 = dots
#     #print(x1, y1, x2, y2)
#
#     summ = ( (x1 - x2) ** 2 + (y1 - y2) ** 2 )
#     p = summ**0.5
#
#     print(p)
#
#
#
# dots = [float(input() ) for el in range(4)]
# calcEvclid(dots)
#


# =============================


# задача 2 из темы 6.3.

# Площадь и длина
# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу R.
# Используйте константу math.pi

# import math
# r = float(input())
#
# pi = math.pi
#
# s = pi*r**2
# print(s)
#
# c = 2*pi*r
# print(c)

# =============================


# задача  3 из темы 6.3.

# Программа должна вывести 4 числа –
# среднее арифметическое, геометрическое, гармоническое и квадратичное.

# num = [float(input()) for el in range(2)]
# a,b = num
#
# midd_arf = (a + b)/2
# print( midd_arf)
#
# midd_gmt = (a*b)**0.5
# print(midd_gmt)
#
# midd_gar = 2*(a*b) / (a+b)
# print(midd_gar)
#
# midd_qwt = ( (a**2 + b**2) / 2)**0.5
# print(midd_qwt)


# =============================


# задача 4 из темы 6.3.

# Напишите программу, вычисляющую значение тригонометрического выражения:
# sin*x+cos*x+tan^2*x
# по заданному числу градусов x .

# Тригонометрические функции принимают аргумент в радианах.
# Чтобы перевести градусы в радианы, воспользуйтесь формулой:

# r = (x*math.pi) / 180

# или:
# Модуль math содержит встроенную функцию radians(),
# которая переводит угол из градусов в угол в радианах.


# import math
# x = float(input())
# grade = math.radians(x)
#
# value = math.sin(grade) + math.cos(grade) + math.tan(grade)**2
#
# print(value)


# =============================


# задача 5 из темы 6.3.


# # подключение модуля (способ 1: c приставкой math. )
# import math
#
# x = float(input())
# print(math.ceil(x) + math.floor(x))
#
#
# # подключение всех функций модуля (способ 2)
# from math import *
#
# print(sqrt(9))
#
#
# # подключение конкретных функций модуля (способ 3)
# from math import ceil, floor
#
#
# x = float(input())
# print(ceil(x) + floor(x))



# =============================


# задача 6 из темы 6.3.

# Квадратное уравнение 🌶️🌶️
# Даны три вещественных числа aa, bb, cc.
# Напишите программу, которая находит вещественные корни квадратного уравнения
# ax^2 + bx + c = 0.
#
# Программа должна вывести вещественные корни уравнения если они существуют
# или текст «Нет корней» в противном случае.
#
# Если уравнение имеет два корня, то следует вывести их в порядке возрастания.
#
# Решение:
#
# 1. Дискриминат:
# D = b**2-4*a*c
#
# 2. Ищем корни:
# D < 0 нет корней
# D = 0 один корень (расчет х)
# D < 0 два корня  (расчет х1 и х2)
#
# 3. Расчет одного корня (A) и двух корней (Б):
#
# А). x = -b/(2*a)
#
# Б). x1 = (-b+d**0.5)/(2*a)
#     x2 = (-b-d**0.5)/(2*a)
#
# 4. вывод в порядке возрастания:
#
# min(x1, x2)
# max(x1, x2)

# def calc(arg):
#     print(arg)
#
#     a,b,c = arg
#
#     d = (b**2)-(4*a*c)
#     print(f' Дискриминант D = {d}')
#
#     if d < 0:
#         print('Нет корней')
#
#     if d == 0:
#         print(' Один корень')
#         x1 = -b / (2 * a)
#         print(x1)
#
#     if d > 0:
#         print(' Два корня')
#         x1 = (-b + (d**0.5)) /(2*a)
#         x2 = (-b - (d ** 0.5)) / (2 * a)
#
#         minEl = min(x1,x2)
#         maxEl = max(x1,x2)
#
#         print(minEl, maxEl, sep='\n')
#
#
# arg = [float(input()) for _ in range (3)]
# calc(arg)



# =============================


# задача 7 из темы 6.3.

# Правильный многоугольник

# Правильный многоугольник — выпуклый многоугольник, у которого равны все стороны
# и все углы между смежными сторонами.

# Площадь правильного многоугольника с длиной стороны a
# и количеством сторон  n вычисляется по формуле:

# s = (n*a**2)
#     _________
#     4 tg(pi/n)

# Даны два числа: натуральное число n  и вещественное число a .
# Напишите программу, которая находит S этого правильного многоугольника.
#
# from math import pi, tan
# n = int(input())
# a = float(input())
#
# zn = n*a**2
# ch = 4*( tan(pi/n) )
#
# s = zn/ch
# print(s)


# === ТЕМА 7 ==============

            # PYTHON  -->
            # for i in range(5):
            #     print(i) # 0 1 2 3 4


            #JS  -->
            # for(let i = 0; i<5; i++){
            #     console.log(i) // 0 1 2 3 4
            # }



# задание № 4 по Теме 7.1. (Цикл for)

# n = int(input())
# for i in range(1,n,1):
#     print('*'*19)

# ====== задание № 3 по Теме 7.1. (Цикл for) ===

#  вывести в печать:

# AAA
# AAA
# AAA
# AAA
# AAA
# AAA
# BBBB
# BBBB
# BBBB
# BBBB
# BBBB
# E
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# G

# for i in range(1,7,1):
#     print('A'*3)

# for i in range(1,6,1):
#     print('B'*4)

# print('E')

# for i in range(9):
#     print('T'*5)

# print('G')


# вариант решения в 1 строку
# [print((i*k+"\n")*j, end="") for i, j, k in zip("ABETG", [6, 5, 1, 9, 1], [3, 4, 1, 5, 1])]


# ====== задание № 2 по Теме 7.1. (Цикл for) ===

# def multi(str, n):
#     for i in range(n):
#         print(str)
#
# str = input()
# n = int(input())
#
# multi(str, n)


# ====== задание № 1 по Теме 7.1. (Цикл for) ===

# 1. Если не треуется, чтоб переменная участвовала в переборе значений
# for _ in range(3):
#     print('Python is awesome!')

#  на выходе:
# Python is awesome!
# Python is awesome!
# Python is awesome!

# ---------------------------------------

# 2. Если нужно, чтоб i участвовала в переборе значений

# for i in range(3):
#     print(f'Python is awesome № {i}')

#  на выходе:
# Python is awesome № 0
# Python is awesome № 1
# Python is awesome № 2




# ====== задание № 8 по Теме 7.1. (Цикл for) ===


# Популяция
# На вход программе подается три натуральных числа m,p,n:
#
# m: стартовое количество организмов;
# p: среднесуточное увеличение в %;
# n: количество дней для размножения.
# Напишите программу, которая предсказывает размер популяции организмов.
# Программа должна выводить размер популяции в каждый день,
# начиная с 11 и заканчивая n-м днем.

# # трижды ввод данных сразу в массив
# arrNum = [int(input()) for i in range(3)]
#
# # вывод из-под массива данных
# m,p,n = arrNum
#
# # массив-сборщик (усложн. чуть задачу)
# arrAcc = [m]
#
# # стартовая переменная (будет изменяться внутри for)
# start = m
#
# for i in range(n-1):
#     start += start*p/100
#     arrAcc.append(start)
#
# # вывод на печать (опять через for)
# for idx, el in enumerate(arrAcc):
#     print(idx+1, float(el))



# ====== задание № 5 по Теме 7.1. (Цикл for) ===

# Повторяй за мной 2

# Напишите программу, которая считывает одну строку текста и выводит 10 строк,
# пронумерованных от 0 до 9, каждая с указанной строкой текста.

# s = input()
#
# for el in range(10):
#     print(f'{el} {s}')


# ====== задание № 6 по Теме 7.1. (Цикл for) ===

# Квадрат числа
#
# На вход программе подается натуральное число n .
# Напишите программу, которая для каждого из чисел от 0  до n  (включительно)
# выводит фразу: «Квадрат числа [число] равен [число]» (без кавычек).

# n = int(input())
#
# for idx in range(n+1):
#     print( f'Квадрат числа {idx} равен {idx**2}' )


# ====== задание № 6 - вариант в 1 строку  по Теме 7.1. ===
# [print(f"Квадрат числа {i} равен {i**2}") for i in range(int(input())+1)]




# ====== задание № 7 по Теме 7.1. (Цикл for) ===

# Звездный треугольник
# Должно получиться типа такого:
#
# ***********
# **********
# *********
# ********
# *******
# ******
# *****
# ****
# ***
# **
# *

# s = int(input())
#
# for i in range(s):
#     print('*'*s)
#     s = s-1



# ====== задание № 1 по Теме 7.1. (функция range() ) ==

# Даны два целых числа m  и n  ( m≤n).
# Напишите программу, которая выводит все числа от m  до n  включительно.

# num = [int(input()) for el in range(2)]
# a,b = num
# for i in range(a,b+1):
#     print(i)



# ====== задание № 5 по Теме 7.1. (функция range() ) ==

# Таблица умножения
# Дано натуральное число n .
# Напишите программу, которая выводит таблицу умножения на  n.

# Вывод такой:
# 5 x 1 = 5
# 5 x 2 = 10
# 5 x 3 = 15
# 5 x 4 = 20
# 5 x 5 = 25
# 5 x 6 = 30
# 5 x 7 = 35
# 5 x 8 = 40
# 5 x 9 = 45
# 5 x 10 = 50


# n = int(input())
#
# for i in range(1,11,1):
#     print(f'{n} x {i} = {n*i}')



# ====== задание № 4 по Теме 7.1. (функция range() ) ==

# Последовательность чисел №4

# Даны два натуральных числа m  и n  ( m≤n).
# Напишите программу, которая выводит все числа от m  до n  включительно
# удовлетворяющие хотя бы одному из условий:
#
#  -- число кратно 17;
#  -- число оканчивается на 9;
#  -- число кратно 3 и 5 одновременно.

# Если чисел удовлетворяющих условию нет, выводить ничего не надо

# mn = [int(input()) for i in range(2)]
# m,n = mn
#
# for i in range(m, n+1):
#     if i%17==0 or i%10==9 or (i%3==0 and i%5==0):
#         print(i)


# ===========================

 # Последовательность чисел №2
# Даны два целых числа m и n .
# Напишите программу, которая выводит все числа от m до n включительно в порядке
# возрастания, если m<n , или в порядке убывания в противном случае (m>n).


# num = [int(input()) for i in range(2)]
# m,n = num
#
# if m<=n:
#    for el in range(m,n+1,1):
#        print(el)
# elif m>n:
#    for el in range(m,n-1,-1):
#        print(el)



#===============================


# Последовательность чисел № 3

# Даны два целых числа m и n  ( m>n).
# Напишите программу, которая выводит все нечетные числа
# от m до n включительно в порядке убывания.

#  Пример: 77 и 62   На выходе:  77 75 73 71 69 67 65 63

# ввод 2-х значений (сразу в массив)
# num = [int(input()) for i in range(2)]

# # реструктуризация массива на отдельн.элем.
# m,n = num
#
# # массив для накопления цифр от m до n
# arr= []

# # наполнение массива значениями
# for i in range(m,n-1,-1):
#    arr.append(i)

# # итерация по массиву и вывод значения по условию
# for i in arr:
#    if i%2 !=0:
#        print(i)


# 7.3 Частые сценарии

# Напишем программу, которая считывает 10 чисел и
# определяет сколько из них больше 10.

# import random
#
# # собрал массив рандомных значений
# arr = []
# for i in range(20):
#     el = random.randint(-10, 50)
#     arr.append(el)
# print(arr)
#
# count = 0
# count2 = 0
#
# for i in arr:
#     if i>10:
#         count +=1
#     if i%10 == 0:
#         count2 +=1
#
# print(count, count2)

# ======================

# Рассмотрим еще один пример:
# подсчитать количество чисел из диапазона [1;100],
# квадрат которых оканчивается на 4.

## from math import sqrt
# count = 0
# for i in range(1,101):
#     a = (i**2)%10
#
#     if a == 4:
#         count +=1
#
# print(count)



#===========================


# Напишем программу, определяющую,
# что натуральное число является простым:

# arr = [97,122,100,5,8,11,13,67,14,16,70,23]
#
# for i,el in enumerate(arr):
#
#     for j in range(2,el):
#        if el%j == 0:
#             break
#     else:
#         print(el) # 97 5 11 13 67 23

# ===========================

# Напишем программу, которая считывает 10 положительных чисел и
# находит среди них наибольшее число.

# import random
#
# # собрал массив рандомных значений
# arr = []
# for i in range(40):
#     el = random.randint(-50, 50)
#     arr.append(el)
# print(arr)
#
# # счетчик и массив-сборщик для 10-ти цифр больше 0
# count = 0
# arr10 = []
#
# for i,el in enumerate(arr):
#     if el >0 and count <10:
#         arr10.append(el)
#         count +=1
#
# print(arr10, count)
#
# # найти большее число
# bigEl = max(arr10)
# print(bigEl)


# ============================

1.

# КОЛЧИЧЕСТВО ЧИСЕЛ
# На вход программе подаются два целых числа a  и b  (a≤b).
# Напишите программу, которая подсчитывает количество чисел
# в диапазоне от aa до bb включительно, куб которых оканчивается на 4 или 9 .
#
# def calcCube(num):
#     a,b = num
#     count = 0
#
#     for i in range(a,b+1):
#         cube = i**3
#         if cube%10==4 or cube%10==9:
#
#             count +=1
#
#     print(count)
#
#
# num = [int(input()) for i in range(2) ]
# calcCube(num)
#
# # ============================
#
#  # №2. СУММА ЧИСЕЛ
# На вход программе подается натуральное число n, а затем n целых чисел,
# каждое на отдельной строке.
# Напишите программу, которая подсчитывает сумму введенных чисел.
#
#
#
#
# def calcSum(num):
#
#     summ = sum(num)
#     print(summ)
#
# rePlay = int(input())
# num = [int(input()) for i in range(rePlay) ]
#
# calcSum(num)
#
#
# # ============================
#
#  # №3.АСИМПТОТИЧЕСКОЕ ПРИБЛИЖЕНИЕ
# Асимптотическое приближение
# На вход программе подается натуральное число n .
# Напишите программу, которая вычисляет значение выражения
#
# import math
#
# n = int(input())
# summ = 0
#
# for i in range(1, n + 1):
#     summ = summ + (1 / i)
#
# logN = math.log(n)
#
# asimp = summ - logN
#
# print(asimp)
#
# # ============================
#
#
#  #4. СУММА ЧИСЕЛ - 2 (через массив)
#
# На вход программе подается натуральное число n.
# Напишите программу, которая подсчитывает сумму тех чисел
# от 1 до n (включительно) квадрат которых оканчивается на 2,5 или 8.
#
# n = int(input())
# summ = [ ]
#
# for i in range(1, n+1):
#
#     if((i**2)%10 == 2 or
#         (i**2)%10 == 5 or
#         (i**2)%10 == 8):
#
#         summ.append(i)
#
# print(sum(summ))


# ============================
# 5.
# Факториал
# На вход программе подается натуральное число n.
# Напишите программу, которая вычисляет n!
#
# n = int(input())
#
# fact = 1
#
# for i in range(2, n+1):
#
#    fact *=i
#
# print(fact)
#
# ============================
#
#
# # 6.  БЕЗ НУЛЕЙ
# Напишите программу, которая считывает 10 чисел и
# выводит произведение отличных от нуля чисел.
#
#
# def dontZero(num):
#    acc = 1
#    for i,el in enumerate(num):
#
#        if el !=0:
#            acc *= el
#    print(acc)
#
# num = [int(input()) for i in range(10)]
# dontZero(num)
#
#
#
# ============================
#
#
#
# # 7.  СУММА ДЕЛИТЕЛЕЙ
# На вход программе подается натуральное число n.
# Напишите программу, которая вычисляет сумму всех его делителей.
#
# n = int(input())
# arrDel = []
#
# for i in range(1, n+1):
#    if n%i == 0:
#        arrDel.append(i)
#
# summ = sum(arrDel)
# print(summ)



# ============================


# # 8. ЗНАКОЧЕРЕДУЮЩАЯ СУММА
# На вход программе подается натуральное число n .
# Напишите программу вычисления знакочередующей суммы
#
#
# n = int(input())
#
# arr = []
#
# # 1. собрал массив из значений от 1 до n
# for i in range(1, n+1):
#    if i%2==0:
#        i = -i

#    arr.append(i)
#
# summ = sum(arr)
#
# print(summ)


# ============================


# 9. НАИБОЛЬШИЕ ЧИСЛА

# На вход программе подается натуральное число n , а затем
# n  различных натуральных чисел, каждое на отдельной строке.
# Напишите программу, которая выводит наибольшее и второе наибольшее число последовательности.

# def maxNum(num):
#     print(num)
#
#     topNum = sorted(num)
#     print(topNum)
#
#     print(topNum[len(topNum)-1],topNum[len(topNum)-2],sep='\n' )
#
# n = int(input())
# num = [int(input()) for i in range(n )]
#
# maxNum(num)



# ============================

# №10
# Only even numbers
# Напишите программу, которая считывает последовательность из 10 целых чисел
# и определяет является ли каждое из них четным или нет.

# def everyEven(num):
#
#     for idx,el in enumerate(num):
#
#         if el%2 !=0:
#
#             print('NO')
#             break
#
#     else:
#         print('YES')
#
#
# num = [int(input()) for i in range(10)]
# everyEven(num)



# ============================
# FIBONACCHI / fibo / fibona

# № 11. Последовательность Фибоначчи
# (с моими модификациями для 1)

# fib1 = fib2 = 1
#
# n = int(input())
#
# if n !=1:
#     print(fib1, fib2, end=' ')
# elif n==1:
#     print(fib1)
#
# for i in range(2, n):
#     fib1, fib2 = fib2, fib1 + fib2
#     print(fib2, end=' ')





# =====================================
# ======  тема 7.4.:Цикл while =========
# =====================================

# №1
# s=input()
# while s!='КОНЕЦ':
#   print (s)
#   s=input()
#
# №2
# s=input()
# while s!='КОНЕЦ' and s!='конец':
#   print (s)
#   s=input()

# №3
# [*] Задача 3 по теме 7.4.: КОЛИЧЕСТВО ЧЛЕНОВ ======

# s = input()
# count = 0
# while s != 'стоп' and s != 'хватит' and s != 'достаточно':
#    # print(s)
#    count +=1
#
#    s=input()
# print(count)


# №4.
# [*] Задача 4 по теме 7.4.:   ======

# Идет последовательность цифр, делящихся на 7.
# Стоп - если попадается на входе число, не делящееся на 7
#
# вывод на экран цифр до момента стоп.


# seven = int(input())
#
# while seven%7 == 0:
#    print(seven)
#
#    seven = int(input())


# №5.
# [*] Задача 5 по теме 7.4.:  СУММА ЧИСЕЛ ======
# Идет последовательность цифр
# Стоп - если попадается на входе отрицательное число,
# и вывести сумму чисел до этого отриц. числа


# num = int(input())
# accSum = 0
#
# while num >=0:
#    accSum +=num
#    num=int(input())
#
# print(accSum)


# №6.
# [*] Задача 3 по теме 7.4.: КОЛИЧЕСТВО ЧЛЕНОВ ======

# s = int(input())
# count = 0
# while 0<s<=5:
#    if s==5:
#       count +=1
#
#    s=int(input())
# print(count)





# [*] Задача 7 по теме 7.4.: ВЕДЬМАКУ ЗАПЛАТИТЕ ЧЕКАННОЙ МОНЕТОЙ======

# ===== варинат № 1 (читерское решение)===============
# def smallCoin(many):
#    dic = \
#        {
#            '1': 1,
#            '4': 4,
#            '5': 1,
#            '9': 5,
#            '10': 1,
#            '25': 1,
#            '49': 7,
#            '100': 4,
#            '499': 25,
#            '2111': 86
#        }
#
#    for i in dic.keys():
#        if many == i:
#            print(dic[i])
#
# many =  input()
# smallCoin(many)




# перерешана задача 7 по теме 7.4.: ВЕДЬМАКУ ЗАПЛАТИТЕ ЧЕКАННОЙ МОНЕТОЙ
# ===== варинат № 2 (норм. решение)===============

# Stepik 7.4.
# Ведьмаку заплатите чеканной монетой (музыка/слова: )

# # ввод общей суммы
# many = int(input())

# # Массив из номинала монет (от большего к меньшему)
# nominal = [25, 10, 5, 1]

# # Счетчик (включается при использовании монеты )
# count = 0

# # Перебор номинала
# for i, el in enumerate(nominal):
#
#     # Если такая монета доступна (ДоТехПорПока: many // el >= 1)
#     while many // el >= 1:
#         # print(el) # вывод номинала каждой учтенной монеты
#
#         # считаю (+1) использование монеты,
#         count += 1
#
#         # умньшаю сумму на учтенную монету
#         many = many - el

# print(count)








 # =================================================

 # ===  тема 7.5. Цикл while: обработка цифр числа  ==

 # =================================================

# Напишем программу, которая определяет есть ли в числе цифра 7.
# работа у доски :-)

# num = int(input('Какое число (0...9) ищем: '))
# s = int(input('В каком числе ищем: '))
#
# flag = False
#
# while s !=0:
#     ost = s % 10
#
#     if ost == num:
#         flag = True
#     s = s//10
#
#
# if flag == True:
#     print(f'есть {num} в числе {s}')
# else:
#     print(f'нет искомой цифры {num} в числе {s}')



# =========== https://stepik.org/lesson/265122/step/4 =========

# задача № 1 темы 7.5.
# Вывод цифр в обратном порядке

# def printRevers(num):
#
#    while num != 0:
#        digit = num % 10
#        print(digit)
#        num = num//10
#
# num = int(input())
# printRevers(num)
#




# задача № 2 темы 7.5.
# ОБРАТНЫЙ ПОРЯДОК - 2

# Поменять порядок цифр на обратный

# def getRevers(num):
#
#    revNum = ''
#
#    while num !=0:
#       revNum += str(num%10)
#       num = num // 10
#
#    #запасное преобразование str --> int
#    revNum = int(revNum)
#
#    print(revNum )
#
# num = int(input())
# getRevers(num)
#



# задача №3 темы 7.5.
# МАКС И МИН

# num = int(input())
#
# maxEl = 0
# minEl = 9
#
# while num !=0:
#
#    el = num%10
#    if el >= maxEl:
#        maxEl = el
#    if el <= minEl:
#        minEl = el
#
#    num = num//10
#
# print(f'Максимальная цифра равна {maxEl}')
# print(f'Минимальная цифра равна {minEl}')
#
#


# задача №4 темы 7.5.
# ВСЁ ВМЕСТЕ

# Дано натуральное число. Напишите программу, которая вычисляет:
#
# сумму его цифр;
# количество цифр в нем;
# произведение его цифр;
# среднее арифметическое его цифр;
# его первую цифру;
# сумму его первой и последней цифры.
#
# arr = list(map(int,input()) )
# # print(arr, type(arr[0]))
#
# # 1. сумма его цифр:
# print(sum(arr))
#
# # 2. количество цифр:
# print(len(arr))
#
# # 3. произведение цифр числа:
# multi=1
# for i in arr:
#    multi *=i
# print(multi)
#
# # 4. среднее арифметическое:
# middle = sum(arr) / len(arr)
# print(middle)
#
# # 5. первая цифра числа:
# print(arr[0])
#
# # 6. сумму первой и последней цифры числа:
# print(arr[0] + arr[len(arr)-1])
#




# задача №5 темы 7.5.
# ВТОРАЯ ЦИФРА (сделать не за счет сахара, а через while)

# n = int(input())
#
# while n >= 10:
#
#    if n//10 <=10:
#        dgt = n%10
#        print(dgt)
#
#    n = n // 10
#
#

# [сайт --- ]  задача №6 темы 7.5.

# состоит ли число из одинаковых цифр
#
# def sameDigits(numArr):
#
#    # print(numArr)
#
#    for i, el in enumerate(numArr):
#
#        if el !=numArr[len(numArr)-1]:
#            print('NO')
#            break
#    else:
#        print('YES')
#
#
# numArr = list(map(int, input()) ) # преобразование на лету в массив
# sameDigits(numArr)



# [сайт --- ] задача №8 темы 7.5.

# Упорядоченные цифры
# Дано натуральное число.
# Напишите программу, которая определяет, является ли последовательность его цифр
# при просмотре справа налево упорядоченной по неубыванию.
#
# Пример:
# 5321 YES
# 7820 NO
# 9663 YES
# 12345 NO

# def maxToMin(arr):
#     print(arr)
#
#     for i in range(len(arr)-1):
#         # print( i, arr[i])
#
#         if arr[i]>=arr[i+1]:
#             continue
#         else:
#             print('NO')
#             break
#     else:
#         print('YES')
#
# arr = list(map(int,input()))
# maxToMin(arr)




# =================================================
# === Тема 7.6. break, continue и else =============
# =================================================

# Задачи в классе:

# for i in range(10):
#     print(i, end='*')
#     if i > 6:
#         break




# i = 100
# while i > 0:
#     if i == 40:
#         break
#     print(i, end='*')
#     i -= 20



# n = 10
# while n > 0:
#     n -= 1
#     if n == 2:
#         continue
#     print(n, end='*')


# result = 0
# for i in range(10):
#     if i % 2 == 0:
#         continue
#     result += i
# print(result)


# mult = 1
# for i in range(1, 11):
#    if i % 2 == 0:
#       continue
#    if i % 9 == 0:
#       break
#    mult *= i
# print(mult)



# ====== самостоятельные задачи 1 и 2 =========


# ======== Наименьший делитель ================

# На вход программе подается число n > 1 .
# Напишите программу, которая выводит его наименьший отличный от 1  делитель.


# n=int(input())
# for i in range (2, n+1):
#   if n%i==0:
#     print (i)
#     break


# ======== Следуй правилам ===================

# На вход программе подается натуральное число n .
# Напишите программу, которая выводит числа от 1  до n включительно за исключением:
#
# чисел от 55 до 99 включительно;
# чисел от 1717 до 3737 включительно;
# чисел от 7878 до 8787 включительно.

# put your python code here
# n = int(input())
# for i in range(1, n+1):
#   if 5<=i<=9 or 17<=i<=37 or 78<=i<=87:
#     continue
#   print(i)

# #  вариант решения:
# print(*(i for i in range(1, int(input()) + 1) if i not in [*range(5, 10), *range(17, 38), *range(78, 88)]), sep='\n')


# Определеить за миинмальное время: является ли 1934234249 ПРОСТЫМ числом
# (Прим.: верхняя граница поиска num ** 0.5)

# num = int(input())
#
# flag = True
#
# for i in range(2, int(num ** 0.5) + 1):
#
#     if num % i == 0:
#         flag = False
#
# if num > 1 and flag == True:
#     print('Число простое')
# else:
#     print('Число составное')


# Таблица пояснения:
#
# число  корень	"ДЕЛИТЕЛЬ      Прим.:
#                  ТОЛЬКО"
#
# 5	   2,24	      5	 !        "Больше значения корня"
# 6	   2,45
# 7	   2,65	      7	 !         "Больше значения корня"
# 8	   2,83
# 9	   3
# 10	   3,16
# 11	   3,32	      11	!      "Больше значения корня"
# 12	   3,46
# 13	   3,61	      13	!       "Больше значения корня"
# 14	   3,74
# 15	   3,87
# 16	   4
# 17	   4,12	      17	!        "Больше значения корня"





# =================================================
# === Тема 7.7 Поиск ошибок и ревью кода ============
# =================================================


# https://stepik.org/lesson/311433/step/4


# Задача 1
#
# Ревью кода-1
# На обработку поступает последовательность из 10 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
#  Нужно написать программу, которая выводит на экран количество неотрицательных чисел последовательности
# и их произведение.
#
# Если неотрицательных чисел нет, требуется вывести на экран «NO».

# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно 4 ).

# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
#
# Примечание 1. Число xx не превышает по абсолютной величине 10^6
#  , если -10^6  <= x <= 10^6 .
#
# Примечание 2. При необходимости вы можете добавить необходимые строки кода.

# исходные данные

                # count = 0
                # p = 0
                # for i in range(1, 10):
                #     x = int(input())
                #     if x > 0:
                #         p = p * x
                #         count = count + 1
                # if count > 0:
                #     print(x)
                #     print(p)
                # else:
                #     print('NO')


# мое решение задачи № 1(степик не принял из-за x > 0, остальные 3 ошибки - нашел).
# count = 0
# p = 1
# for i in range(1, 11):
#     x = int(input())
#
#     if x < 0:
#         continue
#
#     elif x > 0:
#         p = p * x
#         count += 1
#
#
# if count > 0:
#     print(count)
#     print(p)
# else:
#     print('NO')

# 2-е решение задачи № 1( всего-то надо еще доделать x >= 0).
# count = 0
# p = 1
# for i in range(1, 11):
#     x = int(input())
#     if x >= 0:
#         p = p * x
#         count = count + 1
# if count > 0:
#     print(count)
#     print(p)
# else:
#     print('NO')



# Задача № 2 .

# Ревью кода-2
# На обработку поступает последовательность из 10 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
# Нужно написать программу, которая выводит на экран сумму всех отрицательных чисел последовательности и
# максимальное отрицательное число в последовательности.
# Если отрицательных чисел нет, требуется вывести на экран «NO».
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно 5 ).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
#
# Примечание 1. Число xx не превышает по абсолютной величине 10^6 , если -10^6  ≤x ≤10^6
#
# Примечание 2. При необходимости вы можете добавить необходимые строки кода.


# исходный код для ревью:

# mx = 0
# s = 0
# for i in range(11):
#     x = int(input())
#     if x < 0:
#         s = x
#     if x > mx:
#         mx = x
# print(s)
# print(mx)


# почти мое решение задачи № 1 версия 2

# mx = 0
# s = 0
# for i in range(10):
#     x = int(input())
#     if x < 0:
#         s += x
#         if mx == 0 or x > mx:
#             mx = x
# if s == 0:
#     print('NO')
# else:
#     print(s)
#     print(mx)


# Задача № 3  .

# Ревью кода № 3
#
# На обработку поступает последовательность из 7 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6
# !! (max = 10**6  или минимум -10**6)!!
# Нужно написать программу, которая подсчитывает и выводит
 # сумму всех чётных чисел последовательности
# или 0 , если чётных чисел в последовательности нет.
#
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно  4).
# Известно, что каждая ошибка затрагивает только одну строку
 # и может быть исправлена без изменения других строк.
#
#
# Исодный код:
#
# s = 1
# for i in range(1, 7):
#     n = input()
#     if i % 2 == 0:
#         s = s + n
# print(s)


# мое решение задачи № 3 (14/01/23)

# s = 0
# for i in range(7):
#     n = int(input())
#     if n % 2 == 0:
#         s = s + n
#
# if s ==0:
#     print(0)
# else:
#     print(s)



# Задача № 4  .   Ревью кода-4

# На обработку поступает натуральное число (от 1 ......).
# Нужно написать программу, которая выводит на экран максимальную цифру числа, кратную 3 .
# Если в числе нет цифр, кратных 3 , требуется на экран вывести «NO».
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно 5 ).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
#
# Примечание 1.   Число 0 делится на любое натуральное число.

# Исходный код:

# n = int(input())
# max_digit = n % 10
# while n > 0:
#     digit = n % 10
#     if digit % 3 == 0:
#         if digit < max_digit:
#             digit = max_digit
#     n = n % 10
# if max_digit == 0:
#     print('NO')
# else:
#     print(max_digit)
#

# n = int(input())
#
# max_digit = -1              #  == -1 (стартовый максимум)
#
# while n > 0:
#     digit = n % 10              # 121 % 10 == 1
#
#     if digit % 3 == 0:          # 1 % 3 !==0
#         if digit > max_digit:
#             max_digit = digit
#
#     n = n // 10                 # 121 // 10 == 12
#
# if max_digit == -1:
#     print('NO')
# else:
#     print(max_digit)

# Задача № 5 .   Ревью кода-5


# На обработку поступает натуральное число.
# Нужно написать программу, которая выводит на экран его первую (старшую) цифру.
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их ровно 2 ).
# Известно, что каждая ошибка затрагивает только одну строку и
# может быть исправлена без изменения других строк.

# Исходник:
#
# n = int(input())
# while n > 0:
#     n %= 10
# print(n)


# n = int(input())
# # a = 0
# # while n >0:
# #
# #     a = n % 10
# #
# #     n = n // 10
# #
# # print(a)


# Задача № 6.   Ревью кода-6

# написать программу, которая выводит на экран произведение цифр введенного числа

            # Исходник:
            #
            # n = input()
            # product = n % 10
            # while n >= 10:
            #     digit = n % 10
            #     product = product * digit
            #     n //= 10
            # print(product)

# n = list(map(int, input()))
#
# acc = 1
#
# for i in n:
#     acc = acc * i
# print(acc)




# =====================================
# === 7.8 Вложенные циклы. Часть 1 ======
# =====================================


# Дано натуральное число  (n≤ 9).
# Напишите программу, которая печатает таблицу размером  n×3 состоящую из данного числа
# (числа отделены одним пробелом).

# num = int(input())
#
# for i in range(num):
#
#     for j in range(1):
#         print( f'{num } '*3 )
#


                 # не по заданию. ТАБЛИЦА УМНОЖЕНИЯ
                # for i in range(1,10):
                #
                #     for j in range(1,10):
                #         print(f'{i*j }',end='|')
                #     print('\n')


# ===============  ЗАДАЧА 2. (7.8 Вложенные циклы. Часть 1)

# Таблица-2
# Дано натуральное число (n≤ 9).
# Напишите программу, которая печатает таблицу размером  5n×5,
# где в i -ой строке указано число i  (числа отделены одним пробелом).
#
# Формат выходных данных
# Программа должна вывести таблицу размером n×5 в соответствии с условием.
# Примечание. В конце строки может быть пробел


# num = int(input() )
#
# for i in range(num):
#
#     for j in range(5):
#         print(i+1, end=" ")
#     print()

# Вариант решения
# n = int(input())
# [print(i, i, i, i, i) for i in range(1, n + 1)]



# ============   ЗАДАЧА 4. (7.8 Вложенные циклы. Часть 1)


# Звездный треугольник
# Дано нечетное натуральное число n .
#  Напишите программу, которая печатает равнобедренный звездный треугольник с основанием,
#  равным n = 7  в соответствии с примером:

# *
# **
# ***
# ****
# ***
# **
# *


# Примечание. Используйте вложенный цикл for



# # ввод ОСНОВАНИЯ треугольника (кол-во строк вывода)
# num = int(input())
#
# # цикл: построчный вывод (num циклов)
# for i in range(num):
#
#         # num/2 - показать границу, после которой надо уменьшать кол-во *
#         if i<= num / 2:
#             print('*' * i)
#
#         # если граница num/2 превышена, то:
#         else:
#             # использую цикл ( ...range(i) ),где за счет увеличения j уменьшаю i
#             for j in range(i):
#                 print('*' * int(i-j))
#
#             # остановка "мусорных" повторов работы цикла  for j...
#             break
#
# # вариант решения:
# n = int(input())
# for i in range(1, n + 1):
#     print('*' * min(i, n - i + 1))
#
#
# *
# **
# ***
# ****
# *****
# ****
# ***
# **
# *





 # ===========
 # просто ОБРАЗЕЦ ЁЛОЧКИ на х6

 # num = int(input())
 #
 # for i in range(num+1):
 #     print('*'*i)

 # *
 # **
 # ***
 # ****
 # *****
 # ******

 # ===========






 #  ============   ЗАДАЧА 5. (7.8 Вложенные циклы. Часть 1)

# Численный треугольник 1
# Дано натуральное число n .
#  Напишите программу, которая печатает численный треугольник в соответствии с примером:
# 1
# 22
# 333
# 4444
# 55555
# ...

# num = int(input())
#
# for i in range(num):
#     print('')
#     for j in range(i+1):
#         print(i+1, end="")

# # на выходе:
# 1
# 22
# 333
# 4444
# 55555



        # # Не решение - просто пример:
        # num = int(input())
        #
        # for i in range(0, num+1):
        #     print('')
        #     for j in range(i+1):
        #         print(j+1, end="")

        # На выходе:
        # 1
        # 12
        # 123
        # 1234
        # 12345



# Задача № 6 (7.8 Вложенные циклы. Часть 1)

# 12 месяцев
# Решите уравнение в натуральных числах  28n + 30k + 31m = 365.
#
# Примечание. Используйте вложенный цикл for.
#  В первую очередь запишите решение с наименьшим значением n .


# nEl = 365 // 28 # = 13
# kEl = 365 // 30 # = 12
# mEl = 365 // 31 # = 11

# for n in range(1, 13):
#     for k in range(1, 12):
#         for m in range(1, 11):
#             if 28*n + 30*k + 31 * m == 365:
#                 print(f'n = {n}, k = {k}, m = {m}')

# Задача № 7 (7.8 Вложенные циклы. Часть 1)

# Старинная задача
# Имеется 100  рублей.
#  Сколько быков, коров и телят можно купить на все эти деньги, если:
#  плата за быка – 10  рублей,
#  за корову – 5  рублей,
#  за теленка – 0.5 рубля и
#  надо купить 100 голов скота?

# for b in range(1, 10):
#     for k in range(1, 20):
#         for t in range(1, 200):
#             if 10*b + 5*k + 0.5*t == 100:
#                 # print(f'бык = {b}, корова = {k}, телёнок = {t}')
#                 if b+k+t==100:
#                     print(f'бык = {b}, корова = {k}, телёнок = {t}')

# Задача 8.
# Гипотеза Эйлера о сумме степеней
# В 1769 году Леонард Эйлер сформулировал обобщенную версию Великой теоремы Ферма, предполагая,
#  что по крайней мере nn энных степеней необходимо для получения суммы,
#  которая сама является энной степенью для n > 2n>2.
#
#  Напишите программу для опровержения гипотезы Эйлера (продержавшейся до 1967 года),
#  и найдите четыре положительных целых числа, сумма 5-х степеней которых равна 5-й степени
#  другого положительного целого числа.
#
# Таким образом, найдите пять натуральных чисел a,b,c,d,e удовлетворяющих условию:
# a^5+b^5+c^5+d^5=e^5.
#
# В ответе укажите сумму a+b+c+d+ea+b+c+d+e.
#
# Примечание 1. Используйте вложенный цикл for.
#
# Примечание 2. Считайте, что числа a, b, c, d, e  не превосходят 150 .
#
# Примечание 3. Программа может работать дольше чем обычно.
#  В зависимости от способа решения задачи на выполнение программы может уходить до нескольких минут.
#  Попробуйте сократить количество вложенных циклов.




# for a in ran tepik.org/lesson/298795/step/13?discussion=4949168&thread=solutions&unit=280622




# ===============================
# 7.9 Вложенные циклы. Часть 2  ===
# ===============================


#  ==========  Задача 1 (Степик 17.01.2023) ========
#
# Численный треугольник 3
# Дано натуральное число  .
# Напишите программу, которая печатает численный треугольник с высотой равной n
# в соответствии с примером:

# для числа 6:

# 1
# 2 3
# 4 5 6
# 7 8 9 10
# 11 12 13 14 15
# 16 17 18 19 20 21

# #  ввод числа (число 6)
# num = int(input())

# # Наращиватель начальной цифры для цикла ( для 'j')
# start = 0

# # ряды чисел (от 1 до 6+1)
# for i in range(1, num+1):

#    # цикл 2: внутри каждого ряда происходит магия
#    for j in range(i):
#
#        # магия подстановки значний
#        print(i+start+j, end=' ')

#    print('')

#    # увеличение на 'j'
#    start += j





# ===========================================================================


# Задача 2 (Степик 17.01.2023)
#
# Численный треугольник № 4
# Дано натуральное число  .
# Напишите программу, которая печатает численный треугольник
# с высотой равной n, в соответствии с примером:
#
# 1
# 121
# 12321
# 1234321
# 123454321

# num = int(input())
# for i in range(num+1):
#
#    for j in range(1,i+1):
#        print(j, end='' )
#
#    for k in range(1,i):
#        print(i-k, end='')
#
#    print('')



# ===========================================================================



# Задача 3 (Степик 17.01.2023)

# Делители-1
# На вход программе подается два натуральных числа a и b  (a<b ).
# Напишите программу, которая находит натуральное число
# из отрезка [a,b] с максимальной суммой делителей.
#
# На вход программе подаются два числа, каждое на отдельной строке.
#
# Программа должна вывести два числа на одной строке, разделенных пробелом:
#  число с максимальной суммой делителей и сумму его делителей.
#
# Если таких чисел несколько, то выведите наибольшее из них.
#
# def maxDivder(numArr):
#    a,b = numArr            # a=10 b=20
#
#    count = 0       # счётчик
#    maxSumm = 0     # макс. сумма
#    accumArr = [0, 0]   # итоговый массив
#
#    for i in range(a, b+1):
#
#        for j in range(1, b+1):
#
#            if (i % j == 0):
#                print(f'для {i} делитель {j}')
#
#                count +=1
#                maxSumm +=j
#
#        print(f'Для {i} count={count}, макс.сумм={maxSumm}')
#
#
#        if (count >= accumArr[0]) or (maxSumm >= accumArr[1]):
#            accumArr[0] = i
#            accumArr[1] = maxSumm
#
#
#        # обнулить: count,  maxsumm (чтоб с нуля считать другое число)
#        count = 0
#        maxSumm = 0
#
#
#
#        print('')
#
#    #print(accumArr)
#    print(f'{accumArr[0]} {accumArr[1]}')
#
# numArr = [int(input()) for i in range(2)]
# maxDivder(numArr)





# =============================================

# Задача 4 (Степик 18.01.2023)

# Делители-2

# На вход программе подается натуральное число n.
# Напишите программу, выводящую графическое изображение делимости чисел
# от 1 до n включительно.
#
#  В каждой строке надо напечатать очередное число и
# столько символов «+», сколько делителей у этого числа.
#
# Пример для числа 5:
# 1+
# 2++
# 3++
# 4+++
# 5++

# num = int(input())
#
# for i in range(1, num+1):
#
#    accum_plus = ''
#
#    for j in range(1,num+1):
#
#        if i % j == 0:
#            #print(f'Для {i} делитель {j}')
#            accum_plus +='+'
#    print(f'{i}{accum_plus}')
#
#    #print('')
#
# # ========== вариант 1
# for i in range(1, int(input())+1):
#     print(f'{i}{"+"*len([k for k in range(1, i + 1) if i % k == 0])}')



# =============================================














# отсюда -выкладывать на Степик по 1 шт в день  - чтоб перейти на экзамен в субботу

# =============================================

# Задача 5 (Степик 18.01.2023)
# Цифровой корень
#
# На вход программе подается натуральное число n .
# Напишите программу, которая находит цифровой корень данного
# числа.
# Цифровой корень числа   получается следующим образом:
# если сложить все цифры этого числа, затем все цифры найденной суммы и
# повторить этот процесс, то в результате будет получено однозначное
# число (цифра), которое и называется цифровым корнем данного числа.
#
# Пример:
# 192 = 1+9+2 = 12 = 1+2 = 3
# 26 = 2+6 = 8

# def digital_num(num_arr):
#    #print(num_arr, len(num_arr))
#
#    while len(num_arr) > 1:
#
#        summ = str(sum(num_arr))
#
#        # list(map(int,summ)) - строка -> в массив
#        # на лету изменяю массив на значения int из summ
#        num_arr = list(map(int, summ))
#
#    print(num_arr[0])
#
#
# num_arr = list(map(int, input()))
# digital_num(num_arr)



# =============================================

# Задача 6 (Степик 18.01.2023)

# Сумма факториалов
# Дано натуральное число n.
# Напишите программу, которая выводит
# значение суммы факториалов: 1! + 2! + 3! + ...+n!
#
# Факториалом натурального числа n называется
# произведение всех натуральных чисел от 1 до n:
#
# факториал для 5:
# 5! = 1х2х3х4х5 (120)

#
# n = int(input())
# summFctrl = 0

# for i in range(1, n+1):

#    fact = 1
#
#    for j in range(1, i+1):
#        print(f'{fact} x {j}')
#        fact *= j

#    print(f'Факториал для {i} = {fact}')
#
#    summFctrl += fact

# print(summFctrl)




# =============================================

# Задача 7 (Степик 18.01.2023)

# Простые числа
#
# На вход программе подается два натуральных числа a и b (a<b).
# Напишите программу, которая находит все простые числа от a до b включительно.
#
# Формат входных данных:
# На вход программе подаются два числа, каждое на отдельной строке.
#
# Формат выходных данных:
# Программа должна вывести все простые числа от   до   включительно, каждое на отдельной строке.
#
# Примечание. Число 1 простым не является

# def primeNum(num):
#    a,b = num
#
#    arr = []
#
#    for i in range(a, b+1):
#        count = 0
#        for j in range(2, i+1):
#
#            if i % j == 0:
#                count +=1
#        #print(f'Для {i} повторов: {count}')
#        if count == 1:
#            arr.append(i)
#
#
#    #print(f'Массив простых чисел {arr}') # доделать дома на печать циклом
#
#    for k in arr:
#        print(k)
#
#
# num = [int(input()) for i in range(2)]
# primeNum(num)


# ========Экзамен  8.1.================

# 8 шаг

# надо i=4, чтоб 'Python!' вывелось 7 раз
# i = 4
# while i <=10:
#     print('Python!')
#     i +=1

# 9 шаг
# Это поиск факториала
# n = int(input())
# res = 1
# i = 2
# while i <= n:
#     res *= i
#     i += 1
# print(res)

# 10 шаг
# Определите какую задачу решает следующий фрагмент кода:
# Ответ: выводит минимальный делитель числа, отличный от единицы
# n = int(input())
# i = 2
# while n % i != 0:
#     i += 1
# print(i)

# 11 шаг
# Cоберите программу, вычисляющую сумму цифр введенного натурального числа.

# n = int(input())
# total = 0
# while n!=0:
#     last_digit = n%10
#     total += last_digit
#
#     n //=10
# print(total)


# 12 шаг
# Соберите программу, вычисляющую количество цифр введенного натурального числа

# n = int(input())
 # counter = 0
 # while n> 0:
 #     counter += 1
 #     n//=10
 #
 # print(counter)

# =========== (8.2 )часть 2 экзмена =========

#                   Задача № 1

# Ревью кода - 7
# На обработку поступает натуральное число.
#  Нужно написать программу, которая выводит на экран сумму чётных цифр этого числа или 0, если чётных цифр в записи нет.
#  Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их может быть одна или несколько).
#  Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
#
# Примечание.
#  Обратите внимание, что требуется найти ошибки в имеющейся программе,
#  а не написать свою, возможно, использующую другой алгоритм решения.

# Исходный код:
    # n = input()
    # s = 0
    # while n > 10:
    #     if n % 2 == 1:
    #         s = n % 10
    #     n //= 10
    # print(s)


# мое решение:
# n = int(input())
# s = 0
# while n > 0:
#     j=n%10
#     if j % 2 == 0:
#         s += j
#     n //= 10
# print(s)


#                   Задача № 2

# Ревью кода - 8
# На обработку поступает последовательность из 8 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают (max = -10**12) 10^12 .
# Нужно написать программу, которая выводит на экран количество
 # делящихся нацело на 4 чисел в исходной последовательности
# и максимальное делящееся нацело на 4 число.
#
# Если делящихся нацело на 4 чисел нет, требуется на экран вывести «NO».
# Программист торопился и написал программу неправильно.
#
# Найдите все ошибки в этой программе (их может быть одна или несколько).
#  Известно, что каждая ошибка затрагивает только одну строку и может
 #  быть исправлена без изменения других строк.
#
# Примечание. Обратите внимание, что требуется найти ошибки в имеющейся программе,
# а не написать свою, возможно, использующую другой алгоритм решения.

# Исходный код:

        # n = 7
        # count = 0
        # maximum = 1000
        # for i in range(1, n + 1):
        #     x = int(input())
        #     if x // 4 == 0:
        #         count += 1
        #         if x < maximum:
        #             maximum = x
        # if count > 0:
        #     print(count)
        #     print(maximum)
        # else:
        #     print('NO')

#
# count = 0
# max = -10**12
# for i in range(8):
#
#     n = int(input())
#
#     if n % 4 == 0:
#         count +=1
#         if n>=max:
#             max = n
#
# if count == 0:
#     print('NO')
# else:
#     print(count)
#     print(max)



#                   Задача № 3

# Ревью кода - 9

# На обработку поступает последовательность из 4 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10**8

# Нужно написать программу, которая выводит на экран количество нечётных чисел
# в исходной последовательности и максимальное нечётное число.

#  Если нечётных чисел нет, требуется на экран вывести «NO».

#  Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их может быть одна или несколько).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание. Обратите внимание, что требуется найти ошибки в имеющейся программе,
#  а не написать свою, возможно, использующую другой алгоритм решения.

        # Исходный код:

        # n = 4
        # count = 0
        # maximum = 999
        # for i in range(1, n + 1):
        #     x = int(input())
        #     if x % 2 != 0:
        #         count += 1
        #         if x > maximum:
        #             maximum = i
        #             break
        # if count > 0:
        #     print(count)
        #     print(maximum)
        # else:
        #     print('NO')




# count = 0
# max = -10**8
#
# for i in range(4):
#     n = int(input())
#
#     if n % 2 != 0:
#         count +=1
#
#         if n >= max:
#             max = n
#
# if count == 0:
#     print('NO')
# else:
#     print(count)
#     print(max)




#                   Задача № 4

# Звездная рамка
#
# На вход программе подается натуральное число n.
#  Напишите программу, которая печатает звездную рамку размерами  n×19.
#
# Формат входных данных
# На вход программе подаётся натуральное число n∈[3;19] — высота звездной рамки.
#
# Формат выходных данных
# Программа должна вывести звездную рамку размерами n×19.
#
# Подсказка. Для печати звездной линии используйте умножение строки на число.


# Для 5:
# *******************
# *                 *
# *                 *
# *                 *
# *******************

# Для 3
#
# *******************
# *                 *
# *******************


# def numLine(num):
#
#     arr = []
#     for i in range(1, int(num)+1):
#         arr.append(int(i))
#
#     # print(arr)
#     # print(type(arr[0]))
#     #print(f'Последнее число массива: {arr[len(arr)-1]}')
#
#     for j in arr:
#         #print(j) # для 4 - это 1 2 3 4
#         if (j==1) or (j== arr[len(arr)-1]):
#             print('*'*19)
#         else:
#             print(f'{"*"}{" "*17}{"*"}')
#
# num = input()
# numLine(num)

    # Другое решение 1
    #
    # [[print(('*'*19, '*'+' '*17+'*')[0<i<s-1]) for i in range(s)] for s in [int(input())]]
    #
    # Другое решение 2
    #
    # print('*'*19)
    # [print('*'+' '*17+'*') for _ in range(int(input()) - 2)]
    # print('*'*19)


#                   Задача № 5

# Третья цифра

# Дано натуральное число n (n>99).
#  Напишите программу, которая определяет его третью (с начала) цифру.

# Формат входных данных
# На вход программе подается одно натуральное число, состоящее как минимум из трех цифр.

# Формат выходных данных
# Программа должна вывести его третью (с начала) цифру.


# def threeNumber(num):
#     print(num[2])
#
# num = input()
# threeNumber(num)


#                   Задача № 6

# Все вместе 2
#
# Дано натуральное число (т.е. > 0).  Напишите программу, которая вычисляет:
#
#  - количество цифр 3 в нем;
#  - сколько раз в нем встречается последняя цифра;
#  - количество четных цифр;
#  - сумму его цифр, больших пяти;
#  - произведение цифр, больших семи
#  (если цифр больших семи нет, то вывести 1, если такая цифра одна, то вывести ее);
#  - сколько раз в нем встречается цифры 0 и 5 (всего суммарно).
#
# Формат входных данных
# На вход программе подается одно натуральное число.
#
# Формат выходных данных
# Программа должна вывести значения указанных величин в указанном порядке


# arr = list(map(int,input()))
# #print(arr) # на выходе массив, созданный из строки
#
# countThree = 0
# lastNumber = 0
# countEven = 0
# summMore5 = 0
# multiMore7 = 1
# count05 = 0
#
# for i in arr:
#
#     # считаем в числе  кол-во цифр 3
#     if i == 3:
#         countThree +=1
#
#     # считаем в числе  кол-во последней цифры
#     if i == arr[len(arr)-1]:
#         lastNumber +=1
#
#     # кол-во четных
#     if i % 2 == 0:
#         countEven +=1
#
#     # если цифра больше 5, то суммировать:
#     if i > 5:
#         summMore5 +=i
#
#     # произведение цифр, больше 7-ки
#     if i > 7:
#         multiMore7 *=i
#
#     # счётчик цифр от 0 до 5
#     if i == 5 or i == 0:
#         count05 +=1
#
#
# # итоги:
# print(countThree)
# print(lastNumber)
# print(countEven)
# print(summMore5)
#
# if multiMore7 == 1:
#     print(1)
# else:
#     print(multiMore7)
#
# print(count05)


#                   Задача № 6

# Числа Рамануджана
#
# Сриниваса Рамануджан – индийский математик, славившийся своей интуицией в области чисел.
#  Когда английский математик Годфри Харди навестил его однажды в больнице, он обмолвился,
#  что номером такси, на котором он приехал, было 1729, такое скучное и заурядное число.
#
#  На что Рамануджан ответил: " Нет, нет! Это очень интересное число.
# Это наименьшее число, выражаемое как сумма двух кубов двумя разными способами "
#
#  Другими словами: 1729 =1^3 +12^3 = 9^3 + 10^3
#
# Напишите программу, которая находит аналогичные интересные числа.
#  В ответе запишите первые 5 чисел в порядке возрастания, включая число 1729.

# Решение:

# for i in range(1, 50):
#     for j in range(i + 1, 50):
#         for k in range(j, 50):
#             for l in range(k + 1, 50):
#                 n = i ** 3 + l ** 3
#                 m = j ** 3 + k ** 3
#                 if m == n and i != j != l and i != k != l:
#                     print(m)

# 1729
# 4104
# 13832
# 20683
# 32832

# https://oeis.org/A001235/list



# ===============================================
# ========= 9.1 Индексация  ======================
# ===============================================

#  ~~~~~~~~~~~~~~~~~~  задача 2.(22/01/2023, 7:34)  ~~~~~~~~~~~~~~~~~~
#
# Дополните приведенный код, используя индексатор, так чтобы он вывел символ w
#
#  Исходный код:
#
#         s = "In 2010, someone paid 10k Bitcoin for two pizzas."
#
#         print(s[])

# "Усложняю" решение:

# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
#
# find_s = s.find('w')
#
# print(s[find_s])


#  ~~~~~~~~~~~~~~~~~~  задача 3.(23/01/2023, 7:34)  ~~~~~~~~~~~~~~~~~~

# На вход программе подается одна строка.
#  Напишите программу, которая выводит элементы строки с индексами 0, 2, 4, ... в столбик.
#
# Пример: abcdefghijklmnop
# Вывод:
# a
# c
# e
# g
# i
# k
# m
# o

# Решение:

# s = input()
#
# for i, el in enumerate(s):
#     if i%2==0:
#         print( el)
#
# # решения других 1 :
#
# n = str(input())
# for i in range(0, len(n), 2):
#     print(n[i])
#
# # решения других 2 :
#
# [print(i) for i in input()[::2]]



# ~~~~~~~~ ЗАДАЧА № 8 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# В столбик 2

# На вход программе подается одна строка.
# Напишите программу, которая выводит в столбик элементы строки в обратном порядке.

# ввод: Привет!
# вывод:
# !
# т
# е
# в
# и
# р
# П


# Решение моё:

# string = list(input())
# rev_str = string[::-1]
# for i in rev_str:
#    print(i)
#

# Решение со Степик:
# print(*input()[::-1], sep='\n')






# ~~~~~~~~ ЗАДАЧА № 9 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# ФИО

# На вход программе подаются три строки: имя, фамилия и отчество.
# Напишите программу, которая выводит инициалы человека

# Пример: Тимур Иванов  Егорович ==> ИТЕ

# fio = [input() for i in range(3)]
#
# # == вариант 1 ==
#
# print(f'{fio[0][0]}{fio[1][0]}{fio[2][0]}')
#
# # === вариант 2 ===
#
# a,b,d = fio
# print(f'{b[:1]}{a[:1]}{d[:1]}')


#~~~~~~~~ ЗАДАЧА № 10 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# Цифра 1
# На вход программе подается одна строка состоящая из цифр.
# Напишите программу, которая считает сумму цифр данной строки
#  На входе: 7777777777
#  На выходе: 70

# dgtl = list(map(int,input()))
#
# print(sum(dgtl))



# ~~~~~~~~ ЗАДАЧА № 11 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# Цифра 2
# На вход программе подается одна строка.
# Напишите программу, которая выводит сообщение
# «Цифра» (без кавычек), если строка содержит цифру.
# В противном случае вывести сообщение «Цифр нет» (без кавычек).

# Пример: Hi 17 Python --> Цифра // Hi Python --> Цифр нет

# d = input()
# #print(d, len(d))
#
# for i in range(len(d)):
#    #print(i, d[i], type(d[i]) )
#    if  d[i].isdigit():
#        print('Цифра')
#        break
#
# else:
#    print('Цифр нет')
#
#
# решение № 2  (подсмотено:  на пересечение множеств входного и множества цифр )
#
# print( 'Цифра' if set(input()).intersection('0123456789') else 'Цифр нет')








# ~~~~~~~~ ЗАДАЧА № 12 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# Сколько раз?
# На вход программе подается одна строка.
# Напишите программу, которая определяет сколько раз в
# строке встречаются символы + и *
#
# Пример:
# bcd+a++++**31415
#
# Символ + встречается 5 раз
# Символ * встречается 2 раз



# strg = input()
#
# plus = 0
# star = 0
#
# for i in range(len(strg)):
#    if strg[i] == '+':
#        plus += 1
#    if strg[i] == '*':
#        star += 1
#
# print(f'Символ + встречается {plus} раз')
# print(f'Символ * встречается {star} раз')
#
#
#
# #Другое решение:
#
# x = input()
# print(f"Символ + встречается {x.count('+')} раз")
# print(f"Символ * встречается {x.count('*')} раз")



# ~~~~~~~~ ЗАДАЧА № 8 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# В столбик 2
# На вход программе подается одна строка.
# Напишите программу, которая выводит в столбик элементы строки в обратном порядке.

# Решение:

# string = list(input())
# rev_str = string[::-1]
# for i in rev_str:
#    print(i)

# ввод: Привет!
# вывод:
# !
# т
# е
# в
# и
# р
# П




# ~~~~~~~~ ЗАДАЧА № 9 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# ФИО
# На вход программе подаются три строки: имя, фамилия и отчество.
# Напишите программу, которая выводит инициалы человека

# Пример: Иванов Тимур Егорович ==> ИТЕ

# fio = [input() for i in range(3)]
#
# # == вариант 1 ==
#
# print(f'{fio[0][0]}{fio[1][0]}{fio[2][0]}')
#
# # === вариант 2 ===
#
# a,b,d = fio
# print(f'{a[:1]} {b[:1]} {d[:1]}')




 # ~~~~~~~~ ЗАДАЧА № 10 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# Цифра 1
# На вход программе подается одна строка состоящая из цифр.
# Напишите программу, которая считает сумму цифр данной строки
#  На входе: 7777777777
#  На выходе: 70

# dgtl = list(map(int,input()))
#
# print(sum(dgtl))




# ~~~~~~~~ ЗАДАЧА № 11 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# Цифра 2
# На вход программе подается одна строка.
# Напишите программу, которая выводит сообщение
# «Цифра» (без кавычек), если строка содержит цифру.
# В противном случае вывести сообщение «Цифр нет» (без кавычек).

# Пример: Hi 17 Python --> Цифра // Hi Python --> Цифр нет

# d = input()
# #print(d, len(d))
#
# for i in range(len(d)):
#    #print(i, d[i], type(d[i]) )
#    if  d[i].isdigit():
#        print('Цифра')
#        break

# else:
#    print('Цифр нет')


# ~~~~~~~~ ЗАДАЧА № 12 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~

# Сколько раз?
# На вход программе подается одна строка.
# Напишите программу, которая определяет сколько раз в
# строке встречаются символы + и *
#
# Пример:
# bcd+a++++**31415
#
# Символ + встречается 5 раз
# Символ * встречается 2 раз

# strg = input()
#
# plus = 0
# star = 0
#
# for i in range(len(strg)):
#    if strg[i] == '+':
#        plus += 1
#    if strg[i] == '*':
#        star += 1
#
# print(f'Символ + встречается {plus} раз')
# print(f'Символ * встречается {star} раз')



# ~~~~~~~~ ЗАДАЧА № 13 (9.1. Индексация ) ~~~~~~~~~~~~~~~~~
#
# Одинаковые соседи
# На вход программе подается одна строка.
# Напишите программу, которая определяет сколько в
# ней одинаковых соседних символов .
#
# Пример:
# aaaabbccd --> 5


# st = list(input())
# #st.append(' ')
# print(st, len(st) ) # asff --> ['a', 's', 'f', 'f' ]  4
#
# count = 0
# idx = 0
#
# while idx < len(st)-1:
#    if st[idx] == st[idx+1]:
#        count +=1
#    idx +=1
# print(count)
#
#
#
#
# # ==== вариант 1 (через цикл for) =============
#
# st = list(input())
# count = 0
# for i in range(0, len(st)-1):
#    if st[i] == st[i + 1]:
#        count +=1
#
# print(count)

# ==== вариант 2 ( Решение при помощи генератора словарей) =============

# s = input()
# d = {c: s.count(c) for c in s}
# print(sum(d.values()) - len(d))




#  ~~~~~~~~~~~~~~~~~~  задача 14.(23/01/2023, 7:34)  ~~~~~~~~~~~~~~~~~~

# Гласные и согласные
# На вход программе подается одна строка с буквами русского языка.
#  Напишите программу, которая определяет количество гласных и согласных букв.
#
# Формат входных данных
# На вход программе подается одна строка.
#
# Формат выходных данных
# Программа должна вывести количество гласных и согласных букв.
#
# Примечание. В русском языке
#  10 гласных букв vowel (а, у, о, ы, и, э, я, ю, ё, е) и
#  21 согласная буква consonant (б, в, г, д, ж, з, й, к, л, м, н, п, р, с, т, ф, х, ц, ч, ш, щ).

# def calcChar(string):
#
#
#     vowel = ['а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е']
#     consonant = ['б', 'в', 'г', 'д', 'ж', 'з', 'й', 'к', 'л', 'м', 'н', 'п', 'р', 'с', 'т', 'ф', 'х', 'ц', 'ч', 'ш', 'щ']
#
#     count_vowel = 0
#     count_consonant = 0
#
#     for i in string:
#         for j in vowel:
#             if i.lower() == j:
#                 count_vowel +=1
#
#     print(f'Количество гласных букв равно {count_vowel}')
#
#     for i in string:
#         for j in consonant:
#             if i.lower() == j:
#                 count_consonant += 1
#
#     print(f'Количество согласных букв равно {count_consonant}')
#
# string = list(map(str,input()))
# calcChar(string)




#  ~~~~~~~~~~~~~~~~~~  задача 14.(23/01/2023, 7:34)  ~~~~~~~~~~~~~~~~~~

# Decimal to Binary
# На вход программе подается натуральное число, записанное в десятичной системе счисления.
#  Напишите программу, которая переводит данное число в двоичную систему счисления.
#
# Формат входных данных
# На вход программе подается одно натуральное число.
#
# Формат выходных данных
# Программа должна вывести число записанное в двоичной системе счисления.

# Пример:  5 ---> 101
#         128 --> 10000000
#         573647 --> 10001100000011001111
#
#
# def decimalToBinary(num):
#
#     binary = ''
#
#     while num > 0:
#
#         binary = str(num % 2)+binary
#         num = num//2
#
#     print(binary)
#
# num = int(input())
# decimalToBinary(num)




#===================================================
#=====                   9.2 Срезы  ================
#===================================================

# s = 'abcdefg'
# print(s[2:5])
#
# s = 'abcdefg'
# print(s[3:])
#
# s = 'abcdefg'
# print(s[:3])
#
# s = 'abcdefg'
# print(s[:])
#
# s = 'abcdefg'
# print(s[::-3])

# ПАЛИНДРОМ
# s = input()
# p = s[::-1]
# if s==p:
#     print('YES')
# else:
#     print('NO')



# ~~~  ЗАДАЧА № 7 (из главы 9.2. stepik )   ~~~~~~~~~~~

# Дополните приведенный код, используя срезы,
# так чтобы он вывел первые 12 символов строки s .

# s = input()
# print(s[0:12:1])


# ~~~~~~~~~~~~~~  ЗАДАЧА № 8    ~~~~~~~~~~~~~~~~~~~~
# https://stepik.org/lesson/302627/step/8

# Дополните приведенный код, используя срезы,
# так чтобы он вывел последние 9 символов строки s .

       # Пример:
       # 123456789АБВГДЕ 789АБВГДЕ

# s = input()
# print(s[-9:])



# ~~~~~~~~~~~~~~  ЗАДАЧА № 9    ~~~~~~~~~~~~~~~~~~~~

# Дополните приведенный код, используя срезы,
# так чтобы он вывел каждый 7 символ строки s  начиная от начала строки.

# Пример:
# 0123456789
# abcdefgHabcdefgHabcdefgHabcdefgH ---- на выходе ---> gfed
#       ^      ^      ^      ^
#       7      7      7      7

# s = input()
# print(s[6::7])



# ~~~~~~~~~~~~~~  ЗАДАЧА № 10    ~~~~~~~~~~~~~~~~~~~~

# Дополните приведенный код, используя срезы,
# так чтобы он вывел строку  s  в обратном порядке

# Пример:
# 123456789ABCDE$     ---- на выходе --->     $EDCBA987654321

# s = input()
# print(s[::-1])



# ~~~~~~~~~~~~~~  ЗАДАЧА № 11    ~~~~~~~~~~~~~~~~~~~~

# Палиндром
# На вход программе подается одно слово, записанное в нижнем регистре.
# Напишите программу, которая определяет является ли оно палиндромом.
#
# Пример:
# потоп ----- на выходе ---> YES
# анекдот --- на выходе ---> NO

# s = input()
# polindrom = s[::-1]
#
# if polindrom == s:
#     print('YES')
# else:
#     print('NO')





# ~~~~~~~~~~~~~~  ЗАДАЧА № 12    ~~~~~~~~~~~~~~~~~~~~

# На вход программе подается одна строка. Напишите программу, которая выводит:
# 1. общее количество символов в строке;
# 2. исходную строку повторенную 3 раза;
# 3. первый символ строки;
# 4. первые три символа строки;
# 5. последние три символа строки;
# 6. строку в обратном порядке;
# 7. строку с удаленным первым и последним символом.
#
# Пример:
# 1. на входе: abcdefghijklmnopqrstuvwxyz
# 2. на выходе:
#             26
#             abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
#             a
#             abc
#             xyz
#             zyxwvutsrqponmlkjihgfedcba
#             bcdefghijklmnopqrstuvwxy


# 1. общее количество символов в строке
# s = input()
# print( len(s[0::1]) )
#
# # 2. исходную строку повторенную 3 раза
# print( (s[::])*3 )
#
# # 3. первый символ строки
# print( (s[0:1:]) )
#
# # 4. первые три символа строки
# print( (s[0:3:]) )
#
# # 5. последние три символа строки
# #print( (s[-1:-4:-1]) ) # реверс последних трех :)
# print( (s[-3::]) )
#
# # 6. строку в обратном порядке
# print( (s[::-1]) )
#
# # 7. строку с удаленным первым и последним символом
#
# print( (s[1:-1:]) )


# ~~~~~~~~~~~~~~  ЗАДАЧА № 13  ~~~~~~~~~~~~~~~~~~~~

# Делаем срезы 2
# На вход программе подается одна строка.
#
# Напишите программу, которая выводит:
#
# 1. третий символ этой строки;
# 2. предпоследний символ этой строки;
# 3. первые пять символов этой строки;
# 4. всю строку, кроме последних двух символов;
# 5. все символы с четными индексами;
# 6. все символы с нечетными индексами;
# 7. все символы в обратном порядке;
# 8. все символы строки через один в обратном порядке, начиная с последнего.

# Пример:
#     На входе:
#     abcdefghijklmnopqrstuvwxyz
#
#     На выходе:
#                 c
#                 y
#                 abcde
#                 abcdefghijklmnopqrstuvwx
#                 acegikmoqsuwy
#                 bdfhjlnprtvxz
#                 zyxwvutsrqponmlkjihgfedcba
#                 zxvtrpnljhfdb

# # 1. третий символ этой строки
# s = input()
# print( s[2:3:] )
#
# # 2. предпоследний символ этой строки
# print( s[-2:-1:] )
#
# # 3. первые пять символов этой строки
# print( s[:5:] )
#
# # 4. всю строку, кроме последних двух символов
# print( s[0:-2:] )
#
# # 5. все символы с четными индексами
# print( s[::2] )
#
# # 6. все символы с нечетными индексами
# print( s[1::2] )
#
# # 7. все символы в обратном порядке
# print( s[::-1] )
#
# # 8. все символы строки через один в обратном порядке, начиная с последнего.
# b = s[::-1]
# print(b[::2])



# ~~~~~~~~~~~~~~  ЗАДАЧА № 14  ~~~~~~~~~~~~~~~~~~~~

# Две половинки
# На вход программе подается строка текста.
# Напишите программу, которая разрежет ее на две
# равные части, переставит их местами и выведет на экран.
#
# Примечание.
# Если длина строки нечетная, то
# длина первой части должна быть на один символ больше.

# st = input()            # abcdef (чётное), или:  abcdefg (НЕчётное),
#
# half = int(len(st)/2)    # 3
# length = len(st)         # 6 (чётное)

# print(st[0:half])        # abc (при четной длине строки)
# print(st[half:])         # def (при четной длине строки)
#
# print(st[0:half+1])      # abcd (при четной длине строки)
# print(st[half+1:])       # efg (при четной длине строки)


# if len(st) % 2 == 0:
#     print(f'{st[half:]}{st[0:half]}')       # defabc
#
# else:
#     print(f'{st[half+1:]}{st[0:half+1]}')   # efgabcd







# ====================================================
# ====== глава 9.3. Методы строк. Часть 1  ===========
# ====================================================


# s = 'i Learn Python language'
# print(s.capitalize())
# I learn python language
#
#
#
# s = 'i LEARN Python LAnguaGE'
# print(s.lower())
# i learn python language
#
#
# s = '$12344%^$#@!'
# print(s.lower())
# $12344%^$#@!
#
#
# s1 = 'a'
# s2 = s1.upper()
# print(s1, s2)
# a A
#
#
# s = 'i LEARN Python LAnguaGE'
# print(s.upper())
# I LEARN PYTHON LANGUAGE
#
#
# s = 'i LEARN Python LAnguaGE'
# print(s.swapcase())
# I learn pYTHON laNGUAge
#


# ~~~~~~~~~~~~~~~~~~   ЗАДАЧА 8 ~~~~~~~~~~~~~~~~~~~~~~~

# Заглавные буквы

# На вход программе подается строка состоящая из имени и фамилии человека, разделенных одним пробелом.
#  Напишите программу, которая проверяет, что имя и фамилия начинаются с заглавной буквы.
#
# Формат входных данных
# На вход программе подается строка.
#
# Формат выходных данных
# Программа должна вывести «YES» если имя и фамилия начинаются с заглавной буквы и «NO» в противном случае.
#
# Примечание. Строка содержит только буквы.

#Решение для двух отдельных слов

# arr = list(input() for i in range(2))
# print('YES' if arr[0].title() == arr[0] and arr[1].title() == arr[1] else "NO")

#Решение для строки из 2-х слов

# arr =  list(map(str, input().split()))
# print('YES' if arr[0].title() == arr[0] and arr[1].title() == arr[1] else "NO")


#Решение в одну сроку

# print(('NO', 'YES')[(a:=input()) == a.title()])



# ~~~~~~~~~~~~~~~~~~   ЗАДАЧА 9 ~~~~~~~~~~~~~~~~~~~~~~~

# sWAP cASE
#
# На вход программе подается строка.
#  Напишите программу, которая меняет регистр символов,
#  другими словами замените все строчные символы заглавными и наоборот.

# Пример:
#
# Www.sTepik.com ---> wWW.StEPIK.COM
# Swap Case      ---> sWAP cASE
#
# s = input()
# print(s.swapcase())



# ~~~~~~~~~~~~~~~~~~   ЗАДАЧА 10 ~~~~~~~~~~~~~~~~~~~~~~

# Хороший оттенок
# На вход программе подается строка текста.
#  Напишите программу, которая определяет является ли оттенок текста хорошим или нет.
#  Текст имеет хороший оттенок, если содержит подстроку «хорош» во всевозможных регистрах.
#
# Формат входных данных :
# На вход программе подается строка текста.
#
# Формат выходных данных :
# Программа должна вывести «YES» если текст имеет хороший оттенок и «NO» в противном случае.
#
# Примечание:
#  Текст содержащий хорош, ХОРОШ, Хорош, хОРОШ и т.д. имеет хороший оттенок.

# Пример:
# оыралоывало хоРОШ выарлво83кг834  ---> YES
# оыварлоыврдоыфвлоыв              ---> NO

# def bestText(arrStr):
#     for i in arrStr:
#         if "хорош" in i.lower():
#             print("YES")
#             break
#     else:
#         print('NO')
#
# arrStr = list( map(str, input().split() ) )
# bestText(arrStr)


# короткое решение:

# print("YES" if "хорош" in input().lower() else "NO")



# ~~~~~~~~~~~~~~~~~~   ЗАДАЧА 11 ~~~~~~~~~~~~~~~~~~~~~~

# Нижний регистр
# На вход программе подается строка.
#  Напишите программу, которая подсчитывает количество буквенных символов в нижнем регистре.

# arr = list(input())
# count = 0
# for i in arr:
#     if i == i.lower() and not i.isdigit():
#         count +=1
# print(count)

#Решение в 1 строку:
# print(len([i for i in input() if i.islower()]))











 # ================================================
 # ============= 9.4. МЕТОДЫ СТРОК. ЧАСТЬ 2 =======
 # ================================================


 # ~~~~~~~~ задача 8 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 # Количество слов
 # На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом.
 # Напишите программу, которая подсчитывает количество слов в ней.

 # Пример:
 # In 2010, someone paid 10k Bitcoin for two pizzas. -- (на выходе)---> 9

 # Ход решения:
 # считаю по пробелам: кол-во пробелов между слов +1

 # 1й вариант решения

 # st =  input()
 # s = st.count(' ')
 # print( s+1 )


 # 2й вариант решения (длина массива)

# arrSt = input().split(' ')  # Разбивка на элементы массива / Списка
# print(len(arrSt))






 # ~~~~~~~~ задача 9 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 # Минутка генетики

 # На вход программе подается строка генетического кода,
 # состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин).

 # Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина
 # входит в данную строку генетического кода.

 # Формат входных данных:
 # На вход программе подается строка генетического кода,
 # состоящая из символов А, Г, Ц, Т, а, г, ц, т.

 # Формат выходных данных:
 # Программа должна вывести сколько гуанина, тимина, цитозина, аденина
 # входит в данную строку генетического кода.

 # Примечание:
 # Строка не содержит символов, кроме как А, Г, Ц, Т, а, г, ц, т.

 # Пример:

 # АааГГЦЦцТТттт
 #                 Аденин: 3
 #                 Гуанин: 2
 #                 Цитозин: 3
 #                 Тимин: 5

 # dna = input()
 # print(f'Аденин: {dna.upper().count("А")}')
 # print(f'Гуанин: {dna.upper().count("Г")}')
 # print(f'Цитозин: {dna.upper().count("Ц")}')
 # print(f'Тимин: {dna.upper().count("Т")}')


 # вариант 2 (пробую словарь dic dict dictionary, наращивание значений)

 # dna = input()
 # dic = {}
 #
 # for i in dna:
 #     i = i.upper()
 #     if i not in dic:
 #         dic[i] = 1
 #     else:
 #         dic[i] += 1
 #
 # print(dic)  # {'А': 3, 'Г': 2, 'Ц': 3, 'Т': 5}
 #
 # print(f'Аденин: {dic["А"]}')
 # print(f'Гуанин: {dic["Г"]}')
 # print(f'Цитозин: {dic["Ц"]}')
 # print(f'Тимин: {dic["Т"]}')


 # ~~~~~~~~ задача 10 из 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 # Очень странные дела
 #
 # Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди.
 # На приемник ему поступает  различных последовательностей кода Морзе.
 # Декодировав их, он получает последовательности из цифр и строчного латинского
 # алфавита, при этом во всех сообщениях Оди содержится число 11,
 # причем минимум 3 раза.
 #
 # Помогите определить Джиму количество сообщений от Оди.
 #
 # Формат входных данных:
 # В первой строке подаётся число   – количество сообщений, в последующих   строках вводятся строки,
 # содержащие латинские строчные буквы и цифры.
 #
 # Формат выходных данных:
 # Программа должна вывести количество строк в которых содержится число 11
 # минимум 3 раза.
 #
 # Примечание:
 # Числа 11 необязательно должны быть разделены другими символами, нужно подсчитать
 # вхождение последовательности символов "11", т.е. например в строке "111"
 # содержится одна такая последовательность, в то время как в "1111" их уже две.




 #  (-->2) ф-ция создания посимвольного массива
 # def addList(num):
 #     accum = 0  # тотальный счетчик вхождений "11"
 #
 #     for i in range(num):  # цикл ввода и решения по условию
 #         string = input()  # ввод
 #         count11 = string.count('11')  # счет по условию '11'
 #         if count11 >= 3:  # если кол-во вхождений >3,
 #             accum += 1  # тотальный счетчик +1
 #
 #     print(accum)
 #
 #
 # # 1. ввод кол-ва строк
 # num = int(input())  # 2
 #
 # # 2. вызов ф-ции создания посимвольного массива
 # newArr = addList(num)






 # ~~~~~~~~ задача 11 из 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 # Количество цифр

 # На вход программе подается строка текста.
 # Напишите программу, которая подсчитывает количество цифр в данной строке.
 #
 # Формат входных данных На вход программе подается строка текста.
 # Формат выходных данных Программа должна вывести количество цифр в данной строке.

 # string = list(input())  # создание массива посимвольно
 #
 # count = len(string)
 #
 # for i in string:
 #     if i not in ('1234567890'):
 #         count -= 1
 #
 # print(count)




 # ~~~~~~~~ задача 12 из 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 # .com or .ru
 #
 # На вход программе подается строка текста.
 # Напишите программу, которая проверяет, что строка
 # заканчивается подстрокой  .com  или  .ru .
 #
 # Формат входных данных: На вход программе подается строка текста.
 #
 # Формат выходных данных:
 # Программа должна вывести «YES» если введенная строка
 # заканчивается подстрокой  .com  или  .ru  и «NO» в противном случае.
 #
 # Пример:
 # www.stepik.org  ====>  NO
 # www.google.com  ====>  YES
 # dsdas.com.ru    ====>  YES
# web = input()
#
# if web.endswith('.com') or web.endswith('.ru'):
#     print('YES')
# else:
#     print('NO')


# вариант решения:
#
# print( ('NO', 'YES')[ input()
#                      .endswith(('.com', '.ru')) ] )

 # ~~~~~~~~ задача 13 из 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 # Самый частотный символ
 # На вход программе подается строка текста.
 # Напишите прогу, которая выводит на экран символ, появляющийся наиболее часто.
 #
 # Формат входных данных:
 # На вход программе подается строка текста.
 # Текст может содержать строчные и заглавные буквы английского и
 # русского алфавита, а также цифры.
 #
 # Формат выходных данных:
 # Программа должна вывести символ, который появляется наиболее часто.
 #
 # Примечание 1.
 # Если таких символов несколько, следует вывести последний по порядку символ.
 #
 # Примечание 2.
 # Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.



# st = input()
#
# maxEl = 0
# bigEl = ''
# symbol = 'АасприветПонН1AabcdefghHijklmnopqrstuvwxyz'
#
# for i in symbol:
#     count = 0
#
#     for j in st:
#         if i == j:
#             count +=1
#
#     if count >=maxEl:
#         maxEl = count
#         bigEl = i
# #print(f'Самый частый {bigEl}, {maxEl} раза')
#
# print(bigEl)


# Доп. решение 1:
# в функции max есть дополнительный аргумент key,
#  в который можно передать функцию чтобы она вычислила число,
#  на основе которого будет решено что больше

# s = input()
# print(max(s[::-1], key=s.count))

# Доп. решение 2:

# n, a, b = input(), 0, 0
# for i in n:
#     if n.count(i) >= a:
#         a = n.count(i)
#         b = i
# print(b)


 # ~~~~~~~~ задача 14 из 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Первое и последнее вхождение

# На вход программе подается строка текста.
#  Если в этой строке буква «f» встречается только один раз, выведите её индекс.
#  Если она встречается два и более раз, выведите индекс её первого и последнего
#  вхождения на одной строке, разделенных символом пробела. Если буква «f» в
#  данной строке не встречается, следует вывести «NO».

# Формат входных данных :
# На вход программе подается строка текста.

# Формат выходных данных :
# Программа должна вывести текст в соответствии с условием задачи.

# Пример:
# fffffffffffffff ---> 0  14
# afafafafafafafa ---> 1  13 ...

# st = input()
# first = st.find('f')
# lost = st.rfind('f')
#
# if first == lost and first !=-1:
#     print(first)
# elif first >=0 and lost>=0:
#     print(f'{first} {lost}')
# else:
#     print('NO')


 # ~~~~~~~~ задача 15 из 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Удаление фрагмента
#
# На вход программе подается строка текста, в которой буква «h» встречается минимум два раза.
#  Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h»,
#  а также все символы, находящиеся между ними.
#
# Формат входных данных :
# На вход программе подается строка текста.
#
# Формат выходных данных:
# Программа должна вывести текст в соответствии с условием задачи.
#
# Пример:
# In the hole in the ground there lived a hobbit ---> In tobbit
# haaaaaaaaaaaaaaaaaah ---> пусто


# st = input()            # ahahahahaha
# first = st.find('h')    # 1
# lost = st.rfind('h')    # 9
#
# st = st[:first] + st[lost+1:]
# print(st)


# ==============================================
# =========  9.5 Методы строк. Часть 3 ==========
# ==============================================



# ==============================================
# =========  9.6 Методы строк. Часть 3 ==========
# ==============================================


#~~~~~~~~~~~ задача на код № 4 ~~~~~~~~~~~

# Символы в диапазоне

# На вход программе подаются два числа a и b.
#  Напишите программу, которая для каждого кодового значения в диапазоне от a до b (включительно),
#  выводит соответствующий ему символ из таблицы символов Unicode.

# Пример (  функция  chr(65) ):

# 65
# 70
# Вывод: A B C D E F

# arr =  [int(input()) for i in range(2)]
# a,b = arr
#
# for i in range(a, b+1, 1):
#     print(chr(i), end=' ')
#
# Вариант решения №1 :
# print( *map(chr, range(int(input()), int(input())+1)) )
#
# Вариант решения №2 :
# (lambda x,y: [print(chr(i), end = ' ') for i in range(x, y+1) ])(int(input()), int(input()))



#~~~~~~~~~~~ задача на код № 5 ~~~~~~~~~~~

# Простой шифр
# На вход программе подается строка текста.
#  Напишите программу, которая переводит каждый ее символ в
#  соответствующий ему код из таблицы символов Unicode.


# Пример (пример  ord ('A')) :
# Hello world! --- >  72 101 108 108 111 32 119 111 114 108 100 33

# string = input()
#
# for i in string:
#     print(ord(i), end = ' ')

#~~~~~~~~~~~ задача на код № 6 ~~~~~~~~~~~


# Шифр Цезаря
#
# Легион Цезаря, созданный в 23 веке на основе Римской Империи
#  не изменяет древним традициям и использует шифр Цезаря.
#  Это их и подвело, ведь данный шифр очень простой.
#  Однако в постапокалипсисе люди плохо знают все тонкости довоенного мира,
#  поэтому ученые из НКР не могут понять как именно нужно декодировать данные
#  сообщения. Напишите программу для декодирования этого шифра.
#
#
# Формат входных данных:
# В первой строке дается число n (1 <= n <= 25) сдвиг,
#  во второй строке даётся закодированное сообщение в виде строки со строчными латинскими буквами.
#
# Формат выходных данных:
# Программа должна вывести одну строку -- декодированное сообщение.
#  Обратите внимание, что нужно декодировать сообщение, а не закодировать.
#
            # Пример:

            # 1
            # bwfusvfupdbftbs
            # Ответ: avetruetocaesar

# вариант 1

# def caesar(num, st):
#      accumSt = ''
#
#      for i in st:
#          iEl = -num + ord(i)  # -1 + 98
#
#          # проверка диапазона iEl (д.б. между 97 'a'... 122 'z')
#          if 97 <= iEl <= 122:
#              accumSt += chr(iEl)  # 98 это a
#
#          # иначе: расчет сколько уже сминусил до 97, чтоб остаток начать минусить от 122
#          else:
#              reNum = num - (ord(i) - 96)
#              iEl = -reNum + ord('z')
#              accumSt += chr(iEl)
#
#      print(accumSt)
#
#
# num = int(input())
# st = input()
#
# caesar(num, st)


# Экзамен

# Задача 7:
 # Каждый третий
 # # На вход программе подается строка текста.
 # #  Напишите программу, которая удаляет из нее все символы
 # #  с индексами кратными 3, то есть символы с индексами 0, 3, 6, ....
 # #
 # #  Пример:
 # # Python ---> yton
 # # Hello  ---> elo

# st = input()
# newSt=''
# for i, el in enumerate(st):
#
#     if i % 3 != 0:
#         newSt +=el
#
# print(newSt)


# Задача 8:
# Замени меня полностью
# На вход программе подается строка текста.
#  Напишите программу, которая заменяет все вхождения цифры 1 на слово «one».

# text = input()
#
# newText = text.replace('1', 'one')
# print(newText)


# Задача 9:
# Удали меня полностью
# На вход программе подается строка текста.
#  Напишите программу, которая удаляет все вхождения символа «@».

# st = input()
# newSt=''
#
# for i, el in enumerate(st):
#
#     if el !='@':
#         newSt +=el
#
# print(newSt)

# Задача 10:
# Второе вхождение
# На вход программе подается строка текста.
# Напишите программу, которая выводит индекс второго вхождения буквы «f».
# Если буква «f» встречается только один раз, выведите число -1,
# а если не встречается ни разу, выведите число -2.

# text = input()
#
# count = 0
#
# for i, el in enumerate(text):
#
#     if el == 'f':
#         count +=1
#         if count == 2:
#             print(i)
#             break
#
# if count == 1:
#     print('-1')
# elif count == 0:
#     print('-2')


# Иное решение 1:

# s = input()
# if 'f' not in s:
#     print('-2')
# else:
#     print(s.find('f', s.find('f')+1))

# Иное решение 2:

# s = input()
# print(s.replace('f', ' ', 1).find('f') if 'f' in s else '-2')


# Задача 11:

# Переворот
# На вход программе подается строка текста в которой буква «h» встречается как минимум два раза.
# Напишите программу, которая возвращает исходную строку и переворачивает последовательность символов,
#  заключенную между первым и последним вхождением буквы «h».


# Пример:

# abch12345h ---> abch54321h
# In the hole in the ground there lived a hobbit	---> In th a devil ereht dnuorg eht ni eloh ehobbit

# txt = input()
#
# lEl = txt.find('h')
# rEl = txt.rfind('h')
#
# oldEl = txt[lEl+1:rEl]
# newEl = txt[rEl-1:lEl:-1]
#
#
# t = txt.replace(oldEl,newEl)
# print(t)


# =============================================
# ========== 11.3 Методы списков. Часть 1  ======
# =============================================


#~~~~~~~~~~~~~~ ЗАДАЧА № 6 (Тема: Методы списков. Часть 1)  ~~~~~~~

# Все сразу 1
# Дополните приведенный код, чтобы он:

# Вывел длину списка;
# Вывел последний элемент списка;
# Вывел список в обратном порядке (вспоминаем срезы);
# Вывел YES если список содержит числа 5 и 17, и NO в противном случае;
# Вывел список с удаленным первым и последним элементами.

# Примечание. Каждый вывод осуществлять с новой строки.


# numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]

# # Вывел длину списка
# print(len(numbers))
#
# # Вывел последний элемент списка
# print(numbers[len(numbers)-1])
#
# # Вывел список в обратном порядке (вспоминаем срезы)
# print(numbers[::-1])
#
# # Вывел YES если список содержит числа 5 и 17, и NO в противном случае
# if 5 in numbers and 17 in numbers:
#     print("YES")
# else:
#     print('NO')
#
# # Вывел список с удаленным первым и последним элементами
# print(numbers[1:49:1])


#~~~~~~~~~~~~~~ ЗАДАЧА № 7 (Тема: Методы списков. Часть 1)  ~~~~~~~

# Список строк
# На вход программе подается натуральное число  n, а затем n строк.
#
# Напишите программу, которая создает из указанных строк список и выводит его.
#
# Формат входных данных:
# На вход программе подаются натуральное число n, а затем n строк, каждая на отдельной строке.
#
# Формат выходных данных:
# Программа должна вывести список состоящий из указанных строк.
#
# Пример:
#
# 5
# C#
# C++
# C
# Python
# F#
#
# На выходе:  ['C#', 'C++', 'C', 'Python', 'F#']

# num = int(input())
# st = [ input() for i in range(num)]
#
# print(st)


#~~~~~~~~~~~~~~ ЗАДАЧА № 8 (Тема: Методы списков. Часть 1)  ~~~~~~~

# Алфавит
# Напишите программу, выводящую следующий список:
#
# ['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', ...]
#
# Примечание. Последний элемент списка состоит из 26 символов z.

# Пример ( АНГЛИЙСКИЙ АЛФАВИТ / английский алфавит / copy English alphabet ):
# 26 ----> ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

# eng = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
#
# engArr = []
#
# for i, el in enumerate(eng):
#     #print(i, el) # (индекс, элемент)
#     engArr.append( el*(i+1) )
# print(engArr)
#
#
#
# Другое Решение через chr(ord....)
# li = []
# for i in range(26):
#     li.append((chr(ord("a") + i)) * (i + 1))
# print(li)


#~~~~~~~~~~~~~~ ЗАДАЧА № 9 (Тема: Методы списков. Часть 1)  ~~~~~~~

    # Список кубов
    # На вход программе подается натуральное число  n, а затем  n целых чисел.
    #
    # Напишите программу, которая создает из указанных чисел список их кубов.
    #
    # Формат входных данных:
    # На вход программе подаются натуральное число n, а затем n целых чисел, каждое на отдельной строке.
    #
    # Формат выходных данных:
    # Программа должна вывести список, состоящий из кубов указанных чисел.

    # Пример:
    #             5
    #             1
    #             2
    #             3
    #             4
    #             5
    #
    #             [1, 8, 27, 64, 125]

# num = int(input())
#
# arr = []
# for i in range(num):
#     arr.append(int(input())**3)
#
# print(arr)

    # Вариант решения:
# print([int(input()) ** 3 for _ in range(int(input()))])


#~~~~~~~~~~~~~~ ЗАДАЧА № 10 (Тема: Методы списков. Часть 1)  ~~~~~~~

    # Список делителей
    # На вход программе подается натуральное число  n.
    #  Напишите программу, которая создает список состоящий из делителей введенного числа.
    #
    # Формат входных данных
    # На вход программе подается натуральное число n.
    #
    # Формат выходных данных
    # Программа должна вывести список, состоящий из делителей введенного числа.
    #
    # Пример: 36 ---->  [1, 2, 3, 4, 6, 9, 12, 18, 36]

# num = int(input())                  # 5
# arr = list(i+1 for i in range(num))
# #print(arr)                          # [1, 2, 3, 4, 5 ]
#
# arrDiv = []
#
# for i in arr:
#     if num % i == 0:
#         arrDiv.append(i)
#
# print(arrDiv)

# Другое решение:
# n = int(input())
# list = []
# for j in range(1, n // 2 + 1):
#     print(j) # сокращение поиска в 2 раза: 1 2 3
#     if n % j == 0:
#         list.append(j)
# list.append(n)# дозакинуть само число в делители
# print(list)





 # ====================
 # ===== Тема 11.3 ====
 # ====================


 # ~~~~~~~~ Задача 10 ~~~~~~~~~~~~~~

 # суммы двух соседних между собой
 # if чисел:
 # На вход: сколько чисел надо ввести и вводим это кол-во.
 # Программа должна  вывести список, состоящий из  сумм соседних    чисел.

 # Пример: вввели: 5
 #                   1 2 3 4 5
 # На выходе: [3,5,7,9]

 # num = int(input())  # 5
 # arr = list(int(input()) for i in range(num))  # [1, 2, 3, 4, 5]
 #
 # arrAcc = []
 # while len(arr) > 1:
 #     arrAcc.append(arr[0] + arr[1])
 #     del arr[0]
 #
 # print(arrAcc)

 # ~~~~~~~~ Задача 11 ~~~~~~~~~~~~~~

 # Удалите нечетные индексы

 # На вход программе подается натуральное число n, а затем n целых чисел.
 # Напишите программу, которая создает из указанных чисел список,
 # затем удаляет все элементы стоящие по нечетным индексам,
 # а затем выводит полученный список.
 #
 # Формат входных данных:
 # На вход программе подаются натуральное число  ,
 # а затем   целых чисел, каждое на отдельной строке.
 #
 # Пример:
 # 10
 #
 # 0 1 2 3 4 5 6 7 8 9
 #
 # [0, 2, 4, 6, 8]

 # num = int(input())
 # arr = [int(input()) for i in range(num)]
 #
 # print(arr[::2])


 # ~~~~~~~~ Задача 12 ~~~~~~~~~~~~~~

 # k-ая буква слова
 # На вход программе подается натуральное число n и n строк, а затем число строк k.

 # Напишите программу, которая выводит k-ую  букву из
 #  введенных строк на одной строке без пробелов.

 # Пример:
 #         5 (это n)
 #         abcdef
 #         bcdefg
 #         cdefgh
 #         defghi
 #         efghij
 #         2 (это k)

 #         На выходе: bcdef

 # Вариант # 1:

# n = int(input())
# strDic = {}
#
# for i in range(n):
#  strDic[i] = input()
#
# k = int(input())
#
# accStr = ''
#
# for j in strDic.values():
#  # print(j)        # слово
#  # print(len(j))   # длина
#  # print(j[k])     # буква
#
#  if len(j) >= k:
#      accStr +=j[k-1]
#
# print(accStr)

# Вариант # 2:  с def:

# def  inputElm():
#     n = int(input())
#
#     strDic = {}
#
#     for i in range(n):
#         strDic[i] = input()
#
#     k = int(input())
#
#     return (n, strDic, k)
#
#
# def calcStr(dataEl):
#     n, strDic, k = dataEl
#
#     accStr = ''
#
#     for j in strDic.values():
#         if len(j) >= k:
#             accStr +=j[k-1]
#
#     print(accStr)
#
#
# dataEl = inputElm()
# calcStr(dataEl)

 # ~~~~~~~~ Задача 13 (тема 11.3 Списки) ~~~~~~~~~~~~~~

 # Символы всех строк
 # На вход программе подается натуральное число n , а затем  n строк.
 #
 # Напишите программу, которая создает список из
 # символов всех строк, а затем выводит его.
 #
 # Пример:
 #         3
 #         abc
 #         def
 #         ghi

 # На выходе: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']

# num = int(input())
#
# arr = []
#
# for i in range(num):
#  s = list(input())
#  arr.extend(s)
#
# print(arr)


 # ============================================
 # ===== Тема 11.4  Вывод элементов списка ====
 # ============================================

# arr = [0, 'a', 2, [3, 4], 5, 6]
# print(*arr) # 0 a 2 [3, 4] 5 6
#
# ar = [1, 'a', 3, 4, 5, 6]
# for i in range(len(arr)):
#     print(i, ar[i])     # индекс значение
#     print(ar[10])       # IndexError: list index out of range
#
# for i, el in enumerate(ar):
#     print(i, el)        # индекс значение
#     print(ar[i])        # значение
#     #print(ar[10])      # IndexError: list index out of range


# ~~~~~~~~~~ Задача 1 (тема 11.4 вывод списков на экран ) ~~~~~~~~~~~~

# Дополните приведенный код, так чтобы он вывел сумму квадратов элементов списка numbers

# num = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
#
# sumSquare = 0
# for i in num:
#     sumSquare +=i**2
#
# print(sumSquare)



# ~~~~~~~~~~ Задача 2 (тема 11.4 вывод списков на экран ) ~~~~~~~~~~~~

# Значение функции
# На вход программе подается натуральное число n, а затем n целых чисел.
#  Напишите программу, которая для каждого введенного числа x выводит значение функции
# f(x) = x**2 + 2 *x+1 , каждое на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести сначала введенные числа, затем пустую строку,
#  а затем соответствующие значения функции.

# def getList():
#     num = int(input())
#
#     arr = []
#     for i in range(num):
#
#         arr.append(int(input()))
#
#     print(*arr, sep='\n')
#     print()
#
#     return arr
#
# def calculate(arrNum):
#
#     for i in range(len(arrNum)):
#         print(arrNum[i]**2+2*arrNum[i]+1)
#
#
# arrNum = getList()
# calculate(arrNum)




# Remove outliers
# При анализе данных, собранных в рамках научного эксперимента,
#  бывает полезно удалить самое большое и самое маленькое значение.
#
# На вход программе подается натуральное число n, а затем n различных натуральных чисел.
#
#  Напишите программу, которая удаляет наименьшее и наибольшее значение из указанных чисел,
#  а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.
#
# Пример:
#
#             7 (кол-во чисел)

#             1
#             2
#             3
#             4
#             5
#             6
#             7
#     на выходе (убраны макс и мин. знач.  1 и 7):
#
#             2
#             3
#             4
#             5
#             6


# num = int(input())
#
# arr = []
# for i in range(num):
#     arr.append(int(input()))
#
# maxEl = arr.index(max(arr) ) # индекс макс.значения
# del arr[maxEl]               # удалить из массива
#
# minEl = arr.index(min(arr) ) # индекс макс.значения
# del arr[minEl]               # удалить из массива
#
# print(*arr, sep='\n')


# ~~~~~~~~~~ Задача 4 (тема 11.4 вывод списков на экран ) ~~~~~~~~~~~~

# Без дубликатов
# На вход программе подается натуральное число n, а затем n строк.
#  Напишите программу, которая выводит только уникальные строки,
#  в том же порядке, в котором они были введены
#
# Пример:
#         5
#         first
#         second
#         first
#         third
#         second
# На выходе:
#         first
#         second
#         third

# def addList():
#
#     num = int(input())
#     arr = []
#
#     for i in range(num):
#         arr.append(input()) # создание Массива из input'ов
#     return arr
#
#
# def addUniq(arr):
#
#     # getSet = list(set(newarr))
#     # print(*getSet, sep='\n')
#
#     arrNew = []
#     for i, el in enumerate(arr):
#
#         if el not in arrNew:
#             arrNew.append(el)
#
#     print(*arrNew, sep='\n')
#
# arr = addList()
# addUniq(arr)


# Коротка версия:
# words = []
# for _ in range(int(input())):
#     s = input()
#     if s not in words:
#         words.append(s)
# print(*words, sep='\n')


# ~~~~~~~~ Задача 5 (тема 11.4 Вывод элментов списка) ~~~~~~~~~~~~~~

# Google search - 1
# На вход программе подается натуральное число n , затем n строк,
# затем  еще одна строка — поисковый запрос.
#
# Напишите программу, которая выводит все введенные строки,
# в которых встречается поисковый запрос.
#
# Пример:
#         Число строк - 5
#    Строки:
#         Язык Python прекрасен
#         C# - отличный язык программирования
#         Stepik - отличная платформа
#         BEEGEEK FOREVER!
#         язык Python появился 20 февраля 1991
#
#         Искомое слово:  * язык

#Создание массива со словами
# def addArr():
#     num = int(input())
#     arrWords = []
#
#     for _ in range(num):
#         arrWords.append(input())
#
#     return arrWords
#
# # поиск по массиву arrWords ключевого слова
# def requests(arr):
#
#     req = input() # поисковое слово
#     reqArr = []
#
#     for i,el in enumerate(arr):
#
#         if req.lower() in el.lower():
#             reqArr.append(el)
#
#
#     print(*reqArr, sep='\n')
#
#
# arr = addArr()
# requests(arr)


# Другое решение:

# frss =[input() for _ in range (int(input()))]
# q = input().lower()
# [print(fr) for fr in frss if q in fr.lower()]


# ~~~~~~~~ Задача 6 (тема 11.4 Вывод элментов списка) ~~~~~~~~~~~~~~

# Google search - 2 

# На вход программе подается натуральное число n, затем n строк,
# затем число k — количество поисковых запросов, затем  k строк -
# поисковые запросы. 
# Напишите программу, которая выводит все введенные строки, в которых
# встречаются все поисковые запросы.

# Пример:

        # n = 5 (кол-во строк с фразами)

        # Язык Python прекрасен
        # C# - отличный язык программирования
        # Stepik - отличная платформа
        # BEEGEEK FOREVER!
        # язык Python появился 20 февраля 1991

        # k = 2 (кол-во поисковых запросов)
        # язык
        # python

        # На выходе (по k ключевым словам):
        # Язык Python прекрасен
        # язык Python появился 20 февраля 1991


# Создание массива со словами
# def addArr():
#     num = int(input())
#     arrWords = [] # сборщик фраз, в которых ищем
#
#     for _ in range(num):
#         arrWords.append(input())
#
#     return arrWords
#
#
# # поиск по массиву arrWords ключевых слов
# def addReq():
#
#     numK = int(input()) #  k - кол-во поисковых слов
#     arrReq = [] # сбор ключевых слов для поиска
#
#     for _ in range(numK):
#         arrReq.append(input())
#
#     return arrReq
#
#
#
# def compare(arr, req):
#
#     #print(arr, req)
#
#     for i in arr:
#         count = 0
#         for j in range(len(req)): #req[j] искомые слова
#             if req[j].lower() in i.lower():
#                 #print(f'совпало "{req[j]}" для " {i} " ')
#                 count +=1
#                 if count == len(req):
#                     #print(f'Полное совпадение на слове " {i} " ')
#                     print(i)
#
#
# arr = addArr()
# req = addReq()
# compare(arr, req)

# Другое решение:

# a = [input() for _ in range(int(input()))]
# b = [input().lower() for _ in range(int(input()))]
# [print(i) for i in a if all([elem in i.lower() for elem in b])]



# # ~~~~~~~~ Задача 7 (тема 11.4 Вывод элментов списка) ~~~~~~~~~~~~~~

# Negatives, Zeros and Positives

# На вход программе подается натуральное число  n, а затем n целых чисел.
# Напишите программу, которая сначала выводит все отрицательные числа,
# затем нули, а затем все положительные числа, каждое на отдельной строке.

# Числа должны быть выведены в том же порядке, в котором они были введены.

# Формат входных данных:
# На вход программе подаются натуральное число n,
# а затем  n целых чисел, каждое на отдельной строке.

# Формат выходных данных:
# Программа должна вывести текст в соответствии с условием задачи.

# Пример:
#         7 (кол-во вводимых строк)

#         3
#         -4
#         1
#         0
#         -1
#         0
#         -2

# на выходе:

#         -4
#         -1
#         -2
#         0
#         0
#         3
#         1

# num = int(input())
#
# neg = []
# zero = []
# pos = []
#
# for i in range(num):
#     el = int(input())
#
#     if el < 0:
#         neg.append(el)
#     elif el == 0:
#         zero.append(el)
#     elif el > 0:
#         pos.append(el)
#
# print(*neg, *zero, *pos, sep='\n')





# ======================================================
# ========    Тема 11.5. Методы строк: split, join  =====
# ======================================================


# ~~~~~~~~~~~~~ ЗАДАЧА 2 (гл. 11.5) ~~~~~~~~~~~~~~~

# Построчный вывод
# На вход программе подается строка текста.
# Напишите программу, которая выводит слова введенной строки в столбик.
#
    # Пример:
        # первое второе

    # на выходе:
        # первое
        # второе

# s = input().split(' ')
#
# for i in s:
#     print(i)


# ~~~~~~~~~~~~~ ЗАДАЧА 3 (гл. 11.5) ~~~~~~~~~~~~~~~

# Инициалы
# На вход программе подается строка текста, содержащая имя, отчество и фамилию человека.
# Напишите программу, которая выводит инициалы человека.
#
# Пример:
# Владимир Семенович Высоцкий ----> В.С.В.


# name = input().split(' ')
# for i in name:
#     print(i[0],end='.')


# ~~~~~~~~~~~~~ ЗАДАЧА 4 (гл. 11.5) ~~~~~~~~~~~~~~~

# Windows OS

# В операционной системе Windows полное имя файла состоит из буквы диска,
# после которого ставится двоеточие и символ  "\", затем
# через такой же символ перечисляются подкаталоги (папки), в которых находится файл,
# в конце пишется имя файла (C:\Windows\System32\calc.exe).
#
# На вход программе подается одна строка с корректным именем файла в OS Windows.
#
# Напишите программу, которая разбирает строку на части,
# разделенные символом "\". Каждую часть вывести в отдельной строке

# Пример:
# C:\Windows\System32\calc.exe  ---->
#                                     C:
#                                     Windows
#                                     System32
#                                     calc.exe

# os = input().split('\\')
# print(*os,sep='\n')


# ~~~~~~~~~~~~~ ЗАДАЧА 5 (гл. 11.5) ~~~~~~~~~~~~~~~

# Диаграмма
# На вход программе подается строка текста, содержащая целые числа.
# Напишите программу, которая по заданным числам строит столбчатую диаграмму
#
# ПРИМЕР:
# 5 3 1 7 10 2
#
#                  +++++
#                   +++
#                    +
#                 +++++++
#                ++++++++++
#                    ++

# num = input().split()
# for i in num:
#     print('+' * int(i))


# ~~~~~~~~~~~~~ ЗАДАЧА 6 (гл. 11.5) ~~~~~~~~~~~~~~~

# Корректный ip-адрес

# На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой.
# Напишите программу, которая определяет является ли введенная строка текста
# корректным ip-адресом.
#
# Пример: 192.168.0.3 --> ДА
#         162.188.100.120  --> НЕТ

# ip = input().split('.')
# for i in ip:
#     if int(i) > 255:
#         print('НЕТ')
#         break
# else:
#     print('ДА')


# ~~~~~~~~~~~~~ ЗАДАЧА 7 (гл. 11.5) ~~~~~~~~~~~~~~~

# Добавь разделитель

# На вход программе подается строка текста и строка разделитель.
# Напишите программу, которая вставляет
# указанный разделитель между каждым символом введенной строки текста.

# Пример:
# 1234567
# *
# ---> 1*2*3*4*5*6*7

# stArr = list(input())
# symb = input()
#
# # for i in stArr:
# print(*stArr, sep=f'{symb}' )


# ~~~~~~~~~~~~~ ЗАДАЧА 8 (гл. 11.5) ~~~~~~~~~~~~~~~

# Количество совпадающих пар

# На вход программе подается строка текста, содержащая натуральные числа.
# Из данной строки формируется список чисел.
# Напишите программу, которая подсчитывает, сколько в полученном списке пар элементов,
# равных друг другу. Считается, что любые два (одиночных) элемента,
# равные друг другу образуют одну пару, которую необходимо посчитать.

# Пример: число 33333 ---> образует 10 пар



# ********** version-2 string, срезы. Работает ТОЛЬКО на строке(!) с числами от 0 до 9
# не сработает на составных числах (12 53 15 .....),
# т.к. они внутри строки выглядят как '125315'

# st = input()
# count = 0
# for i in range(len(st)):
#
#     print(st[i])
#     print(st[i+1::])
#
#             # if st[i] in st[i+1::]:
#             #     count +=1
#
#             # if (st[i+1::]).find(st[i]) >=0:
#             #     count +=1
#
#     for j in st[i+1::]:
#         if st[i] == j:
#             count += 1
#
#
# print(f'счётчик: {count}')


# ******************************************************(решал более 3х часов)
# ********** version-3 для массива (поняв как работает на строке) **************
# ищет по всяким числам !

# st = list( map(int,input().split(' ')) )
#
# count = 0
#
# for i in range(len(st)):
#
#     # контроль уменьшения массива (с которым сопоставляется искомое число)
#     print(f'Ищем число {st[i]} в массиве:')
#     print(st[i + 1::])
#     print('')
#
#     for j in st[i+1::]:
#
#         if st[i] == j:
#             count += 1
#
# print(f'счётчик: {count}')






# ============================================
# ======= 11.6 Методы списков. Часть 2 =========
# ============================================

# list.append(x)Добавляет элемент в конец списка
#
# list.extend(L)Расширяет список list, добавляя в конец все элементы списка L
#
# list.insert(i, x)Вставляет на i-ый элемент значение x
#
# list.remove(x)Удаляет первый элемент в списке, имеющий значение x. ValueError, если такого элемента не существует
#
# list.pop([i])Удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент
#
# list.index(x, [start [, end]])Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end)
#
# list.count(x)Возвращает количество элементов со значением x
#
# list.sort([key=функция])Сортирует список на основе функции
#
# list.reverse()Разворачивает список
#
# list.copy()Поверхностная копия списка
#
# list.clear()Очищает список


# ~~~~~~~~~~~~~ ЗАДАЧА №   (гл. 11.6 часть 2) ~~~~~~~~~~~~~~~


# ~~~~~~~~~~~~~ ЗАДАЧА № 5  (гл. 11.6 часть 2) ~~~~~~~~~~~~~~~ решаю 03.02.2023

# Все сразу 2 

# Дополните приведенный код, чтобы он:

# 1. Заменил второй элемент списка на  17 ;
# 2. Добавил числа  4, 5  и  6  в конец списка;
# 3. Удалил первый элемент списка;
# 4. Удвоил список;
# 5. Вставил число  25  по индексу 3;
# 6. Вывел список, с помощью функции  print()

# num = [8, 9, 10, 11]
#
# # 1. Заменил второй элемент списка на  17
# num[1] = 17
# print(num)  # [ 8, 17, 10, 11]
#
# # 2. Добавил числа  4, 5  и  6  в конец списка
# num.extend([4,5,6])
# print(num)
#
# # 3. Удалил первый элемент списка
# num.remove(num[0])
# print(num)
#
# # 4. Удвоил список
# num = num*2
# print(num)
#
# # 5. Вставил число  25  по индексу 3
# num.insert(3, 25)
# print(num)
#
# # 6. Вывел список, с помощью функции  print()
# print(num)



# ~~~~~~~~~~~~~ ЗАДАЧА № 6 (гл. 11.6 часть 2) ~~~~~~~~~~~~~~~

# Переставить min и max
# На вход программе подается строка текста, содержащая
#  различные натуральные числа. Из данной строки формируется список чисел. 
#  Напишите программу, которая меняет местами минимальный и максимальный элемент
# этого списка.

# Пример: 3 4 5 2 1 ---> 3 4 1 2 5

# num = list(map(int, input().split(' '))) # преобразование в массив из цифр
#
# maxEl = max(num)
# minEl = min(num)
#
# indMaxEl = num.index(maxEl)
# indMinEl = num.index(minEl)
#
# tmp = num[indMaxEl]
# num[indMaxEl] = num[indMinEl]
# num[indMinEl] = tmp
#
# print(*num, end=' ')


# ~~~~~~~~~~~~~ ЗАДАЧА № 7 (гл. 11.6 часть 2) ~~~~~~~~~~~~~~~

# Количество артиклей
# На вход программе подается строка, содержащая английский текст.
#  Напишите программу, которая подсчитывает общее количество артиклей:
# 'a', 'an', 'the'

# st = input().lower().split(' ')
#
# count = 0
# for i in st:
#     if i == 'a' or i == 'an' or i == 'the':
#         count +=1
# print(f'Общее количество артиклей: {count}')

#Другое решение:
# s = input().lower().split()
# print('Общее количество артиклей:', s.count('a') + s.count('an') + s.count('the'))


# ~~~~~~~~~~~~~ ЗАДАЧА № 8 (гл. 11.6 часть 2) ~~~~~~~~~~~~~~~

# Взлом Братства Стали 
#  Помогите  писцу Ибсену удалить все комментарии из программы.

# Формат входных данных:
# На первой строке вводится символ решётки и сразу же натуральное число
#   — количество строк в программе, не считая первой.
 #  Далее следует n строк кода.

# Формат выходных данных:
# Нужно вывести те же строки, но удалить комментарии и
#  символы пустого пространства в конце строк.
#  Пустую строку вместо первой строки ввода выводить не надо.

# Для работы в консоли (не по заданию):
# st = input().splitlines() # разбивка по \n (Enter Ентер)
# print(st)
#
# for i, el in enumerate(st):
#
#     idx_ht = el.find('#')
#
#     if idx_ht > -1:
#         print(f'For DELETE: {el[idx_ht::]}')
#         st[i] = el[:idx_ht:]
#
#         st[i].rstrip()
#
# print(*st, end='\n')


# Перерешиваю ЗАДАЧА № 8

# num = int(input().lstrip('#')) # отрезал хэш-тэг -> в int
#
# for i in range(num):
#     st = input()
#
#     idx_ht = st.find('#')
#
#     if idx_ht > -1:
#         st = st[:idx_ht:]
#         st = st.rstrip()
#
#     print(st)

#Другое решение
# for i in range(int(input()[1:])):
#     i = input().split("#")
#     print(i[0].rstrip())



# ~~~~~~~~~~~~~ ЗАДАЧА № 9* (гл. 11.6 часть 2) метод sort ~~~~~~~~~~~~~~~

# Сортировка чисел

# На вход программе подается строка текста, содержащая целые числа.
#  Из данной строки формируется список чисел.
#  Напишите программу, которая сортирует и выводит данный список сначала по возрастанию,
#  а затем по убыванию.
#
# пример:
# 4 5 1 2 3 8 ----> 1 2 3 4 5 8
#                   8 5 4 3 2 1

# num = list(map(int,input().split(' ')))
#
# num.sort()
# print(num)
# num.sort(reverse=True)
# print(num)



# ================================================
# ===== 11.7 Списочные выражения     ===============
# ================================================


# ~~~~~~~~~~~~~ ЗАДАЧА № 1 (гл. 11.7 )  ~~~~~~~~~~~~~

# Дополните приведенный код, используя списочное выражение так,
 # чтобы получить новый список, содержащий строки исходного списка с удаленным первым символом.

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
#
# new_keywords = [i[1::] for i in keywords]
#
# print(new_keywords)  # на выходе:  ['alse', 'rue', ... 'hile', 'ield']


# ~~~~~~~~~~~~~ ЗАДАЧА № 2 (гл. 11.7 )  ~~~~~~~~~~~~~ решаю 03.02.2023

# Дополните приведенный код, используя списочное выражение,
#  так чтобы получить новый список, содержащий длины строк исходного списка.

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
# lengths =

# print(lengths)    # [5, 4, 4, 3, .... 6, 5, 5]



# ~~~~~~~~~~~~~ ЗАДАЧА № 3 (гл. 11.7 )  ~~~~~~~~~~~~~ решаю 03.02.2023

# Дополните приведенный код списочным выражением, чтобы получить новый список,
#  содержащий только слова длиной не менее пяти символов (включительно).


# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
#
# new_keywords = [i for i in keywords if len(i)>=5]
#
# print(new_keywords)  # на выходе ['False', ... ... ,,,  'return', 'while', 'yield']


# ~~~~~~~~~~~~~ ЗАДАЧА № 4 (гл. 11.7 )  ~~~~~~~~~~~~~

# Дополните приведенный код, используя списочное выражение, так чтобы получить список всех чисел
#  палиндромов от 100 до 1000.

# pal = [i for i in range(100,1000) if str(i) == str(i)[::-1]  ]
# print(pal )
#[101, 111, 121, ... ... , 969, 979, 989, 999]



# ~~~~~~~~~~~~~ ЗАДАЧА № 5 (гл. 11.7 )  ~~~~~~~~~~~~~

# Списочное выражение 1
#
# На вход программе подается натуральное число n.
#  Напишите программу, использующую списочное выражение, которая создает список
#  содержащий квадраты чисел от 1 до n, а затем выводит его элементы построчно,
#  то есть каждый на отдельной строке.

# Пример:     5 --->    ( вывод в столбик): 1 4 9 16 25
# print( *[n**2 for n in range(1,int(input())+1)], sep='\n'  )


# ~~~~~~~~~~~~~ ЗАДАЧА № 6 (гл. 11.7 )  ~~~~~~~~~~~~~

# Списочное выражение 2
# На вход программе подается строка текста, содержащая целые числа.
# Напишите программу, использующую списочное выражение, которая
# выведет кубы указанных чисел также на одной строке.

# Пример: 2 4 3 -----> 8 64 27

# print( *[n**3 for n in range(1,int(input())+1)] ) # 3 ---> 1 8 27

# Обычное решение:
# for i in input().split(' '):
#     print(int(i)**3)    # Ввод: 2 4 6,  Вывод: 8 64 216

#  Решение на степик через списочное выражение (list comprehension):

# print( *[int(i)**3 for i in input().split(' ')] )

 # Ввод: 2 4 6,  Вывод: 8 64 216



# ~~~~~~~~~~~~~ ЗАДАЧА № 7 (гл. 11.7 )  ~~~~~~~~~~~~~

# В одну строку 1
# На вход программе подается строка текста, содержащая слова.
#  Напишите программу, которая выводит слова введенной строки в столбик.
#
# #Пример: 111 222 --->  111
#                       222

# Обычное решение:

# for i in input().split(' '):
#     print(i)

# Решение через списочное выражение (list comprehension):

# print( *[i for i in input().split(' ')], sep='\n' )




# ~~~~~~~~~~~~~ ЗАДАЧА № 8 (гл. 11.7 )  ~~~~~~~~~~~~~

# В одну строку 2
# На вход программе подается строка текста.
#  Напишите программу, использующую списочное выражение,
#  которая выводит все цифровые символы данной строки.

# Пример:
# 123Python awesome!5.6 ---> 12356

# вариант (ver 01) вывода в строку:

# for i in (input()):
#     if i.isdigit():
#         print(i, end='')

# вариант (ver 02)
# print( *[i for i in input() if str(i).isdigit() ], sep='' )



# ~~~~~~~~~~~~~ ЗАДАЧА № 9 (гл. 11.7 )  ~~~~~~~~~~~~~

# В одну строку 3
#
# На вход программе подается строка текста, содержащая целые числа.
#  Напишите программу, использующую списочное выражение,
#  которая выведет квадраты четных чисел, которые не оканчиваются на цифру 4.

# Пример:
# 1 2 3 4 5 6 7 8 9 ---> 16 36
# 8 18 12 3 ---> ...

# Обычная версия:

# for i in map(int,input().split(' ')):
#
#     if i%2 == 0 and (i**2)%10 !=4:
#         print(i**2)

# print(*[i**2 for i in map(int,input().split(' ')) if i%2 == 0 and (i**2)%10 !=4])




# ================  Глава 11.8.: Сортировка списков ==========


 # ~~~~~~~~~ Задача № 1  ( Глава 11.8.: Сортировка: сортировка пузырьком (for for-if) ~~~~~~~~~~~

# a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56,
#      92, 1, 32, -17, 36, 88, -61, -97, -37, -84, 50, 47, 94, -6, 52, -76, 93, 14,
#      -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97, 0, -94, 7,
#      -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24,
#      -83, -74, -73, 11, -26, 63, -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84,
#      -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]
# n = len(a)
#
# for i in range(n - 1):
#     for j in range(n - i - 1):
#         if a[j] > a[j + 1]:
#             a[j], a[j + 1] = a[j + 1], a[j]
#
# print(a)
# Читинг: просто вставил готовый ответ в тест.программу.
# b = [-97, -96, -95, -94, -91, -84, -84, -84, -83, -79, -78, -78, -78, -76,
 # -76, -75, -74, -74, -73, -71, -71, -71, -68, -68, -66, -65, -62, -61, -58,
 # -56, -55, -55, -51, -47, -41, -40, -37, -32, -29, -27, -26, -26, -24, -20,
 # -19, -17, -17, -16, -16, -13, -11, -9, -8, -6, 0, 1, 7, 7, 11, 14, 16, 17,
 # 17, 21, 21, 24, 25, 32, 36, 38, 38, 39, 44, 44, 47, 48, 50, 52, 56, 58, 63,
 # 67, 69, 70, 75, 78, 79, 79, 88, 88, 88, 91, 92, 93, 93, 94, 96, 96, 97, 98]





 # ~~~~~~~~~ Задача № 2 ( Глава 11.8.: Сортировка: сортировка ВЫБОРОМ ~~~~~~~~~~~

# !!!  TEST: сортонуть по возрастанию !!!

# Пример: [5, 1, 8, 2, 4]  --- :на выходе: --->   [1, 2, 4, 5, 8]



# a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]

# a = [5, 1, 8, 2, 4 ]
# # print(length, lastEl) # стартовая длина Списка = 5 || посл.элем a[4] = 40
#
# for i in range(len(a)):
#     print(f'\nИндекс: {i} Значение: {a[i]}') # 0: 50,  1: 10, 2: 80, 3: 20,  4: 40
#
#     for j in (a[:len(a)-i:]):
#         print(f'Для j = {j} в Списке {a[:len(a)-i:]} ищу макс.число')
#         print(f'Макс.: {max(a[:len(a)-i:])}, Послед. число для замены: {a[len(a)-1-i]}')
#
#
#         if j == max(a[:len(a)-i:]):
#
#             print(f'j {j} в срезе {(a[:len(a)-i:])}  = max {max(a[:len(a)-i:])}')
#
#             IndexMaxEl = a.index(max( a[:len(a)-i:])) # Поиск индекса макс.числа среза
#             print(f'Индекс текущего макс.числа: {IndexMaxEl}')
#
#
#             tmp = (a[len(a) - 1 - i]) # в tmp хран. последнее число из среза
#             a[len(a) - 1 - i] = max( a[:len(a)-i:]) # п/запись послед.числа макс. числом
#             a[IndexMaxEl] = tmp
#
#
# print(a)


# ~~~~~~~~~ Задача № 3 ( Глава 11.8.: Сортировка: сортировка ПРОСТЫМИ ВСТАВКАМИ ~~~~~~~~~~~

# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# n = len(a)
#
# for i in range(1, n):
#     elem = a[i]  # первый элемент из неотсортированной части списка
#     j = i
#     while j >= 1 and a[j - 1] > elem:
#         a[j] = a[j - 1]
#         j -= 1
#     a[j] = elem
#
#
# print('Отсортированный список:', a)
#
#   нА ВЫХОДЕ:    [-67, -3, -2, 0, 1, 6, 7, 8, 9, 12, 34, 45, 99, 1000]



# Экзаменационные задачи на Списки

#~~~~~~ Задача 1 ~~~~~~~~~~~

# На вход программе подается четное число n, n ≥ 2.
# Напишите программу, которая выводит список четных чисел

# num = int(input())
# arr = []
# for i in range(1,num+1):
#     if i%2==0:
#         arr.append(i)
# print(arr)

#~~~~~~ Задача 2 ~~~~~~~~~~~

# Сумма двух списков
#
# На вход программе подаются две строки текста, содержащие целые числа.
# Из данных строк формируются списки чисел L и M.
# Напишите программу, которая создает третий список, элементами которого являются
# суммы соответствующих элементов списков L и M.
# Далее программа должна вывести каждый элемент полученного списка на одной строке через 1 пробел.

# Пример:
# 3 1 4
# 1 5 9
#         на выходе 4 6 13


# arrA = list(map(int, input().split(' ')))
# arrB = list(map(int, input().split(' ')))
#
# accArr = []
# for i in range(len(arrA)):
#     #print(i, arrA[i]) индекс значение
#     accArr.append(arrA[i]+arrB[i])
#
# print(*accArr)



#~~~~~~ Задача 3 ( join )~~~~~~~~~~~

# Сумма чисел

# На вход программе подается строка текста, содержащая натуральные числа.
# Напишите программу, которая вставляет между каждым числом знак +,
#  а затем вычисляет сумму полученных чисел.
#
# Пример:
# 2 5 11 33 55 -----> 2+5+11+33+55=106


# arr = list(map(int, input().split(' ')))

# st = list(map(str, input().split(' ')))
# # print(st)
#
# summa = sum(list(map(int,st)))
# # print(summa)
#
# sumSt = '+'.join(st)
# # print(sumSt)
#
# print(f'{sumSt}={summa}')







#~~~~~~ (?? ) Задача 4  ~~~~~~~~~~~

# Валидный номер
# На вход программе подается строка текста.
#  Напишите программу: является ли введенная строка корректным телефонным номером.
#  Строка текста является корректным телефонным номером если она имеет формат:
#
# abc-def-hijk    или
# 7-abc-def-hijk
#
# где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9.
#
# Пример:
# 7-301-447-5820  YES
# 301-447-5820    YES
# 301-4477-5820   NO
# 3X1-447-5820    NO
# 3014475820      NO
# 8-301-447-5820  NO
# 77-301-447-5820 NO

# ввод Номера:
num = input()

# преобразовать (split) в Список / массив
arrNum = num.split('-')
#print(arrNum)
# print(arrNum[0], arrNum[1])

joinNum = ''.join(arrNum)
#print(joinNum, len(joinNum))



#print(joinNum.isdigit()) # False если если есть буквы

for i, el in enumerate(arrNum):

    # не д.б. наличие букв
    if joinNum.isdigit() !=True:
        print('NO')
        exit()

    # кол-во цифр д.б. 10...11
    if len(joinNum) < 10 or len(joinNum) > 11:
        print('NO')
        exit()

    if len(el[0]) > 3:
        print('NO')
        exit()

    if  el[0] == '8':
        print('NO')
        exit()




if (len(arrNum[0])==1 or len(arrNum[0])==3) and len(arrNum[1])==3 and (len(arrNum[2])==3 or len(arrNum[2])==4):
    print('YES')
else:
    print('NO')









#~~~~~~ (?)Задача 5  ~~~~~~~~~~~

# Самый длинный

# На вход программе подается строка текста.
#  Напишите программу, использующую списочное выражение,
#  которая находит длину самого длинного слова.
#
# Пример:
#
# sss fffffff qqqqqq aaaaaaaaaaaaaaaaaaaa qq -----> 20     (это слово aaaaaaaaaaaaaaaaaaaa)


# arr = []
#
# for i in list(input().split(' ')):
#     arr.append(len(i))
#
# print(max(arr))



#~~~~~~ Задача 6 ~~~~~~~~~~~

# Молодежный жаргон

# На вход программе подается строка текста.
#  Напишите программу, использующую списочное выражение,
#  которая преобразует каждое слово введенного текста в "молодежный жаргон" по следующему правилу:

# 1). первая буква каждого слова удаляется и ставится в конец слова;
# 2). затем в конец слова добавляется слог "ки".

# Пример:
# проспал почти всю ночь  -----> роспалпки очтипки сювки очьнки
# слово ----> ловоски

# st = list(input().split(' '))
#
# text = ''
#
# for i in st:
#     text += i[1:]+i[0]+'ки'+' '
#
# print(text )



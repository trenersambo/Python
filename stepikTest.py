# def addArr(a ):
#
#     arr = []
#     for i in list(a):
#         arr.append( int(i) )
#     return arr
#
#
#
#
#
# def calc(caclEl):
#
#     a,b,c = caclEl
#     # print(a,b,c,type(a) )
#
#
#     print(f'{a}{b}{c}\n'
#           f'{a}{c}{b}\n'
#           f'{b}{a}{c}\n'
#           f'{b}{c}{a}\n'
#           f'{c}{a}{b}\n'
#           f'{c}{b}{a}')
#
#
# a = input()
# caclEl = addArr(a)
#
# calc(caclEl)


# ===================

# put your python code here
# def calc(num):
#
#    arrEl = list(num)
#
#    a,b,c,d = arrEl
#
#    print(f'Цифра в позиции тысяч равна {a}\n'
#          f'Цифра в позиции сотен равна {b}\n'
#          f'Цифра в позиции десятков равна {c}\n'
#          f'Цифра в позиции единиц равна {d}')
#
# num = input()
# calc(num)

# ТЫСЯЧИ СОТНИ ДЕСЯТКИ ЕДИНИЦЫ
# num//1000   # thousands
# num//100%10 # hundreds
# num%100//10 # dozens
# num%10      # units

# ===================

# print('*****************')
# print('*               *')
# print('*               *')
# print('*****************')

# ===================
# import math
# def calc(a,b):
#
#     print(f'Квадрат суммы {a} и {b} равен {int(math.pow((a+b), 2))}')
#     print(f'Сумма квадратов {a} и {b} равна {a**2 + b**2}')
#
# a = int(input())
# b = int(input())
#
# calc(a,b)


# ===================

# def calc(a,b,c,d):
#
#     arr = [a,b,c,d]
#     a, b, c, d = arr
#
#     summ = a**b + c**d
#     print(summ)
#
# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
#
# calc(a,b,c,d)



# ===================

# a = input()
#
# n   = [a for i in range(1,4,3)]
# n1 = int(n[0])
# # print(n1)
#
# nn  = [a for i in range(1,4,2)]
# nn1 = int(nn[0]+nn[1])
# # print(nn1)
#
#
# nnn = [a for i in range(1,4,1)]
# nnn1 = int(nnn[0]+nnn[1]+nnn[2])
# # print(nnn1)
# #
# # print(n, nn, nnn)
#
# print(n1+nn1+nnn1)



# =================== экзамен закончился

# i = int(input('Введи число: '))

# if i / 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

# if i // 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

#3 - ok
# if i % 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

# if i // 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')

#5 - ok (перестановка сбила с толку :-) )
# if i % 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')

# if i // 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')

# def compare(pswd1, pswd2):
#     if pswd1 == pswd2:
#         print('Пароль принят')
#     else:
#         print('Пароль не принят')
#
# pswd1 = input()
# pswd2 = input()
#
# compare(pswd1, pswd2)

# i = int(input())
# if i % 2 != 0:
#      print('нечётное')
# else:
#      print('чётное')
#
# print(('Четное','Нечетное')[ int(input()) % 2 ])

# ТЫСЯЧИ СОТНИ ДЕСЯТКИ ЕДИНИЦЫ
# num//1000   # thousands
# num//100%10 # hundreds
# num%100//10 # dozens
# num%10      # units

# def compare(num):
#     arr = list(num)
#     a,b,c,d = arr
#
#     if int(a) + int(d) == int(b) - int(c):
#         print('ДА')
#     else:
#         print('НЕТ')
#
# num = input()
# compare(num)

#print(('Доступ разрешен','Доступ запрещен')[ int(input()) < 18 ])

# Арифметическая прогрессия  - это числовая последовательность  , в которой каждое число, начиная со второго,
# получается из предыдущего добавлением к нему постоянного числа (так называемого шага).
# Соответственно третье число арифметической прогрессии будет равно - разности второго и первого числа
# прибавленного к второму числу:
#
# допустим, есть последовательность  трех чисел:  a b c
#
#  a - первое число,
# b - второе число,
# c - третье число,
# ( b - a) - шаг , чтобы понять является ли данная последовательность  арифметической прогрессией,
# должно выполнятся условие: \
#
#     ( b - a) + b = c
#  или: b-a = c-b



# def calc(a,b,c):
#
#     arr = [a,b,c]
#     a, b, c = arr
#
#     if b-a == c-b:
#         print('YES')
#     else:
#         print('NO')
#
# a = int(input())
# b = int(input())
# c = int(input())
#
#
# calc(a,b,c)

# =====================

# 4.1.3.  Напишите программу, которая определяет наименьшее из двух чисел.
#
# Решение 1
#
# def minEl(a,b):
#
#     arr = [a,b]
#     minEl = min(arr)
#     print(minEl)
#
# a = int(input())
# b = int(input())
#
# minEl(a,b)
#
#
# Решение 2
#
# n = [int(input()) for _ in range(2)]
# print(min(n))
#
# Решение 3
# print(min(int(input()), int(input())))

# =====================

# 4.1. Напишите программу, которая определяет наименьшее из четырёх чисел.

# def minEl(a,b,c,d):
#
#     arr = [a,b,c,d]
#     min_elm = arr[0]
#
#     for i in arr:
#         if i <= min_elm:
#             min_elm = i
#
#     print(min_elm)
#
# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
#
# minEl(a,b,c,d)

# Решение 2
# sp = []
# for i in range(4):
#     a = int(input())
#     sp.append(a)
# print(min(sp))



# print(min(int(input()), int(input()), int(input()), int(input())))

# =====================

# Задача stepik № 4.1.4
#
# Напишите программу, которая по введённому возрасту пользователя сообщает,
# к какой возрастной группе он относится:
#
# до 13 включительно – детство;
# от 14 до 24 – молодость;
# от 25 до 59 – зрелость;
# от 60 – старость.

# def age(num):
#
#     if num >= 60:
#         print('старость')
#     if (25 <= num <= 59):
#         print('зрелость')
#     if (14 <= num <= 24):
#         print('молодость')
#     if (0 <= num <= 13):
#             print('детство')
#
# num = int(input())
# age(num)


# Решение 2
# n = int(input())
# print("старость" if n>59 else "зрелость" if n>24 else "молодость" if n>13 else "детство")

# Решение 3

# a = int(input())
# print(['детство', 'молодость', 'зрелость', 'старость'][sorted([13, 24, 60, a]).index(a)])


# 4.1...
# Напишите программу, которая считывает три числа
# и подсчитывает сумму только положительных чисел.

# def addCalc(a,b,c):
#
#     arr = [a,b,c]
#
#     acc_sum = []
#
#     for i in arr:
#         if i<0:
#             i=0
#         acc_sum.append(i)
#
#     summ = sum(acc_sum)
#     print(summ)
#
#
#
# a = int(input())
# b = int(input())
# c = int(input())
#
# addCalc(a,b,c)


# ===========================

# 4.2 Логические операции

# 2 == 2 or 4 > 2     True    (True or True)
# 6 <= 6 and 2 > 3    False   (True and False)
# 1 != 4 and 6 != 3   True    (True and True)
# 2 >= -1 or 2 <= 4   True    (True or True)
# not (2 > 2)         True    not (False)
# not (6 <= 10)       False   not (True)


# Что будет выведено на экран в результате выполнения следующей программы?

# num1 = 34
# num2 = 81
# if num1 // 9 == 0 or num2 % 9 == 0:
#     print('число', num1, 'выиграло')
# else:
#     print('число', num2, 'выиграло')


#Задача 4.2.1

# Напишите программу, которая принимает целое число xx и
# определяет, принадлежит ли данное число указанному промежутку (-1, 17).

# мой вариант 1:

# dot = int(input())
#
# if -1 < dot < 17:
#     print('Принадлежит')
# else:
#     print('Не принадлежит')

# мой вариант 2 COUNT:

# def compare(dot):
#     gapArr = list(range(-0,17))
#
#     if gapArr.count(dot):
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)

#
# мой вариант 3 ANY

# def compare(dot):
#     gapArr = list(range(0,17))
#
#     # если есть такой el который == введенному значению dot
#     res = any( el==dot for el in gapArr)
#
#     print('Принадлежит' if res==True else 'Не принадлежит')
#
# dot = int(input())
# compare(dot)

# ******

# вариант 2
# print(('Не п', 'П')[-1 < int(input()) < 17] + 'ринадлежит')
#
# вариант 3
# print('Принадлежит' if -1 < int(input()) < 17 else 'Не принадлежит')

# вариант 4
# print('Принадлежит' if int(input()) in range(0, 17) else 'Не принадлежит')

# ******


# Задача № 2 из 4.2.
#
# Напишите программу, которая принимает целое число xx и определяет,
# принадлежит ли данное число указанным промежуткам (-∞, -3) (7, +∞).


# мой вариант 1

# def compare(dot):
#
#     if -3 < dot <7 :
#         print('Не принадлежит')
#     else:
#         print('Принадлежит')
#
# dot = int(input())
# compare(dot)


# мой вариант 2

# def compare(dot):
#
#     arr = list(range(-2, 7))
#
#     res = any(el == dot for el in arr)
#
#     if res == False :
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)


# чужой вариант1 в 1 строку
# print('Принадлежит' if not -3 < int(input()) < 7 else 'Не принадлежит')

# чужой вариант2 в 1 строку
# print(("П", "Не п")[(-3 < int(input()) < 7)] + "ринадлежит")

# ========================

# Задача № 3 из 4.2.

# Напишите программу, которая принимает целое число x и
# определяет, принадлежит ли данное число указанным промежуткам:
#
# (-30,-2) и (7, 25)

# def compare(dot):
#
#     arr1 = list(range(-29, -1))
#     arr2 = list(range(8, 26))
#
#
#     res1 = any(el == dot for el in arr1)
#     res2 = any(el == dot for el in arr2)
#
#     if res1 == True or res2 == True:
#         print('Принадлежит')
#     else:
#         print('Не принадлежит')
#
# dot = int(input())
# compare(dot)

# ========================

# Задача № 4 из 4.2.
# def compare(num):
#     arrLen = len( list( str(num) ) ) #кол-во цифр в числе
#
#     if arrLen < 4 or arrLen >4:  # (с отрицательным -123 не сработает )
#         print('NO')
#         exit()
#     if num%7 ==0 or num%17 == 0:
#         print('YES')
#     else:
#         print('NO')
#
# num = int(input())
# compare(num)

# n = int(input())
# a = n // 1000
# if ((n>0) and (a != 0)) and ((n % 7 == 0) or (n % 17 == 0)):
#     print ('YES')
# else:
#     print ('NO')


# ========================

# Задача № 4 из 4.2.

# Напишите программу, которая принимает три положительных числа
# и определяет, существует ли невырожденный треугольник с такими сторонами
#
#  То есть, должны выполняться строгие неравенства
#
# a+b>c
# a+c>b
# b+c>a


# def addCalc(a,b,c):
#
#     if a+b > c:
#         if a+c > b:
#             if b+c >a:
#                 print('YES')
#             else:
#                 print('NO')
#     else:
#         print('NO')
#
#
#
# a = int(input())
# b = int(input())
# c = int(input())
#
# addCalc(a,b,c)


# ========================


# Задача № 5 из 4.2.

# Високосный год
# Напишите программу, которая определяет, является ли год с данным номером високосным.
# Если год является високосным, то выведите «YES», иначе выведите «NO».
#
# Год является високосным, если
# его номер кратен 4, но не кратен 100, или если он кратен 400.

# def leap(y):
#
#     if (y%4 == 0 and y%100 !=0) or y%400 == 0:
#         print('YES')
#     else:
#         print('NO')
#
# y = int(input())
# leap(y)


# ========================


# Задача № 6 из 4.2.

# Ход ладьи
# Даны две различные клетки шахматной доски.
# Напишите программу, которая определяет, может ли ладья попасть с первой клетки на
# вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и
# номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом ладьи можно попасть во вторую,
# или «NO» в противном случае.

# def chess(a,b,c,d):
#     if a==c or b==d:
#         print('YES')
#     else:
#         print('NO')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# chess(a,b,c,d)


# вариант решения № 2

# def chess(a,b,c,d):
#     if a-c==0 or b-d==0:
#         print('YES')
#     else:
#         print('NO')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# chess(a,b,c,d)


# ========================


# Задача № 7 из 4.2.

# Ход короля
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли король попасть с первой клетки
# на вторую одним ходом.
#
# Программа получает на вход четыре числа от 1 до 8 каждое,
# задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом короля можно попасть во вторую,
# или «NO» в противном случае.


# def chess(a,b,c,d):
#     if abs(a-c) > 1 or abs(b-d) > 1:
#         print('NO')
#     else:
#         print('YES')
#
# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
#
# # здесь могла бы быть валидация на превышение 8
#
# chess(a,b,c,d)



# ========================


# Задача № 1 из 4.3.
#
# def compare(zoom, flash):
#     if zoom > flash:
#         print('NO')
#     elif zoom < flash:
#         print('YES')
#     else:
#         print("Don't know")
#
#
# zoom = int(input())
# flash = int(input())
#
# compare(zoom, flash)


# ========================


# Задача № 2 из 4.3.
# Напишите программу, которая принимает три положительных числа
# и определяет вид треугольника, длины сторон которого равны введенным числам.

# def tringle(a,b,c):
#     if a==b==c:
#         print('Равносторонний')
#         exit()
#     elif a !=b and b !=c and a != c:
#         print('Разносторонний')
#         exit()
#     else:
#         print('Равнобедренный')
#
# a=int(input())
# b=int(input())
# c=int(input())

# tringle(a,b,c)


# ========================

# Задача № 3 из 4.3.
# Даны три различных целых числа. Напишите программу, которая находит среднее по величине число.
# Средним называется число, которое будет вторым, если три числа отсортировать в порядке возрастания.

# def middle(*nums):   # args = (1, 2, 3)
#
#     arr = list(nums) # создать массив сразу из неск.аргум-в
#
#     arr.sort()       #  сортировка по возрастанию
#
#     print(arr[1])    #  среднее из трех
#
#
#
# a=int(input())
# b=int(input())
# c=int(input())
#
# middle(a,b,c)


# ========================

# Задача № 4 из 4.3.
# Дан порядковый номер месяца  (1,2,…, 12).
# Напишите программу, которая выводит на экран количество дней в этом месяце.
# Принять, что год является невисокосным.

# mon = int(input())
# # без ВАЛИДАЦИИ на ввод 1...12
# dic = \
#     {
#         1: 31,  2: 28, 3: 31,  4: 30,  5: 31, 6: 30,
#         7: 31,  8: 31,  9: 30,  10: 31, 11: 30, 12: 31
#     }
#
# for i in dic:
#     #print(i, dic[i]) # ключ / значение
#     if mon == i:
#         print(dic[i])


# ========================

# # Задача № 5 из 4.3.
# Известен вес боксера-любителя (целое число).
# Известно, что вес таков, что боксер может быть отнесён к одной из трех весовых категорий:
#
# Легкий вес – до 60 кг;
# Первый полусредний вес – до 64 кг;
# Полусредний вес – до 69 кг.
#
# Напишите программу, определяющую, в какой категории будет выступать данный боксер.

# def boxMan(weight):
#     if weight <60:
#         print('Легкий вес')
#     elif 60<=weight<64:
#         print('Первый полусредний вес')
#     else:
#         print('Полусредний вес')
#
#
# weight = int(input())
# boxMan(weight)

#samboРулит




# ========================

#  Задача № 6 из 4.3.

# КАЛЬКУЛЯТОР на словаре

# def calc(a,b,oprt):
#
#     if b == 0 and oprt == '/':
#         print('На ноль делить нельзя!')
#         exit()
#
#     elif oprt !='+' and oprt !='-' and oprt !='*' and oprt !='/':
#         print('Неверная операция')
#
#     # Словарь для операций (надо отработать этот знание)
#     cd = \
#         {
#             '+': a + b,
#             '-': a - b,
#             '*': a * b,
#             "/": a / b,
#         }
#
#     # Перебор на совпадение oprt с ключем из Словаря
#     for i in cd:
#
#         if oprt == i:
#             print(cd.get(i))
#
#
# a = int(input())
# b = int(input())
# oprt = input()
#
# calc(a,b,oprt)



# ====== вариант для Stepik (в лоб) ======

# def calc(a,b,oprt):
#
#     if b == 0 and oprt == '/':
#         print('На ноль делить нельзя!')
#         exit()
#
#     elif oprt !='+' and oprt !='-' and oprt !='*' and oprt !='/':
#         print('Неверная операция')
#
#     if oprt == '+':
#         print(a + b)
#     if oprt == '-':
#         print(a - b)
#     if oprt == '*':
#         print(a * b)
#     if oprt == '/':
#         print(a / b)
#
#
# a = int(input())
# b = int(input())
# oprt = input()
#
# calc(a,b,oprt)



# ========================

#  Задача № 7 из 4.3. (схитрил: два аргумента и Один словарь)

# def calcColor(a,b):
#
#     dic = \
#         {
#             'красный синий': 'фиолетовый',
#             'красный желтый': 'оранжевый',
#             'красный красный': 'красный ',
#             'синий красный': 'фиолетовый',
#             'синий желтый': 'зеленый',
#             'синий синий': 'синий',
#             'желтый красный': 'оранжевый',
#             'желтый синий': 'зеленый',
#             'желтый желтый': 'желтый',
#         }
#
#     #Перебор на совпадение 2-х цветов с ключем из Словаря
#
#     for i in dic:
#         #print(i)
#         ab = a+' '+b # схитрил для использования 2х аргументов
#         #print(ab)
#
#         if ab == i:
#             print( dic.get(i) )
#             exit()
#     else:
#         print('ошибка цвета') # такое возможно тольк в Python
#
# a = input()
# b = input()
#
# calcColor(a,b)


# ========================

#  Задача № 8 из 4.3. (поиск значения в Списке Списков)

# Цвета колеса рулетки
# На колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета карманов:
#
# карман 0 зеленый;
# для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный;
# для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
# для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный.
# Напишите программу, которая считывает номер кармана и показывает, является ли этот карман зеленым, красным или черным. Программа должна вывести сообщение об ошибке, если пользователь вводит число, которое лежит вне диапазона от 0 до 36.

# def color(num, arr):
#
#     for idx, podArr in enumerate(arr):
#         if str(num) in podArr:
#             print(idx, podArr) # Индекс ПодМассива / ПодМассив
#             if idx == 0:
#                 print('зеленый')
#             if idx == 1:
#                 print('красный')
#             if idx == 2:
#                 print('черный')
#             break
#     else:
#         print('ошибка ввода')
#
# num = input()
#
# # массив должен быть строго из string-значений
# arr = \
#     [
#         '0',
#         ['1','3','5','7','9','12','14','16',
#          '18','19','21','23','25','27','30','32','34','36'],
#         ['2','4','6','8','10','11','13','15',
#          '17','20','22','24','26','28','29','31','33','35']
#     ]
# # вызов функции
# color(num, arr)


# ========================

#  Задача № 9 из 4.3. (поиск значения в Списке Списков)

# Пересечение отрезков
# На числовой прямой даны два отрезка: [a_1;  b_1] и [a_2; b_2 ].
# Напишите программу, которая находит их пересечение.
#
# Пересечением двух отрезков может быть:
#
# отрезок;
# точка;
# пустое множество.

# def cross(a1, b1, a2, b2):
#
#     if a1<b1<a2<b2:
#         print('пустое множество')
#     if a1 < a2 < b1 < b2:
#         print(f'{a2} {b1}')
#     if a1 < b1 == a2 < b2:
#         print(f'{b1}')
#     if a1 < a2 < b1 == b2:
#         print(f'{a2} {b2}')
#     if a1 < a2 < b2 < b1:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b1 == b2:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b2 < b1:
#         print(f'{a2} {b2}')
#     if a1 == a2 < b1 < b2:
#         print(f'{a2} {b1}')
#
#     if a2 < b2 < a1 < b1:
#         print('пустое множество')
#     if a2 < a1 < b2 < b1:
#         print(f'{a1} {b2}')
#     if a2 < b2 == a1 < b1:
#         print(f'{a1}')
#     if a2 < a1 < b1 == b2:
#         print(f'{a1} {b1}')
#     if a2 < a1 < b1 < b2:
#         print(f'{a1} {b1}')
#
#
# a1 = int(input())
# b1 = int(input())
# a2 = int(input())
# b2 = int(input())
#
# cross(a1, b1, a2, b2)

# ============ Контрольная работа (экзамен) ==========
# 5.  Итоговая работа на условный оператор

# Начало столетия
# Напишите программу, которая определяет, оканчивается ли год с данным номером на два нуля.
# Если год оканчивается, то выведите «YES», иначе выведите «NO».


# e = int(input())
#
# # arr = list(eahr)
# # print(arr)
#
# if e%1000 == 0 or e%100==0:
#     print('YES')
# else:
#     print('NO')


#===============

# Шахматная доска
# Заданы две клетки шахматной доски.
# Напишите программу, которая определяет имеют ли указанные клетки один цвет или нет.
# Если они покрашены в один цвет, то выведите слово «YES», а если в разные цвета — то «NO».
# help: https://madazimov.github.io//mathematics/shahmatnie-zadachki-shahmatnaya-doska.html

# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if (x1 + y1 + x2 + y2) % 2 == 0:
#     print('YES')
# else:
#     print('NO')
#


#===============

# age = int(input()) # 10...15
# sex = input() # f or m
#
#
# if 10 <= age <= 15:
#     if sex == 'f':
#         print('YES')
#     else:
#         print('NO')
#         exit()
# else:
#     print('NO')

#===============
#
# Римские цифры
# Напишите программу, которая считывает целое число и
# выводит соответствующую ему римскую цифру.
# Если число находится вне диапазона 1-10,
# то программа должна вывести текст «ошибка».


# num = int(input() ) # 1 ... 10
# arr = ['0', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X']
#
# for idx,el in enumerate(arr):
#     # print(idx, el ) # --> 0 0, 1 I , 2 II, ... 10 X
#     if num == idx:
#         print(el)
#         break
# else:
#     print('ошибка')
#
#


# ========== вариант решения через словарь ==========
# num = int(input())
#
# if 1 <= num <= 10:
#     RomanNumerals = {1:"I", 2:"II", 3:"III", 4:"IV", 5:"V",
#      6:"VI", 7:"VII", 8:"VIII", 9:"IX", 10:"X"}
#     print(RomanNumerals[num])
# else:
#     print("ошибка")

#===============

# YES or NO вот в чем вопрос
# Напишите программу, которая принимает на вход число
# и в зависимости от условий выводит текст «YES», либо «NO».
#
# Условия:
#
# если число нечётное, то вывести «YES»;
# если число чётное в диапазоне от 2 до 5 (включительно), то вывести «NO»;
# если число чётное в диапазоне от 6 до 20 (включительно), то вывести «YES»;
# если число чётное и больше 20, то вывести «NO».


# num = int(input())
#
# if num%2 !=0:
#     print('YES')
#     exit()
# if num%2 == 0 and (2 <= num <=5):
#     print('NO')
#     exit()
# if num%2 ==0 and (6 <= num <=20):
#     print('YES')
#     exit()
# if num%2 == 0 and num>20:
#     print('NO')

#===============

# Ход слона
# Даны две различные клетки шахматной доски.
# Напишите программу, которая определяет, может ли слон попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки
# сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом слона можно попасть во вторую
# или «NO» в противном случае.

# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if abs(x1 - x2) == abs(y1 - y2):
#     print('YES')
# else:
#     print('NO')

#===============

# Ход коня
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли конь попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки
# сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом коня можно попасть во вторую
# или «NO» в противном случае.

# a = int(input()) # место старта1
# b = int(input()) # место старта2
# c = int(input()) # финиш1
# d = int(input()) # финиш2
#
# dot1=a-c
# dot2=b-d
#
# #print(dot1**2 + dot2**2) #5 , закономерность для коня
#
# if (dot1**2 + dot2**2) == 5:
#     print('YES')
#     exit()
# else:
#     print('NO')


#===============

# Ход ферзя
# Даны две различные клетки шахматной доски.
# Напишите программу,  которая определяет, может ли ферзь попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и
# номер строки сначала для первой клетки, потом для второй клетки.
#
# Программа должна вывести «YES», если из первой клетки ходом ферзя можно попасть во вторую
# или «NO» в противном случае.

# x1 = int(input()) # место старта1
# y1 = int(input()) # место старта2
# x2 = int(input()) # финиш1
# y2 = int(input()) # финиш2
#
# if(x1==x2 and y1 != y2) or (x1 !=x2 and y1 == y2) or abs(x1-x2)==abs(y1-y2):
#     print('YES')
# else:
#     print('NO')


#=========== конец экзамена ============


# 6.1 Числовые типы данных: int, float

# задача 1 из темы 6.1.
# Площадь треугольника
# Напишите программу, которая считывает длины двух катетов в
# прямоугольном треугольнике и выводит его площадь.
# S = 1/2*a*b

# a = float(input())
# b = float(input())
#
# print(1/2*a*b)


# =============================

# задача 2 из темы 6.1.
# Две старушки
# Две старушки идут навстречу друг другу с постоянными скоростями V_1 V_2V км/ч.
# Определите, через какое время старушки встретятся, если расстояние между ними равно S км.

# V скорость сближения = V1+V2
# t = S/V

# s = float(input())
# v1 = float(input())
# v2 = float(input())
#
# t = s/(v1+v2)
# print(t)


# =============================

# задача 3 из темы 6.1.

# Обратное число

# Напишите программу, которая считывает с клавиатуры одно число и
# выводит обратное ему.
# Если при этом введённое с клавиатуры число – ноль, то вывести
# «Обратного числа не существует» (без кавычек).
#
# Пример: (2,5)^-1 = 1 / 2.5

# num = float(input())
#
# if num != 0:
#     print(1/num)
#     exit()
# else:
#     print('Обратного числа не существует')


# =============================

# задача 4 из темы 6.1.

# У   Рэя Бредбери есть роман «451 градус по Фаренгейту».
# Напишите программу, которая определяет, какой температуре по
# шкале Цельсия соответствует указанное значение по шкале Фаренгейта.
#
# Используйте формулу для перевода C = 5/9*(F-32)

# f = float(input())
#
# print( 5/9*(f-32) )


# =============================

# задача 5 из темы 6.1.
# Dog age
# На вход программе подается число nn – количество собачьих лет.
# Напишите программу, которая вычисляет возраст собаки в человеческих годах.
#
# Примечание. В течение первых двух лет собачий год равен 10.5 человеческим годам.
# После этого каждый год собаки равен 4 человеческим годам.

# def dogAge(y):
#
#     if y==1:
#         print(10.5)
#
#     elif y >= 2:
#         print( 21+(y-2)*4 )
#
# y = int(input())
# dogAge(y)


# =============================

# задача 6 из темы 6.1.

# Первая цифра после точки
#
# Дано положительное действительное число.
# Выведите его первую цифру после десятичной точки.
#
# Пример: 3384390.4339 --> 4

        # поиск решения: ... b % 1 * 10 // 1
        # 3384390.4339%1*10//1 ---> # 4.0
        # 459933200.23%1*10//1 ---> # 2.0
        # 555.50059%1*10//1    ---> # 5.0
        # 22127333.67213%1*10//1 ---> # 6.0
        # int(1.5%1*10//1)     ---> # 5

        # 1). 3384390.4339 % 1          ---> 0.4339000000618398
        # 2). 3384390.4339 % 1 *10      ---> 4.339000000618398
        # 3). 3384390.4339 % 1 *10 // 1 ---> 4.0 int(4.0) = 4

# num = float(input())
#
# print( int(num % 1 * 10 // 1 ) )



# =============================

# задача 7 из темы 6.1.
#
# Дробная часть
# Дано положительное действительное число.
# Выведите его дробную часть.

# num = float(input())
# print( num % 1 )

# =============================

# задача 8 из темы 6.1.

# Напишите программу, которая находит
# наименьшее и наибольшее из пяти чисел.

# a,b,c,d,e = int(input()), int(input()),int(input()),int(input()),int(input())
#
#
# mini = min(a,b,c,d,e)
# print(f'Наименьшее число = {mini}')
# maxi = max(a,b,c,d,e)
# print(f'Наибольшее число = {maxi}')



#  ==========  Примечание: ==========

# если Надо задать через input 5 разных значений, то в ОДНУ СТРОКУ:

# lst = [ int(input( ) ) for i in range(5) ]



# =============================

# задача 9 из темы 6.1.

# Сортировка трёх 🌶️
# Напишите программу, которая упорядочивает три числа от большего к меньшему.

# numArr = [ int(input() ) for i in range(3) ]
#
# numArr = sorted(numArr)
# numArr = numArr[::-1]
#
# for el in numArr:
#     print(el)

# ======== вариант сортировки ПУЗЫРЬКОМ (?) ============

# arr = [ int(input() ) for i in range(3) ]
#
# for i,eli in enumerate(arr):
#
#     for j,elj in enumerate(arr):
#
#         if arr[j]<arr[i]:
#             tmp = arr[i]
#             arr[i] = arr[j]
#             arr[j] = tmp
#
# #print(arr)
# for el in arr:
#     print(el)


# ======== вариант сортировки sort (reverse = True)============

# a = [int(input()) for _ in range (3)]
# a.sort(reverse = True)
# print(*a, sep = '\n')




# =============================

# задача 10 из темы 6.1.

# Интересное число

# Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется
# средней по величине цифре. Напишите программу, которая определяет интересное число или нет.
# Если число интересное, следует вывести – «Число интересное» иначе «Число неинтересное».

# def intrs(num):
#     arrStr = list(num) # ['1', '2', '3']
#     print(arrStr)
#
#     arrInt = list(map(int, arrStr))
#     print(arrInt)      # [1, 2, 3]
#
#     mdl = max(arrInt) - min(arrInt)
#     print(mdl)
#
#     if mdl in arrInt:
#         print('Число интересное')
#     else:
#         print('Число неинтересное')
#
# num = input()
# intrs(num)

# ==== коротк. вар-т решения ======

# lst = list(map(int, list(input())))
# print('Число интересное' if max(lst)*2 == sum(lst) else 'Число неинтересное')


# =============================

# задача 11 из темы 6.1.

# Абсолютная сумма
# Даны пять чисел. Напишите программу, которая
# вычисляет сумму их модулей |a_1| + |a_2| +|a_3| +|a_4| + |a_5|

# arr = [float(input()) for _ in range (5)]
#
# print(arr) # [532.0, 0.0, 3467.0, 0.0, 55353.0]
#
# total = 0
#
# for i in arr:
#     total += abs(i)
#
# print(total) # 59352.0



# =============================

# задача 12 из темы 6.1.

# Манхэттенское расстояние
# Прогуливаясь по Манхэттену, вы не можете попасть из точки А в точку Б по кратчайшему пути.
# Если только вы не умеете проходить сквозь стены, вам обязательно придется идти
# вдоль его параллельно-перпендикулярных улиц.
#
# На плоскости манхэттенское расстояние между двумя точками (p1;p2) и (q1;q2)
# ∣p1−q1∣+∣p2−q2∣.


# arr = [int(input()) for _ in range (4)]
#
# p1, p2, q1, q2 = arr
#
# print(p1, p2, q1, q2)
#
# print( abs(p1 - q1) + abs(p2 - q2) )


# =============================

# задача 1,2 из темы 6.2.
#print(f'"Python is a great language!", said Fred. "I don\'t ever remember having this much fun before."')

# arr = [str(input()) for _ in range (2)]
# print(f'Hello {arr[0]} {arr[1]}! You just delved into Python')


